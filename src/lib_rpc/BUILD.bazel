load("@obazl_rules_ocaml//ocaml:rules.bzl",
    "ocaml_archive",
    "ocaml_module",
    "ocaml_ns_archive",
    "ocaml_signature",
)

###############################################
########### Archive/Library Targets ###########

######## tezos-rpc ########
TEZOS_RPC_OPTS = [
    "-open", "Data_encoding",
    "-open", "Tezos_error_monad",
]

TEZOS_RPC_DEPS = [
    "//src/lib_error_monad:tezos-error-monad",
    "@data-encoding//:data-encoding",
    "@resto-directory//:resto-directory",
    "@resto//:resto",
]

ocaml_ns_archive(
    name       = "tezos-rpc",
    ns         = "Tezos_rpc",
    visibility = ["//visibility:public"],
    submodules = [
        ":RPC_answer",
        ":RPC_arg",
        ":RPC_context",
        ":RPC_description",
        ":RPC_directory",
        ":RPC_encoding",
        ":RPC_error",
        ":RPC_path",
        ":RPC_query",
        ":RPC_service",
    ],
)

#############################
####  Singleton Targets  ####

ocaml_module(
    name     = "RPC_answer",
    struct   = "RPC_answer.ml",
    sig      = ":RPC_answer_cmi",
    opts     = TEZOS_RPC_OPTS,
    deps     = TEZOS_RPC_DEPS + [
       ":RPC_service",
    ]
)

ocaml_signature(
    name     = "RPC_answer_cmi",
    src      = "RPC_answer.mli",
    opts     = TEZOS_RPC_OPTS,
    deps     = TEZOS_RPC_DEPS + [
       ":RPC_service",
       ":RPC_encoding",
    ]
)

ocaml_module(
    name     = "RPC_arg",
    struct   = "RPC_arg.ml",
    sig      = ":RPC_arg_cmi",
    opts     = TEZOS_RPC_OPTS,
    deps     = TEZOS_RPC_DEPS + [
    ]
)

ocaml_signature(
    name     = "RPC_arg_cmi",
    src      = "RPC_arg.mli",
    opts     = TEZOS_RPC_OPTS,
    deps     = TEZOS_RPC_DEPS + [
    ]
)

ocaml_module(
    name     = "RPC_context",
    struct   = "RPC_context.ml",
    sig      = ":RPC_context_cmi",
    opts     = TEZOS_RPC_OPTS,
    deps     = TEZOS_RPC_DEPS + [
       ":RPC_service",
       ":RPC_encoding",
       ":RPC_directory",
    ]
)

ocaml_signature(
    name     = "RPC_context_cmi",
    src      = "RPC_context.mli",
    opts     = TEZOS_RPC_OPTS,
    deps     = TEZOS_RPC_DEPS + [
       ":RPC_service",
       ":RPC_encoding",
       ":RPC_directory",
    ]
)

ocaml_module(
    name     = "RPC_description",
    struct   = "RPC_description.ml",
    sig      = ":RPC_description_cmi",
    opts     = TEZOS_RPC_OPTS,
    deps     = TEZOS_RPC_DEPS + [
       ":RPC_service",
       ":RPC_context",
    ]
)

ocaml_signature(
    name     = "RPC_description_cmi",
    src      = "RPC_description.mli",
    opts     = TEZOS_RPC_OPTS,
    deps     = TEZOS_RPC_DEPS + [
       ":RPC_encoding",
       ":RPC_context",
    ]
)

ocaml_module(
    name     = "RPC_directory",
    struct   = "RPC_directory.ml",
    sig      = ":RPC_directory_cmi",
    opts     = TEZOS_RPC_OPTS,
    deps     = TEZOS_RPC_DEPS + [
       ":RPC_service",
       ":RPC_encoding",
       ":RPC_answer",
    ]
)

ocaml_signature(
    name     = "RPC_directory_cmi",
    src      = "RPC_directory.mli",
    opts     = TEZOS_RPC_OPTS,
    deps     = TEZOS_RPC_DEPS + [
       ":RPC_service",
       ":RPC_encoding",
       ":RPC_answer",
    ]
)

ocaml_module(
    name     = "RPC_encoding",
    struct   = "RPC_encoding.ml",
    sig      = ":RPC_encoding_cmi",
    opts     = TEZOS_RPC_OPTS,
    deps     = TEZOS_RPC_DEPS + [
    ]
)

ocaml_signature(
    name     = "RPC_encoding_cmi",
    src      = "RPC_encoding.mli",
    opts     = TEZOS_RPC_OPTS,
    deps     = TEZOS_RPC_DEPS + [
    ]
)

ocaml_module(
    name     = "RPC_error",
    struct   = "RPC_error.ml",
    sig      = ":RPC_error_cmi",
    opts     = TEZOS_RPC_OPTS,
    deps     = TEZOS_RPC_DEPS + [
       ":RPC_service",
       ":RPC_context",
    ]
)

ocaml_signature(
    name     = "RPC_error_cmi",
    src      = "RPC_error.mli",
    opts     = TEZOS_RPC_OPTS,
    deps     = TEZOS_RPC_DEPS + [
       ":RPC_context",
    ]
)

ocaml_module(
    name     = "RPC_path",
    struct   = "RPC_path.ml",
    sig      = ":RPC_path_cmi",
    opts     = TEZOS_RPC_OPTS,
    deps     = TEZOS_RPC_DEPS + [
    ]
)

ocaml_signature(
    name     = "RPC_path_cmi",
    src      = "RPC_path.mli",
    opts     = TEZOS_RPC_OPTS,
    deps     = TEZOS_RPC_DEPS + [
    ]
)

ocaml_module(
    name     = "RPC_query",
    struct   = "RPC_query.ml",
    sig      = ":RPC_query_cmi",
    opts     = TEZOS_RPC_OPTS,
    deps     = TEZOS_RPC_DEPS + [
    ]
)

ocaml_signature(
    name     = "RPC_query_cmi",
    src      = "RPC_query.mli",
    opts     = TEZOS_RPC_OPTS,
    deps     = TEZOS_RPC_DEPS + [
    ]
)

ocaml_module(
    name     = "RPC_service",
    struct   = "RPC_service.ml",
    sig      = ":RPC_service_cmi",
    opts     = TEZOS_RPC_OPTS,
    deps     = TEZOS_RPC_DEPS + [
       ":RPC_query",
       ":RPC_path",
       ":RPC_encoding",
    ]
)

ocaml_signature(
    name     = "RPC_service_cmi",
    src      = "RPC_service.mli",
    opts     = TEZOS_RPC_OPTS,
    deps     = TEZOS_RPC_DEPS + [
       ":RPC_query",
       ":RPC_path",
       ":RPC_encoding",
    ]
)

