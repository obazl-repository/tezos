load("@obazl_rules_ocaml//ocaml:rules.bzl",
    "ocaml_archive",
    "ocaml_module",
    "ocaml_ns_archive",
    "ocaml_signature",
)

###############################################
########### Archive/Library Targets ###########

######## tezos-proxy ########
TEZOS_PROXY_OPTS = [
    "-open", "Tezos_base__TzPervasives",
]

TEZOS_PROXY_DEPS = [
    "//src/lib_base:tezos-base",
    "//src/lib_client_base:tezos-client-base",
    "//src/lib_context:tezos-context",
    "//src/lib_mockup_proxy:tezos-mockup-proxy",
    "//src/lib_protocol_environment:tezos-protocol-environment",
    "//src/lib_rpc:tezos-rpc",
    "//src/lib_shell_services:tezos-shell-services",
    "@ringo-lwt//:ringo-lwt",
]

ocaml_ns_archive(
    name       = "tezos-proxy",
    ns         = "Tezos_proxy",
    visibility = ["//visibility:public"],
    submodules = [
        ":Light",
        ":Light_consensus",
        ":Light_core",
        ":Light_internal",
        ":Light_logger",
        ":Light_proto",
        ":Logger",
        ":Proxy",
        ":Proxy_events",
        ":Proxy_getter",
        ":Proxy_proto",
        ":Proxy_services",
        ":RPC_client",
        ":Registration",
    ],
)

#############################
####  Singleton Targets  ####

ocaml_module(
    name     = "RPC_client",
    struct   = "RPC_client.ml",
    sig      = ":RPC_client_cmi",
    opts     = TEZOS_PROXY_OPTS,
    deps     = TEZOS_PROXY_DEPS + [
       ":Registration",
       ":Proxy_services",
       ":Proxy_events",
    ]
)

ocaml_signature(
    name     = "RPC_client_cmi",
    src      = "RPC_client.mli",
    opts     = TEZOS_PROXY_OPTS,
    deps     = TEZOS_PROXY_DEPS + [
       ":Registration",
       ":Proxy_services",
    ]
)

ocaml_module(
    name     = "Light",
    struct   = "light.ml",
    sig      = ":Light_cmi",
    opts     = TEZOS_PROXY_OPTS,
    deps     = TEZOS_PROXY_DEPS + [
    ]
)

ocaml_signature(
    name     = "Light_cmi",
    src      = "light.mli",
    opts     = TEZOS_PROXY_OPTS,
    deps     = TEZOS_PROXY_DEPS + [
    ]
)

ocaml_module(
    name     = "Light_consensus",
    struct   = "light_consensus.ml",
    sig      = ":Light_consensus_cmi",
    opts     = TEZOS_PROXY_OPTS,
    deps     = TEZOS_PROXY_DEPS + [
       ":Light_proto",
       ":Light_internal",
    ]
)

ocaml_signature(
    name     = "Light_consensus_cmi",
    src      = "light_consensus.mli",
    opts     = TEZOS_PROXY_OPTS,
    deps     = TEZOS_PROXY_DEPS + [
       ":Light_proto",
    ]
)

ocaml_module(
    name     = "Light_core",
    struct   = "light_core.ml",
    sig      = ":Light_core_cmi",
    opts     = TEZOS_PROXY_OPTS,
    deps     = TEZOS_PROXY_DEPS + [
       ":Proxy",
       ":Light_proto",
       ":Light_logger",
       ":Light_internal",
       ":Light_consensus",
       ":Light",
    ]
)

ocaml_signature(
    name     = "Light_core_cmi",
    src      = "light_core.mli",
    opts     = TEZOS_PROXY_OPTS,
    deps     = TEZOS_PROXY_DEPS + [
       ":Proxy",
       ":Light_proto",
       ":Light",
    ]
)

ocaml_module(
    name     = "Light_internal",
    struct   = "light_internal.ml",
    sig      = ":Light_internal_cmi",
    opts     = TEZOS_PROXY_OPTS,
    deps     = TEZOS_PROXY_DEPS + [
    ]
)

ocaml_signature(
    name     = "Light_internal_cmi",
    src      = "light_internal.mli",
    opts     = TEZOS_PROXY_OPTS,
    deps     = TEZOS_PROXY_DEPS + [
    ]
)

ocaml_module(
    name     = "Light_logger",
    struct   = "light_logger.ml",
    sig      = ":Light_logger_cmi",
    opts     = TEZOS_PROXY_OPTS,
    deps     = TEZOS_PROXY_DEPS + [
    ]
)

ocaml_signature(
    name     = "Light_logger_cmi",
    src      = "light_logger.mli",
    opts     = TEZOS_PROXY_OPTS,
    deps     = TEZOS_PROXY_DEPS + [
    ]
)

ocaml_module(
    name     = "Light_proto",
    struct   = "light_proto.ml",
    opts     = TEZOS_PROXY_OPTS,
    deps     = TEZOS_PROXY_DEPS + [
       ":Proxy",
    ]
)

ocaml_module(
    name     = "Logger",
    struct   = "logger.ml",
    sig      = ":Logger_cmi",
    opts     = TEZOS_PROXY_OPTS,
    deps     = TEZOS_PROXY_DEPS + [
    ]
)

ocaml_signature(
    name     = "Logger_cmi",
    src      = "logger.mli",
    opts     = TEZOS_PROXY_OPTS,
    deps     = TEZOS_PROXY_DEPS + [
    ]
)

ocaml_module(
    name     = "Proxy",
    struct   = "proxy.ml",
    opts     = TEZOS_PROXY_OPTS,
    deps     = TEZOS_PROXY_DEPS + [
    ]
)

ocaml_module(
    name     = "Proxy_events",
    struct   = "proxy_events.ml",
    opts     = TEZOS_PROXY_OPTS,
    deps     = TEZOS_PROXY_DEPS + [
    ]
)

ocaml_module(
    name     = "Proxy_getter",
    struct   = "proxy_getter.ml",
    sig      = ":Proxy_getter_cmi",
    opts     = TEZOS_PROXY_OPTS,
    deps     = TEZOS_PROXY_DEPS + [
       ":Proxy_proto",
       ":Proxy",
    ]
)

ocaml_signature(
    name     = "Proxy_getter_cmi",
    src      = "proxy_getter.mli",
    opts     = TEZOS_PROXY_OPTS,
    deps     = TEZOS_PROXY_DEPS + [
       ":Proxy_proto",
       ":Proxy",
    ]
)

ocaml_module(
    name     = "Proxy_proto",
    struct   = "proxy_proto.ml",
    opts     = TEZOS_PROXY_OPTS,
    deps     = TEZOS_PROXY_DEPS + [
       ":Proxy",
    ]
)

ocaml_module(
    name     = "Proxy_services",
    struct   = "proxy_services.ml",
    sig      = ":Proxy_services_cmi",
    opts     = TEZOS_PROXY_OPTS,
    deps     = TEZOS_PROXY_DEPS + [
       ":Registration",
       ":Proxy_proto",
       ":Proxy_getter",
       ":Proxy",
       ":Light_logger",
       ":Light_core",
       ":Light",
    ]
)

ocaml_signature(
    name     = "Proxy_services_cmi",
    src      = "proxy_services.mli",
    opts     = TEZOS_PROXY_OPTS,
    deps     = TEZOS_PROXY_DEPS + [
       ":Registration",
       ":Light",
    ]
)

ocaml_module(
    name     = "Registration",
    struct   = "registration.ml",
    sig      = ":Registration_cmi",
    opts     = TEZOS_PROXY_OPTS,
    deps     = TEZOS_PROXY_DEPS + [
       ":Proxy_proto",
       ":Proxy_getter",
       ":Proxy",
       ":Light_proto",
    ]
)

ocaml_signature(
    name     = "Registration_cmi",
    src      = "registration.mli",
    opts     = TEZOS_PROXY_OPTS,
    deps     = TEZOS_PROXY_DEPS + [
       ":Proxy_proto",
       ":Proxy_getter",
       ":Proxy",
       ":Light_proto",
    ]
)

