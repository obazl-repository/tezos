load("@obazl_rules_ocaml//ocaml:rules.bzl",
    "ocaml_archive",
    "ocaml_module",
    "ocaml_ns_archive",
    "ocaml_signature",
)

###############################################
########### Archive/Library Targets ###########

######## tezos-mockup-registration ########
TEZOS_MOCKUP_REGISTRATION_OPTS = [
    "-open", "Tezos_base__TzPervasives",
]

TEZOS_MOCKUP_REGISTRATION_DEPS = [
    "//src/lib_base:tezos-base",
    "//src/lib_client_base:tezos-client-base",
    "//src/lib_protocol_environment:tezos-protocol-environment",
    "//src/lib_shell_services:tezos-shell-services",
]

ocaml_ns_archive(
    name       = "tezos-mockup-registration",
    ns         = "Tezos_mockup_registration",
    visibility = ["//visibility:public"],
    submodules = [
        ":Mockup_args",
        ":Registration",
        ":Registration_intf",
    ],
)

######## tezos-mockup ########
TEZOS_MOCKUP_OPTS = [
    "-open", "Tezos_base__TzPervasives",
    "-open", "Tezos_mockup_registration",
]

TEZOS_MOCKUP_DEPS = [
    "//src/lib_base/unix:tezos-base.unix",
    "//src/lib_base:tezos-base",
    "//src/lib_client_base:tezos-client-base",
    "//src/lib_mockup:tezos-mockup-registration",
    "//src/lib_mockup_proxy:tezos-mockup-proxy",
    "//src/lib_p2p:tezos-p2p",
    "//src/lib_p2p_services:tezos-p2p-services",
    "//src/lib_protocol_environment:tezos-protocol-environment",
    "//src/lib_rpc:tezos-rpc",
    "//src/lib_rpc_http:tezos-rpc-http",
    "//src/lib_rpc_http:tezos-rpc-http-client",
    "//src/lib_stdlib_unix:tezos-stdlib-unix",
    "@resto-cohttp-self-serving-client//:resto-cohttp-self-serving-client",
]

ocaml_ns_archive(
    name       = "tezos-mockup",
    ns         = "Tezos_mockup",
    visibility = ["//visibility:public"],
    submodules = [
        ":Files",
        ":Local_services",
        ":Migration",
        ":Persistence",
        ":Persistence_intf",
        ":RPC_client",
    ],
)

######## tezos-mockup-commands ########
TEZOS_MOCKUP_COMMANDS_OPTS = [
    "-open", "Tezos_base__TzPervasives",
    "-open", "Tezos_mockup",
    "-open", "Tezos_mockup_registration",
]

TEZOS_MOCKUP_COMMANDS_DEPS = [
    "//src/lib_base:tezos-base",
    "//src/lib_client_base:tezos-client-base",
    "//src/lib_client_commands:tezos-client-commands",
    "//src/lib_mockup:tezos-mockup",
    "//src/lib_mockup:tezos-mockup-registration",
]

ocaml_ns_archive(
    name       = "tezos-mockup-commands",
    ns         = "Tezos_mockup_commands",
    visibility = ["//visibility:public"],
    submodules = [
        ":Mockup_commands",
        ":Mockup_wallet",
    ],
)

#############################
####  Singleton Targets  ####

ocaml_module(
    name     = "RPC_client",
    struct   = "RPC_client.ml",
    opts     = TEZOS_MOCKUP_OPTS,
    deps     = TEZOS_MOCKUP_DEPS + [
       ":Local_services",
    ]
)

ocaml_module(
    name     = "Files",
    struct   = "files.ml",
    sig      = ":Files_cmi",
    opts     = TEZOS_MOCKUP_OPTS,
    deps     = TEZOS_MOCKUP_DEPS + [
    ]
)

ocaml_signature(
    name     = "Files_cmi",
    src      = "files.mli",
    opts     = TEZOS_MOCKUP_OPTS,
    deps     = TEZOS_MOCKUP_DEPS + [
    ]
)

ocaml_module(
    name     = "Local_services",
    struct   = "local_services.ml",
    opts     = TEZOS_MOCKUP_OPTS,
    deps     = TEZOS_MOCKUP_DEPS + [
       ":Registration_intf",
       ":Registration",
       ":Persistence",
       ":Files",
    ]
)

ocaml_module(
    name     = "Migration",
    struct   = "migration.ml",
    sig      = ":Migration_cmi",
    opts     = TEZOS_MOCKUP_OPTS,
    deps     = TEZOS_MOCKUP_DEPS + [
       ":Persistence",
    ]
)

ocaml_signature(
    name     = "Migration_cmi",
    src      = "migration.mli",
    opts     = TEZOS_MOCKUP_OPTS,
    deps     = TEZOS_MOCKUP_DEPS + [
    ]
)

ocaml_module(
    name     = "Mockup_args",
    struct   = "mockup_args.ml",
    sig      = ":Mockup_args_cmi",
    opts     = TEZOS_MOCKUP_REGISTRATION_OPTS,
    deps     = TEZOS_MOCKUP_REGISTRATION_DEPS + [
    ]
)

ocaml_signature(
    name     = "Mockup_args_cmi",
    src      = "mockup_args.mli",
    opts     = TEZOS_MOCKUP_REGISTRATION_OPTS,
    deps     = TEZOS_MOCKUP_REGISTRATION_DEPS + [
    ]
)

ocaml_module(
    name     = "Mockup_commands",
    struct   = "mockup_commands.ml",
    sig      = ":Mockup_commands_cmi",
    opts     = TEZOS_MOCKUP_COMMANDS_OPTS,
    deps     = TEZOS_MOCKUP_COMMANDS_DEPS + [
       ":Registration_intf",
       ":Registration",
       ":Migration",
    ]
)

ocaml_signature(
    name     = "Mockup_commands_cmi",
    src      = "mockup_commands.mli",
    opts     = TEZOS_MOCKUP_COMMANDS_OPTS,
    deps     = TEZOS_MOCKUP_COMMANDS_DEPS + [
    ]
)

ocaml_module(
    name     = "Mockup_wallet",
    struct   = "mockup_wallet.ml",
    sig      = ":Mockup_wallet_cmi",
    opts     = TEZOS_MOCKUP_COMMANDS_OPTS,
    deps     = TEZOS_MOCKUP_COMMANDS_DEPS + [
    ]
)

ocaml_signature(
    name     = "Mockup_wallet_cmi",
    src      = "mockup_wallet.mli",
    opts     = TEZOS_MOCKUP_COMMANDS_OPTS,
    deps     = TEZOS_MOCKUP_COMMANDS_DEPS + [
    ]
)

ocaml_module(
    name     = "Persistence",
    struct   = "persistence.ml",
    sig      = ":Persistence_cmi",
    opts     = TEZOS_MOCKUP_OPTS,
    deps     = TEZOS_MOCKUP_DEPS + [
       ":Registration_intf",
       ":Registration",
       ":Files",
    ]
)

ocaml_signature(
    name     = "Persistence_cmi",
    src      = "persistence.mli",
    opts     = TEZOS_MOCKUP_OPTS,
    deps     = TEZOS_MOCKUP_DEPS + [
       ":Registration_intf",
       ":Persistence_intf",
    ]
)

ocaml_module(
    name     = "Persistence_intf",
    struct   = "persistence_intf.ml",
    opts     = TEZOS_MOCKUP_OPTS,
    deps     = TEZOS_MOCKUP_DEPS + [
       ":Registration",
    ]
)

ocaml_module(
    name     = "Registration",
    struct   = "registration.ml",
    sig      = ":Registration_cmi",
    opts     = TEZOS_MOCKUP_REGISTRATION_OPTS,
    deps     = TEZOS_MOCKUP_REGISTRATION_DEPS + [
       ":Registration_intf",
    ]
)

ocaml_signature(
    name     = "Registration_cmi",
    src      = "registration.mli",
    opts     = TEZOS_MOCKUP_REGISTRATION_OPTS,
    deps     = TEZOS_MOCKUP_REGISTRATION_DEPS + [
       ":Registration_intf",
    ]
)

ocaml_module(
    name     = "Registration_intf",
    struct   = "registration_intf.ml",
    opts     = TEZOS_MOCKUP_REGISTRATION_OPTS,
    deps     = TEZOS_MOCKUP_REGISTRATION_DEPS + [
    ]
)

