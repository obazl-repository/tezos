load("@obazl_rules_ocaml//ocaml:rules.bzl", "ocaml_module", "ocaml_ns_library", "ocaml_signature")

ocaml_signature(
    name = "TzCore__sig",
    src = ":TzCore.mli",
    opts = [
        "-open",
        "Tezos_stdlib",
        "-open",
        "Data_encoding",
    ],
    deps = [
        ":core_maker",
        ":sig",
        "@data-encoding//:data-encoding",
        "@lwt//:lwt",
        "@lwt-canceler//:lwt-canceler",
        "@tezos//src/lib_lwt_result_stdlib:Tezos_lwt_result_stdlib",
        "@tezos//src/lib_stdlib:Tezos_stdlib",
    ],
)

ocaml_module(
    name = "TzCore",
    opts = [
        "-open",
        "Tezos_stdlib",
        "-open",
        "Data_encoding",
    ],
    sig = ":TzCore__sig",
    struct = ":TzCore.ml",
    deps = [
        ":core_maker",
        ":sig",
        "@data-encoding//:data-encoding",
        "@lwt//:lwt",
        "@lwt-canceler//:lwt-canceler",
        "@tezos//src/lib_lwt_result_stdlib:Tezos_lwt_result_stdlib",
        "@tezos//src/lib_stdlib:Tezos_stdlib",
    ],
)

ocaml_signature(
    name = "TzLwtreslib__sig",
    src = ":TzLwtreslib.mli",
    opts = [
        "-open",
        "Tezos_stdlib",
        "-open",
        "Data_encoding",
    ],
    deps = [
        ":TzTrace",
        "@data-encoding//:data-encoding",
        "@lwt//:lwt",
        "@lwt-canceler//:lwt-canceler",
        "@tezos//src/lib_lwt_result_stdlib:Tezos_lwt_result_stdlib",
        "@tezos//src/lib_stdlib:Tezos_stdlib",
    ],
)

ocaml_module(
    name = "TzLwtreslib",
    opts = [
        "-open",
        "Tezos_stdlib",
        "-open",
        "Data_encoding",
    ],
    sig = ":TzLwtreslib__sig",
    struct = ":TzLwtreslib.ml",
    deps = [
        ":TzTrace",
        "@data-encoding//:data-encoding",
        "@lwt//:lwt",
        "@lwt-canceler//:lwt-canceler",
        "@tezos//src/lib_lwt_result_stdlib:Tezos_lwt_result_stdlib",
        "@tezos//src/lib_stdlib:Tezos_stdlib",
    ],
)

ocaml_signature(
    name = "TzMonad__sig",
    src = ":TzMonad.mli",
    opts = [
        "-open",
        "Tezos_stdlib",
        "-open",
        "Data_encoding",
    ],
    deps = [
        ":TzCore",
        ":TzTrace",
        ":monad_ext_maker",
        ":monad_maker",
        ":sig",
        "@data-encoding//:data-encoding",
        "@lwt//:lwt",
        "@lwt-canceler//:lwt-canceler",
        "@tezos//src/lib_lwt_result_stdlib:Tezos_lwt_result_stdlib",
        "@tezos//src/lib_stdlib:Tezos_stdlib",
    ],
)

ocaml_module(
    name = "TzMonad",
    opts = [
        "-open",
        "Tezos_stdlib",
        "-open",
        "Data_encoding",
    ],
    sig = ":TzMonad__sig",
    struct = ":TzMonad.ml",
    deps = [
        ":TzCore",
        ":TzTrace",
        ":monad_ext_maker",
        ":monad_maker",
        ":sig",
        "@data-encoding//:data-encoding",
        "@lwt//:lwt",
        "@lwt-canceler//:lwt-canceler",
        "@tezos//src/lib_lwt_result_stdlib:Tezos_lwt_result_stdlib",
        "@tezos//src/lib_stdlib:Tezos_stdlib",
    ],
)

ocaml_signature(
    name = "TzTrace__sig",
    src = ":TzTrace.mli",
    opts = [
        "-open",
        "Tezos_stdlib",
        "-open",
        "Data_encoding",
    ],
    deps = [
        ":sig",
        "@data-encoding//:data-encoding",
        "@lwt//:lwt",
        "@lwt-canceler//:lwt-canceler",
        "@tezos//src/lib_lwt_result_stdlib:Tezos_lwt_result_stdlib",
        "@tezos//src/lib_stdlib:Tezos_stdlib",
    ],
)

ocaml_module(
    name = "TzTrace",
    opts = [
        "-open",
        "Tezos_stdlib",
        "-open",
        "Data_encoding",
    ],
    sig = ":TzTrace__sig",
    struct = ":TzTrace.ml",
    deps = [
        ":sig",
        "@data-encoding//:data-encoding",
        "@lwt//:lwt",
        "@lwt-canceler//:lwt-canceler",
        "@tezos//src/lib_lwt_result_stdlib:Tezos_lwt_result_stdlib",
        "@tezos//src/lib_stdlib:Tezos_stdlib",
    ],
)

ocaml_signature(
    name = "core_maker__sig",
    src = ":core_maker.mli",
    opts = [
        "-open",
        "Tezos_stdlib",
        "-open",
        "Data_encoding",
    ],
    deps = [
        ":sig",
        "@data-encoding//:data-encoding",
        "@lwt//:lwt",
        "@lwt-canceler//:lwt-canceler",
        "@tezos//src/lib_lwt_result_stdlib:Tezos_lwt_result_stdlib",
        "@tezos//src/lib_stdlib:Tezos_stdlib",
    ],
)

ocaml_module(
    name = "core_maker",
    opts = [
        "-open",
        "Tezos_stdlib",
        "-open",
        "Data_encoding",
    ],
    sig = ":core_maker__sig",
    struct = ":core_maker.ml",
    deps = [
        ":sig",
        "@data-encoding//:data-encoding",
        "@lwt//:lwt",
        "@lwt-canceler//:lwt-canceler",
        "@tezos//src/lib_lwt_result_stdlib:Tezos_lwt_result_stdlib",
        "@tezos//src/lib_stdlib:Tezos_stdlib",
    ],
)

ocaml_signature(
    name = "error_monad__sig",
    src = ":error_monad.mli",
    opts = [
        "-open",
        "Tezos_stdlib",
        "-open",
        "Data_encoding",
    ],
    deps = [
        ":TzCore",
        ":TzMonad",
        ":TzTrace",
        ":sig",
        "@data-encoding//:data-encoding",
        "@lwt//:lwt",
        "@lwt-canceler//:lwt-canceler",
        "@tezos//src/lib_lwt_result_stdlib:Tezos_lwt_result_stdlib",
        "@tezos//src/lib_stdlib:Tezos_stdlib",
    ],
)

ocaml_module(
    name = "error_monad",
    opts = [
        "-open",
        "Tezos_stdlib",
        "-open",
        "Data_encoding",
    ],
    sig = ":error_monad__sig",
    struct = ":error_monad.ml",
    deps = [
        ":TzCore",
        ":TzMonad",
        ":TzTrace",
        ":sig",
        "@data-encoding//:data-encoding",
        "@lwt//:lwt",
        "@lwt-canceler//:lwt-canceler",
        "@tezos//src/lib_lwt_result_stdlib:Tezos_lwt_result_stdlib",
        "@tezos//src/lib_stdlib:Tezos_stdlib",
    ],
)

ocaml_signature(
    name = "monad_ext_maker__sig",
    src = ":monad_ext_maker.mli",
    opts = [
        "-open",
        "Tezos_stdlib",
        "-open",
        "Data_encoding",
    ],
    deps = [
        ":sig",
        "@data-encoding//:data-encoding",
        "@lwt//:lwt",
        "@lwt-canceler//:lwt-canceler",
        "@tezos//src/lib_lwt_result_stdlib:Tezos_lwt_result_stdlib",
        "@tezos//src/lib_stdlib:Tezos_stdlib",
    ],
)

ocaml_module(
    name = "monad_ext_maker",
    opts = [
        "-open",
        "Tezos_stdlib",
        "-open",
        "Data_encoding",
    ],
    sig = ":monad_ext_maker__sig",
    struct = ":monad_ext_maker.ml",
    deps = [
        ":sig",
        "@data-encoding//:data-encoding",
        "@lwt//:lwt",
        "@lwt-canceler//:lwt-canceler",
        "@tezos//src/lib_lwt_result_stdlib:Tezos_lwt_result_stdlib",
        "@tezos//src/lib_stdlib:Tezos_stdlib",
    ],
)

ocaml_signature(
    name = "monad_maker__sig",
    src = ":monad_maker.mli",
    opts = [
        "-open",
        "Tezos_stdlib",
        "-open",
        "Data_encoding",
    ],
    deps = [
        ":sig",
        "@data-encoding//:data-encoding",
        "@lwt//:lwt",
        "@lwt-canceler//:lwt-canceler",
        "@tezos//src/lib_lwt_result_stdlib:Tezos_lwt_result_stdlib",
        "@tezos//src/lib_stdlib:Tezos_stdlib",
    ],
)

ocaml_module(
    name = "monad_maker",
    opts = [
        "-open",
        "Tezos_stdlib",
        "-open",
        "Data_encoding",
    ],
    sig = ":monad_maker__sig",
    struct = ":monad_maker.ml",
    deps = [
        ":sig",
        "@data-encoding//:data-encoding",
        "@lwt//:lwt",
        "@lwt-canceler//:lwt-canceler",
        "@tezos//src/lib_lwt_result_stdlib:Tezos_lwt_result_stdlib",
        "@tezos//src/lib_stdlib:Tezos_stdlib",
    ],
)

ocaml_module(
    name = "sig",
    opts = [
        "-open",
        "Tezos_stdlib",
        "-open",
        "Data_encoding",
    ],
    struct = ":sig.ml",
    deps = [
        "@data-encoding//:data-encoding",
        "@lwt//:lwt",
        "@lwt-canceler//:lwt-canceler",
        "@tezos//src/lib_lwt_result_stdlib:Tezos_lwt_result_stdlib",
        "@tezos//src/lib_stdlib:Tezos_stdlib",
    ],
)

# okapi:auto
# okapi:public_name tezos-error-monad
ocaml_ns_library(
    name = "Tezos_error_monad",
    submodules = [
        ":TzCore",
        ":TzLwtreslib",
        ":TzMonad",
        ":TzTrace",
        ":core_maker",
        ":error_monad",
        ":monad_ext_maker",
        ":monad_maker",
        ":sig",
    ],
    visibility = ["//visibility:public"],
)
