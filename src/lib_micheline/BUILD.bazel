load("@obazl_rules_ocaml//ocaml:rules.bzl",
     "ocaml_module",
     "ocaml_ns_library",
     "ocaml_signature",
     "ppx_executable")

ppx_executable(
    name = "ppx",
    deps = ["@ppx_inline_test//:ppx_inline_test"],
    main = "@ppx//driver",
)

ocaml_signature(
    name = "micheline__sig",
    src = ":micheline.mli",
    opts = [
        "-open",
        "Tezos_stdlib",
        "-open",
        "Tezos_error_monad",
        "-open",
        "Data_encoding",
    ],
    ppx = ":ppx",
    ppx_print = "@ppx//print:text",
    ppx_tags = ["inline-test"],
    deps = [
        "@data-encoding//:data-encoding",
        "@ppx_inline_test//:ppx_inline_test",
        "@uutf//:uutf",
        "@zarith//:zarith",
        "@tezos//src/lib_error_monad:Tezos_error_monad",
        "@tezos//src/lib_stdlib:Tezos_stdlib",
    ],
)

ocaml_module(
    name = "micheline",
    opts = [
        "-open",
        "Tezos_stdlib",
        "-open",
        "Tezos_error_monad",
        "-open",
        "Data_encoding",
    ],
    ppx = ":ppx",
    ppx_print = "@ppx//print:text",
    ppx_tags = ["inline-test"],
    sig = ":micheline__sig",
    struct = ":micheline.ml",
    deps = [
        "@data-encoding//:data-encoding",
        "@ppx_inline_test//:ppx_inline_test",
        "@uutf//:uutf",
        "@zarith//:zarith",
        "@tezos//src/lib_error_monad:Tezos_error_monad",
        "@tezos//src/lib_stdlib:Tezos_stdlib",
    ],
)

ocaml_signature(
    name = "micheline_parser__sig",
    src = ":micheline_parser.mli",
    opts = [
        "-open",
        "Tezos_stdlib",
        "-open",
        "Tezos_error_monad",
        "-open",
        "Data_encoding",
    ],
    ppx = ":ppx",
    ppx_print = "@ppx//print:text",
    ppx_tags = ["inline-test"],
    deps = [
        ":micheline",
        "@data-encoding//:data-encoding",
        "@ppx_inline_test//:ppx_inline_test",
        "@uutf//:uutf",
        "@zarith//:zarith",
        "@tezos//src/lib_error_monad:Tezos_error_monad",
        "@tezos//src/lib_stdlib:Tezos_stdlib",
    ],
)

ocaml_module(
    name = "micheline_parser",
    opts = [
        "-open",
        "Tezos_stdlib",
        "-open",
        "Tezos_error_monad",
        "-open",
        "Data_encoding",
    ],
    ppx = ":ppx",
    ppx_print = "@ppx//print:text",
    ppx_tags = ["inline-test"],
    sig = ":micheline_parser__sig",
    struct = ":micheline_parser.ml",
    deps = [
        ":micheline",
        "@data-encoding//:data-encoding",
        "@ppx_inline_test//:ppx_inline_test",
        "@uutf//:uutf",
        "@zarith//:zarith",
        "@tezos//src/lib_error_monad:Tezos_error_monad",
        "@tezos//src/lib_stdlib:Tezos_stdlib",
    ],
)

ocaml_signature(
    name = "micheline_printer__sig",
    src = ":micheline_printer.mli",
    opts = [
        "-open",
        "Tezos_stdlib",
        "-open",
        "Tezos_error_monad",
        "-open",
        "Data_encoding",
    ],
    ppx = ":ppx",
    ppx_print = "@ppx//print:text",
    ppx_tags = ["inline-test"],
    deps = [
        ":micheline",
        "@data-encoding//:data-encoding",
        "@ppx_inline_test//:ppx_inline_test",
        "@uutf//:uutf",
        "@zarith//:zarith",
        "@tezos//src/lib_error_monad:Tezos_error_monad",
        "@tezos//src/lib_stdlib:Tezos_stdlib",
    ],
)

ocaml_module(
    name = "micheline_printer",
    opts = [
        "-open",
        "Tezos_stdlib",
        "-open",
        "Tezos_error_monad",
        "-open",
        "Data_encoding",
    ],
    ppx = ":ppx",
    ppx_print = "@ppx//print:text",
    ppx_tags = ["inline-test"],
    sig = ":micheline_printer__sig",
    struct = ":micheline_printer.ml",
    deps = [
        ":micheline",
        "@data-encoding//:data-encoding",
        "@ppx_inline_test//:ppx_inline_test",
        "@uutf//:uutf",
        "@zarith//:zarith",
        "@tezos//src/lib_error_monad:Tezos_error_monad",
        "@tezos//src/lib_stdlib:Tezos_stdlib",
    ],
)

# okapi:auto
# okapi:public_name tezos-micheline
ocaml_ns_library(
    name = "Tezos_micheline",
    submodules = [
        ":micheline",
        ":micheline_parser",
        ":micheline_printer",
    ],
    visibility = ["//visibility:public"],
)
