load("@obazl_rules_ocaml//ocaml:rules.bzl", "ocaml_test")
load("@obazl_rules_ocaml//dsl:library.bzl", "lib", "mod", "sig")

lib(
    name = "crypto-test",
    ns = False,
    deps_opam = [
        "bls12-381-unix",
        "data-encoding",
        "hacl",
        "zarith",
        "alcotest",
        "alcotest-lwt",
        "crowbar",
    ],
    opts = [
        "-open",
        "Tezos_stdlib",
        "-open",
        "Tezos_crypto",
        "-open",
        "Tezos_error_monad.TzLwtreslib",
        "-open",
        "Data_encoding",
    ],
    modules = dict(
        key_encoding_vectors = mod(),
        roundtrips = mod(),
        test_base58 = mod(":roundtrips"),
        test_blake2b = mod(":roundtrips"),
        test_crypto_box = mod(),
        test_deterministic_nonce = mod(),
        test_ed25519 = mod(":roundtrips", ":key_encoding_vectors"),
        test_hacl = mod(":vectors_p256"),
        test_merkle = mod(),
        test_p256 = mod(":roundtrips", ":key_encoding_vectors"),
        test_prop_hacl_hash = mod(),
        test_prop_signature = mod(),
        test_prop_signature_pk = mod(),
        test_pvss = mod(),
        test_signature = mod(),
        test_timelock = mod(),
        vectors_p256 = mod(),
    ),
    deps = [
        # "@data-encoding//src:#Data_encoding",
        "//src/lib_error_monad:#Tezos_error_monad",
        "//src/lib_rpc:#Tezos_rpc",
        "//src/lib_stdlib:#Tezos_stdlib",
        "//src/lib_crypto:#Tezos_crypto",
    ],
    ppx_deps = True,
)

ocaml_test(
    name = "base58",
    main = "test_base58",
)

ocaml_test(
    name = "blake2b",
    main = "test_blake2b",
)

ocaml_test(
    name = "crypto_box",
    main = "test_crypto_box",
)

ocaml_test(
    name = "deterministic_nonce",
    main = "test_deterministic_nonce",
)

ocaml_test(
    name = "ed25519",
    main = "test_ed25519",
)

ocaml_test(
    name = "hacl",
    main = "test_hacl",
)

ocaml_test(
    name = "merkle",
    main = "test_merkle",
)

ocaml_test(
    name = "p256",
    main = "test_p256",
)

ocaml_test(
    name = "prop_hacl_hash",
    main = "test_prop_hacl_hash",
)

ocaml_test(
    name = "prop_signature",
    main = "test_prop_signature",
)

ocaml_test(
    name = "prop_signature_pk",
    main = "test_prop_signature_pk",
)

ocaml_test(
    name = "pvss",
    main = "test_pvss",
)

ocaml_test(
    name = "signature",
    main = "test_signature",
)

ocaml_test(
    name = "timelock",
    main = "test_timelock",
)
