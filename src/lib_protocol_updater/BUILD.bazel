load("@obazl_rules_ocaml//ocaml:rules.bzl",
    "ocaml_archive",
    "ocaml_module",
    "ocaml_ns_archive",
    "ocaml_signature",
)

###############################################
########### Archive/Library Targets ###########

######## tezos-protocol-updater ########
TEZOS_PROTOCOL_UPDATER_OPTS = [
    "-open", "Tezos_base__TzPervasives",
    "-open", "Tezos_context",
    "-open", "Tezos_micheline",
    "-open", "Tezos_shell_services",
    "-open", "Tezos_stdlib_unix",
]

TEZOS_PROTOCOL_UPDATER_DEPS = [
    "//src/lib_base:tezos-base",
    "//src/lib_context:tezos-context",
    "//src/lib_micheline:tezos-micheline",
    "//src/lib_protocol_compiler:tezos-protocol-compiler.native",
    "//src/lib_protocol_compiler:tezos-protocol-compiler.registerer",
    "//src/lib_protocol_environment:tezos-protocol-environment",
    "//src/lib_protocol_environment:tezos-shell-context",
    "//src/lib_shell_services:tezos-shell-services",
    "//src/lib_stdlib_unix:tezos-stdlib-unix",
    "@lwt-exit//:lwt-exit",
    "@ocaml//dynlink",
]

ocaml_ns_archive(
    name       = "tezos-protocol-updater",
    ns         = "Tezos_protocol_updater",
    visibility = ["//visibility:public"],
    submodules = [
        ":Registered_protocol",
        ":Updater",
        ":Updater_events",
    ],
)

#############################
####  Singleton Targets  ####

ocaml_module(
    name     = "Registered_protocol",
    struct   = "registered_protocol.ml",
    sig      = ":Registered_protocol_cmi",
    opts     = TEZOS_PROTOCOL_UPDATER_OPTS,
    deps     = TEZOS_PROTOCOL_UPDATER_DEPS + [
    ]
)

ocaml_signature(
    name     = "Registered_protocol_cmi",
    src      = "registered_protocol.mli",
    opts     = TEZOS_PROTOCOL_UPDATER_OPTS,
    deps     = TEZOS_PROTOCOL_UPDATER_DEPS + [
    ]
)

ocaml_module(
    name     = "Updater",
    struct   = "updater.ml",
    sig      = ":Updater_cmi",
    opts     = TEZOS_PROTOCOL_UPDATER_OPTS,
    deps     = TEZOS_PROTOCOL_UPDATER_DEPS + [
       ":Updater_events",
    ]
)

ocaml_signature(
    name     = "Updater_cmi",
    src      = "updater.mli",
    opts     = TEZOS_PROTOCOL_UPDATER_OPTS,
    deps     = TEZOS_PROTOCOL_UPDATER_DEPS + [
    ]
)

ocaml_module(
    name     = "Updater_events",
    struct   = "updater_events.ml",
    opts     = TEZOS_PROTOCOL_UPDATER_OPTS,
    deps     = TEZOS_PROTOCOL_UPDATER_DEPS + [
    ]
)

