load("@obazl_rules_ocaml//ocaml:rules.bzl",
    "ocaml_archive",
    "ocaml_module",
    "ocaml_ns_archive",
    "ocaml_signature",
)

###############################################
########### Archive/Library Targets ###########

######## tezos-micheline-rewriting ########
TEZOS_MICHELINE_REWRITING_OPTS = [
    "-open", "Tezos_error_monad",
    "-open", "Tezos_micheline",
    "-open", "Tezos_stdlib",
]

TEZOS_MICHELINE_REWRITING_DEPS = [
    "//src/lib_error_monad:tezos-error-monad",
    "//src/lib_micheline:tezos-micheline",
    "//src/lib_stdlib:tezos-stdlib",
    "@zarith//:zarith",
]

ocaml_ns_archive(
    name       = "tezos-micheline-rewriting",
    ns         = "Tezos_micheline_rewriting",
    visibility = ["//visibility:public"],
    submodules = [
        ":Custom_weak",
        ":Micheline_sig",
        ":Micheline_with_hash_consing",
        ":Micheline_without_hash_consing",
        ":Path",
        ":Pattern",
        ":Rewrite",
        ":Signature",
        ":Structural_compare",
    ],
)

#############################
####  Singleton Targets  ####

ocaml_module(
    name     = "Custom_weak",
    struct   = "custom_weak.ml",
    opts     = TEZOS_MICHELINE_REWRITING_OPTS,
    deps     = TEZOS_MICHELINE_REWRITING_DEPS + [
    ]
)

ocaml_module(
    name     = "Micheline_sig",
    struct   = "micheline_sig.ml",
    opts     = TEZOS_MICHELINE_REWRITING_OPTS,
    deps     = TEZOS_MICHELINE_REWRITING_DEPS + [
    ]
)

ocaml_module(
    name     = "Micheline_with_hash_consing",
    struct   = "micheline_with_hash_consing.ml",
    opts     = TEZOS_MICHELINE_REWRITING_OPTS,
    deps     = TEZOS_MICHELINE_REWRITING_DEPS + [
       ":Signature",
       ":Micheline_sig",
       ":Custom_weak",
    ]
)

ocaml_module(
    name     = "Micheline_without_hash_consing",
    struct   = "micheline_without_hash_consing.ml",
    opts     = TEZOS_MICHELINE_REWRITING_OPTS,
    deps     = TEZOS_MICHELINE_REWRITING_DEPS + [
       ":Signature",
       ":Micheline_sig",
    ]
)

ocaml_module(
    name     = "Path",
    struct   = "path.ml",
    opts     = TEZOS_MICHELINE_REWRITING_OPTS,
    deps     = TEZOS_MICHELINE_REWRITING_DEPS + [
    ]
)

ocaml_module(
    name     = "Pattern",
    struct   = "pattern.ml",
    sig      = ":Pattern_cmi",
    opts     = TEZOS_MICHELINE_REWRITING_OPTS,
    deps     = TEZOS_MICHELINE_REWRITING_DEPS + [
       ":Signature",
       ":Path",
       ":Micheline_with_hash_consing",
       ":Micheline_sig",
    ]
)

ocaml_signature(
    name     = "Pattern_cmi",
    src      = "pattern.mli",
    opts     = TEZOS_MICHELINE_REWRITING_OPTS,
    deps     = TEZOS_MICHELINE_REWRITING_DEPS + [
       ":Signature",
       ":Path",
       ":Micheline_with_hash_consing",
       ":Micheline_sig",
    ]
)

ocaml_module(
    name     = "Rewrite",
    struct   = "rewrite.ml",
    sig      = ":Rewrite_cmi",
    opts     = TEZOS_MICHELINE_REWRITING_OPTS,
    deps     = TEZOS_MICHELINE_REWRITING_DEPS + [
       ":Signature",
       ":Pattern",
       ":Path",
       ":Micheline_with_hash_consing",
       ":Micheline_sig",
    ]
)

ocaml_signature(
    name     = "Rewrite_cmi",
    src      = "rewrite.mli",
    opts     = TEZOS_MICHELINE_REWRITING_OPTS,
    deps     = TEZOS_MICHELINE_REWRITING_DEPS + [
       ":Signature",
       ":Pattern",
       ":Path",
       ":Micheline_with_hash_consing",
       ":Micheline_sig",
    ]
)

ocaml_module(
    name     = "Signature",
    struct   = "signature.ml",
    opts     = TEZOS_MICHELINE_REWRITING_OPTS,
    deps     = TEZOS_MICHELINE_REWRITING_DEPS + [
    ]
)

ocaml_module(
    name     = "Structural_compare",
    struct   = "structural_compare.ml",
    opts     = TEZOS_MICHELINE_REWRITING_OPTS,
    deps     = TEZOS_MICHELINE_REWRITING_DEPS + [
    ]
)

