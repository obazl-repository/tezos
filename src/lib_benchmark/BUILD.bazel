load("@obazl_rules_ocaml//ocaml:rules.bzl",
    "ocaml_archive",
    "ocaml_module",
    "ocaml_ns_archive",
    "ocaml_signature",
)

###############################################
########### Archive/Library Targets ###########

######## tezos-benchmark ########
TEZOS_BENCHMARK_OPTS = [
    "-open", "StaTz",
    "-open", "Tezos_base__TzPervasives",
    "-open", "Tezos_stdlib_unix",
]

TEZOS_BENCHMARK_DEPS = [
    "//src/lib_base:tezos-base",
    "//src/lib_clic:tezos-clic",
    "//src/lib_micheline:tezos-micheline",
    "//src/lib_stdlib_unix:tezos-stdlib-unix",
    "//vendors/benchmark-utils:benchmark-utils",
    "//vendors/pyml-plot/lib:pyml-plot",
    "//vendors/statz/lib:staTz",
    "@data-encoding//:data-encoding",
    "@ocaml-migrate-parsetree//:ocaml-migrate-parsetree",
]

ocaml_ns_archive(
    name       = "tezos-benchmark",
    ns         = "Tezos_benchmark",
    visibility = ["//visibility:public"],
    submodules = [
        ":Base_samplers",
        ":Benchmark",
        ":Benchmark_helpers",
        ":Builtin_benchmarks",
        ":Codegen",
        ":Costlang",
        ":Crypto_samplers",
        ":Csv",
        ":Fixed_point_transform",
        ":Free_variable",
        ":Generator",
        ":Inference",
        ":Measure",
        ":Model",
        ":Override",
        ":Pyinit",
        ":Registration",
        ":Scikit",
        ":Sparse_vec",
        ":Structure_samplers",
    ],
)

#############################
####  Singleton Targets  ####

ocaml_module(
    name     = "Base_samplers",
    struct   = "base_samplers.ml",
    sig      = ":Base_samplers_cmi",
    opts     = TEZOS_BENCHMARK_OPTS,
    deps     = TEZOS_BENCHMARK_DEPS + [
    ]
)

ocaml_signature(
    name     = "Base_samplers_cmi",
    src      = "base_samplers.mli",
    opts     = TEZOS_BENCHMARK_OPTS,
    deps     = TEZOS_BENCHMARK_DEPS + [
    ]
)

ocaml_module(
    name     = "Benchmark",
    struct   = "benchmark.ml",
    opts     = TEZOS_BENCHMARK_OPTS,
    deps     = TEZOS_BENCHMARK_DEPS + [
       ":Sparse_vec",
       ":Model",
       ":Generator",
    ]
)

ocaml_module(
    name     = "Benchmark_helpers",
    struct   = "benchmark_helpers.ml",
    opts     = TEZOS_BENCHMARK_OPTS,
    deps     = TEZOS_BENCHMARK_DEPS + [
    ]
)

ocaml_module(
    name     = "Builtin_benchmarks",
    struct   = "builtin_benchmarks.ml",
    opts     = TEZOS_BENCHMARK_OPTS,
    deps     = TEZOS_BENCHMARK_DEPS + [
       ":Sparse_vec",
       ":Registration",
       ":Model",
       ":Generator",
       ":Free_variable",
       ":Benchmark",
    ]
)

ocaml_module(
    name     = "Codegen",
    struct   = "codegen.ml",
    opts     = TEZOS_BENCHMARK_OPTS,
    deps     = TEZOS_BENCHMARK_DEPS + [
       ":Model",
       ":Free_variable",
       ":Fixed_point_transform",
       ":Costlang",
    ]
)

ocaml_module(
    name     = "Costlang",
    struct   = "costlang.ml",
    sig      = ":Costlang_cmi",
    opts     = TEZOS_BENCHMARK_OPTS,
    deps     = TEZOS_BENCHMARK_DEPS + [
       ":Free_variable",
    ]
)

ocaml_signature(
    name     = "Costlang_cmi",
    src      = "costlang.mli",
    opts     = TEZOS_BENCHMARK_OPTS,
    deps     = TEZOS_BENCHMARK_DEPS + [
       ":Free_variable",
    ]
)

ocaml_module(
    name     = "Crypto_samplers",
    struct   = "crypto_samplers.ml",
    sig      = ":Crypto_samplers_cmi",
    opts     = TEZOS_BENCHMARK_OPTS,
    deps     = TEZOS_BENCHMARK_DEPS + [
       ":Base_samplers",
    ]
)

ocaml_signature(
    name     = "Crypto_samplers_cmi",
    src      = "crypto_samplers.mli",
    opts     = TEZOS_BENCHMARK_OPTS,
    deps     = TEZOS_BENCHMARK_DEPS + [
       ":Base_samplers",
    ]
)

ocaml_module(
    name     = "Csv",
    struct   = "csv.ml",
    opts     = TEZOS_BENCHMARK_OPTS,
    deps     = TEZOS_BENCHMARK_DEPS + [
    ]
)

ocaml_module(
    name     = "Fixed_point_transform",
    struct   = "fixed_point_transform.ml",
    opts     = TEZOS_BENCHMARK_OPTS,
    deps     = TEZOS_BENCHMARK_DEPS + [
       ":Free_variable",
       ":Costlang",
    ]
)

ocaml_module(
    name     = "Free_variable",
    struct   = "free_variable.ml",
    sig      = ":Free_variable_cmi",
    opts     = TEZOS_BENCHMARK_OPTS,
    deps     = TEZOS_BENCHMARK_DEPS + [
       ":Sparse_vec",
    ]
)

ocaml_signature(
    name     = "Free_variable_cmi",
    src      = "free_variable.mli",
    opts     = TEZOS_BENCHMARK_OPTS,
    deps     = TEZOS_BENCHMARK_DEPS + [
       ":Sparse_vec",
    ]
)

ocaml_module(
    name     = "Generator",
    struct   = "generator.ml",
    opts     = TEZOS_BENCHMARK_OPTS,
    deps     = TEZOS_BENCHMARK_DEPS + [
    ]
)

ocaml_module(
    name     = "Inference",
    struct   = "inference.ml",
    opts     = TEZOS_BENCHMARK_OPTS,
    deps     = TEZOS_BENCHMARK_DEPS + [
       ":Scikit",
       ":Model",
       ":Measure",
       ":Free_variable",
       ":Csv",
       ":Costlang",
       ":Benchmark_helpers",
    ]
)

ocaml_module(
    name     = "Measure",
    struct   = "measure.ml",
    opts     = TEZOS_BENCHMARK_OPTS,
    deps     = TEZOS_BENCHMARK_DEPS + [
       ":Sparse_vec",
       ":Registration",
       ":Generator",
       ":Csv",
       ":Benchmark_helpers",
       ":Benchmark",
    ]
)

ocaml_module(
    name     = "Model",
    struct   = "model.ml",
    opts     = TEZOS_BENCHMARK_OPTS,
    deps     = TEZOS_BENCHMARK_DEPS + [
       ":Free_variable",
       ":Costlang",
    ]
)

ocaml_module(
    name     = "Override",
    struct   = "override.ml",
    opts     = TEZOS_BENCHMARK_OPTS,
    deps     = TEZOS_BENCHMARK_DEPS + [
       ":Free_variable",
       ":Csv",
    ]
)

ocaml_module(
    name     = "Pyinit",
    struct   = "pyinit.ml",
    opts     = TEZOS_BENCHMARK_OPTS,
    deps     = TEZOS_BENCHMARK_DEPS + [
    ]
)

ocaml_module(
    name     = "Registration",
    struct   = "registration.ml",
    opts     = TEZOS_BENCHMARK_OPTS,
    deps     = TEZOS_BENCHMARK_DEPS + [
       ":Model",
       ":Benchmark",
    ]
)

ocaml_module(
    name     = "Scikit",
    struct   = "scikit.ml",
    opts     = TEZOS_BENCHMARK_OPTS,
    deps     = TEZOS_BENCHMARK_DEPS + [
       ":Pyinit",
    ]
)

ocaml_module(
    name     = "Sparse_vec",
    struct   = "sparse_vec.ml",
    opts     = TEZOS_BENCHMARK_OPTS,
    deps     = TEZOS_BENCHMARK_DEPS + [
    ]
)

ocaml_module(
    name     = "Structure_samplers",
    struct   = "structure_samplers.ml",
    sig      = ":Structure_samplers_cmi",
    opts     = TEZOS_BENCHMARK_OPTS,
    deps     = TEZOS_BENCHMARK_DEPS + [
       ":Base_samplers",
    ]
)

ocaml_signature(
    name     = "Structure_samplers_cmi",
    src      = "structure_samplers.mli",
    opts     = TEZOS_BENCHMARK_OPTS,
    deps     = TEZOS_BENCHMARK_DEPS + [
       ":Base_samplers",
    ]
)

