load("@obazl_rules_ocaml//ocaml:rules.bzl",
    "ocaml_archive",
    "ocaml_module",
    "ocaml_ns_archive",
    "ocaml_signature",
)

###############################################
########### Archive/Library Targets ###########

######## tezos-signer-backends.unix ########
TEZOS_SIGNER_BACKENDS_UNIX_OPTS = [
    "-open", "Tezos_base__TzPervasives",
    "-open", "Tezos_client_base",
    "-open", "Tezos_rpc_http",
    "-open", "Tezos_rpc_http_client",
    "-open", "Tezos_rpc_http_client_unix",
    "-open", "Tezos_shell_services",
    "-open", "Tezos_signer_backends",
    "-open", "Tezos_signer_services",
    "-open", "Tezos_stdlib",
    "-open", "Tezos_stdlib_unix",
]

TEZOS_SIGNER_BACKENDS_UNIX_DEPS = [
    "//src/lib_base/unix:tezos-base.unix",
    "//src/lib_base:tezos-base",
    "//src/lib_rpc_http:tezos-rpc-http-client-unix",
    "//src/lib_signer_backends:tezos-signer-backends",
    "//src/lib_stdlib_unix:tezos-stdlib-unix",
    "@ocplib-endian//bigstring",
]

ocaml_ns_archive(
    name       = "tezos-signer-backends.unix",
    ns         = "Tezos_signer_backends_unix",
    visibility = ["//visibility:public"],
    submodules = [
        ":Ledger",
        ":Ledger.available",
        ":Ledger.none",
        ":Ledger_names",
        ":Remote",
        ":Socket",
    ],
)

#############################
####  Singleton Targets  ####

ocaml_module(
    name     = "Ledger.available",
    struct   = "ledger.available.ml",
    opts     = TEZOS_SIGNER_BACKENDS_UNIX_OPTS,
    deps     = TEZOS_SIGNER_BACKENDS_UNIX_DEPS + [
       ":Ledger_names",
    ]
)

ocaml_signature(
    name     = "Ledger_cmi",
    src      = "ledger.mli",
    opts     = TEZOS_SIGNER_BACKENDS_UNIX_OPTS,
    deps     = TEZOS_SIGNER_BACKENDS_UNIX_DEPS + [
    ]
)

ocaml_module(
    name     = "Ledger.none",
    struct   = "ledger.none.ml",
    opts     = TEZOS_SIGNER_BACKENDS_UNIX_OPTS,
    deps     = TEZOS_SIGNER_BACKENDS_UNIX_DEPS + [
    ]
)

ocaml_module(
    name     = "Ledger_names",
    struct   = "ledger_names.ml",
    sig      = ":Ledger_names_cmi",
    opts     = TEZOS_SIGNER_BACKENDS_UNIX_OPTS,
    deps     = TEZOS_SIGNER_BACKENDS_UNIX_DEPS + [
    ]
)

ocaml_signature(
    name     = "Ledger_names_cmi",
    src      = "ledger_names.mli",
    opts     = TEZOS_SIGNER_BACKENDS_UNIX_OPTS,
    deps     = TEZOS_SIGNER_BACKENDS_UNIX_DEPS + [
    ]
)

ocaml_module(
    name     = "Remote",
    struct   = "remote.ml",
    sig      = ":Remote_cmi",
    opts     = TEZOS_SIGNER_BACKENDS_UNIX_OPTS,
    deps     = TEZOS_SIGNER_BACKENDS_UNIX_DEPS + [
       ":Socket",
    ]
)

ocaml_signature(
    name     = "Remote_cmi",
    src      = "remote.mli",
    opts     = TEZOS_SIGNER_BACKENDS_UNIX_OPTS,
    deps     = TEZOS_SIGNER_BACKENDS_UNIX_DEPS + [
    ]
)

ocaml_module(
    name     = "Socket",
    struct   = "socket.ml",
    sig      = ":Socket_cmi",
    opts     = TEZOS_SIGNER_BACKENDS_UNIX_OPTS,
    deps     = TEZOS_SIGNER_BACKENDS_UNIX_DEPS + [
    ]
)

ocaml_signature(
    name     = "Socket_cmi",
    src      = "socket.mli",
    opts     = TEZOS_SIGNER_BACKENDS_UNIX_OPTS,
    deps     = TEZOS_SIGNER_BACKENDS_UNIX_DEPS + [
    ]
)

