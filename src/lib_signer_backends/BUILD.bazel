load("@obazl_rules_ocaml//ocaml:rules.bzl",
    "ocaml_archive",
    "ocaml_module",
    "ocaml_ns_archive",
    "ocaml_signature",
)

###############################################
########### Archive/Library Targets ###########

######## tezos-signer-backends ########
TEZOS_SIGNER_BACKENDS_OPTS = [
    "-open", "Tezos_base__TzPervasives",
    "-open", "Tezos_client_base",
    "-open", "Tezos_rpc_http",
    "-open", "Tezos_rpc_http_client",
    "-open", "Tezos_shell_services",
    "-open", "Tezos_signer_services",
    "-open", "Tezos_stdlib",
]

TEZOS_SIGNER_BACKENDS_DEPS = [
    "//src/lib_base:tezos-base",
    "//src/lib_client_base:tezos-client-base",
    "//src/lib_rpc_http:tezos-rpc-http-client",
    "//src/lib_shell_services:tezos-shell-services",
    "//src/lib_signer_services:tezos-signer-services",
    "//src/lib_stdlib:tezos-stdlib",
]

ocaml_ns_archive(
    name       = "tezos-signer-backends",
    ns         = "Tezos_signer_backends",
    visibility = ["//visibility:public"],
    submodules = [
        ":Encrypted",
        ":Http",
        ":Http_gen",
        ":Https",
        ":Signer_events",
        ":Unencrypted",
    ],
)

#############################
####  Singleton Targets  ####

ocaml_module(
    name     = "Encrypted",
    struct   = "encrypted.ml",
    sig      = ":Encrypted_cmi",
    opts     = TEZOS_SIGNER_BACKENDS_OPTS,
    deps     = TEZOS_SIGNER_BACKENDS_DEPS + [
       ":Unencrypted",
    ]
)

ocaml_signature(
    name     = "Encrypted_cmi",
    src      = "encrypted.mli",
    opts     = TEZOS_SIGNER_BACKENDS_OPTS,
    deps     = TEZOS_SIGNER_BACKENDS_DEPS + [
    ]
)

ocaml_module(
    name     = "Http",
    struct   = "http.ml",
    sig      = ":Http_cmi",
    opts     = TEZOS_SIGNER_BACKENDS_OPTS,
    deps     = TEZOS_SIGNER_BACKENDS_DEPS + [
       ":Http_gen",
    ]
)

ocaml_signature(
    name     = "Http_cmi",
    src      = "http.mli",
    opts     = TEZOS_SIGNER_BACKENDS_OPTS,
    deps     = TEZOS_SIGNER_BACKENDS_DEPS + [
    ]
)

ocaml_module(
    name     = "Http_gen",
    struct   = "http_gen.ml",
    sig      = ":Http_gen_cmi",
    opts     = TEZOS_SIGNER_BACKENDS_OPTS,
    deps     = TEZOS_SIGNER_BACKENDS_DEPS + [
    ]
)

ocaml_signature(
    name     = "Http_gen_cmi",
    src      = "http_gen.mli",
    opts     = TEZOS_SIGNER_BACKENDS_OPTS,
    deps     = TEZOS_SIGNER_BACKENDS_DEPS + [
    ]
)

ocaml_module(
    name     = "Https",
    struct   = "https.ml",
    sig      = ":Https_cmi",
    opts     = TEZOS_SIGNER_BACKENDS_OPTS,
    deps     = TEZOS_SIGNER_BACKENDS_DEPS + [
       ":Http_gen",
    ]
)

ocaml_signature(
    name     = "Https_cmi",
    src      = "https.mli",
    opts     = TEZOS_SIGNER_BACKENDS_OPTS,
    deps     = TEZOS_SIGNER_BACKENDS_DEPS + [
    ]
)

ocaml_module(
    name     = "Signer_events",
    struct   = "signer_events.ml",
    opts     = TEZOS_SIGNER_BACKENDS_OPTS,
    deps     = TEZOS_SIGNER_BACKENDS_DEPS + [
    ]
)

ocaml_module(
    name     = "Unencrypted",
    struct   = "unencrypted.ml",
    sig      = ":Unencrypted_cmi",
    opts     = TEZOS_SIGNER_BACKENDS_OPTS,
    deps     = TEZOS_SIGNER_BACKENDS_DEPS + [
    ]
)

ocaml_signature(
    name     = "Unencrypted_cmi",
    src      = "unencrypted.mli",
    opts     = TEZOS_SIGNER_BACKENDS_OPTS,
    deps     = TEZOS_SIGNER_BACKENDS_DEPS + [
    ]
)

