load("@obazl_rules_ocaml//ocaml:rules.bzl", "ocaml_module", "ocaml_ns_library", "ocaml_signature")

ocaml_signature(
    name = "peer_validator_worker_state_sig",
    src = ":peer_validator_worker_state.mli",
    opts = [
        "-linkall",
        "-open",
        "Tezos_base__TzPervasives",
        "-open",
        "Tezos_base",
        "-open",
        "Tezos_p2p_services",
        "-open",
        "Tezos_version",
    ],
    deps = [
        "@tezos//src/lib_base:#Tezos_base",
        "@tezos//src/lib_p2p_services:#Tezos_p2p_services",
        "@tezos//src/lib_version:#Tezos_version",
    ],
)

ocaml_module(
    name = "peer_validator_worker_state",
    opts = [
        "-linkall",
        "-open",
        "Tezos_base__TzPervasives",
        "-open",
        "Tezos_base",
        "-open",
        "Tezos_p2p_services",
        "-open",
        "Tezos_version",
    ],
    sig = ":peer_validator_worker_state_sig",
    struct = ":peer_validator_worker_state.ml",
    deps = [
        "@tezos//src/lib_base:#Tezos_base",
        "@tezos//src/lib_p2p_services:#Tezos_p2p_services",
        "@tezos//src/lib_version:#Tezos_version",
    ],
)

ocaml_signature(
    name = "chain_validator_worker_state_sig",
    src = ":chain_validator_worker_state.mli",
    opts = [
        "-linkall",
        "-open",
        "Tezos_base__TzPervasives",
        "-open",
        "Tezos_base",
        "-open",
        "Tezos_p2p_services",
        "-open",
        "Tezos_version",
    ],
    deps = [
        "@tezos//src/lib_base:#Tezos_base",
        "@tezos//src/lib_p2p_services:#Tezos_p2p_services",
        "@tezos//src/lib_version:#Tezos_version",
    ],
)

ocaml_module(
    name = "chain_validator_worker_state",
    opts = [
        "-linkall",
        "-open",
        "Tezos_base__TzPervasives",
        "-open",
        "Tezos_base",
        "-open",
        "Tezos_p2p_services",
        "-open",
        "Tezos_version",
    ],
    sig = ":chain_validator_worker_state_sig",
    struct = ":chain_validator_worker_state.ml",
    deps = [
        "@tezos//src/lib_base:#Tezos_base",
        "@tezos//src/lib_p2p_services:#Tezos_p2p_services",
        "@tezos//src/lib_version:#Tezos_version",
    ],
)

ocaml_signature(
    name = "validation_errors_sig",
    src = ":validation_errors.mli",
    opts = [
        "-linkall",
        "-open",
        "Tezos_base__TzPervasives",
        "-open",
        "Tezos_base",
        "-open",
        "Tezos_p2p_services",
        "-open",
        "Tezos_version",
    ],
    deps = [
        "@tezos//src/lib_base:#Tezos_base",
        "@tezos//src/lib_p2p_services:#Tezos_p2p_services",
        "@tezos//src/lib_version:#Tezos_version",
    ],
)

ocaml_module(
    name = "validation_errors",
    opts = [
        "-linkall",
        "-open",
        "Tezos_base__TzPervasives",
        "-open",
        "Tezos_base",
        "-open",
        "Tezos_p2p_services",
        "-open",
        "Tezos_version",
    ],
    sig = ":validation_errors_sig",
    struct = ":validation_errors.ml",
    deps = [
        "@tezos//src/lib_base:#Tezos_base",
        "@tezos//src/lib_p2p_services:#Tezos_p2p_services",
        "@tezos//src/lib_version:#Tezos_version",
    ],
)

ocaml_signature(
    name = "version_services_sig",
    src = ":version_services.mli",
    opts = [
        "-linkall",
        "-open",
        "Tezos_base__TzPervasives",
        "-open",
        "Tezos_base",
        "-open",
        "Tezos_p2p_services",
        "-open",
        "Tezos_version",
    ],
    deps = [
        "@tezos//src/lib_base:#Tezos_base",
        "@tezos//src/lib_p2p_services:#Tezos_p2p_services",
        "@tezos//src/lib_version:#Tezos_version",
    ],
)

ocaml_module(
    name = "version_services",
    opts = [
        "-linkall",
        "-open",
        "Tezos_base__TzPervasives",
        "-open",
        "Tezos_base",
        "-open",
        "Tezos_p2p_services",
        "-open",
        "Tezos_version",
    ],
    sig = ":version_services_sig",
    struct = ":version_services.ml",
    deps = [
        "@tezos//src/lib_base:#Tezos_base",
        "@tezos//src/lib_p2p_services:#Tezos_p2p_services",
        "@tezos//src/lib_version:#Tezos_version",
    ],
)

ocaml_signature(
    name = "history_mode_sig",
    src = ":history_mode.mli",
    opts = [
        "-linkall",
        "-open",
        "Tezos_base__TzPervasives",
        "-open",
        "Tezos_base",
        "-open",
        "Tezos_p2p_services",
        "-open",
        "Tezos_version",
    ],
    deps = [
        "@tezos//src/lib_base:#Tezos_base",
        "@tezos//src/lib_p2p_services:#Tezos_p2p_services",
        "@tezos//src/lib_version:#Tezos_version",
    ],
)

ocaml_module(
    name = "history_mode",
    opts = [
        "-linkall",
        "-open",
        "Tezos_base__TzPervasives",
        "-open",
        "Tezos_base",
        "-open",
        "Tezos_p2p_services",
        "-open",
        "Tezos_version",
    ],
    sig = ":history_mode_sig",
    struct = ":history_mode.ml",
    deps = [
        "@tezos//src/lib_base:#Tezos_base",
        "@tezos//src/lib_p2p_services:#Tezos_p2p_services",
        "@tezos//src/lib_version:#Tezos_version",
    ],
)

ocaml_signature(
    name = "prevalidator_worker_state_sig",
    src = ":prevalidator_worker_state.mli",
    opts = [
        "-linkall",
        "-open",
        "Tezos_base__TzPervasives",
        "-open",
        "Tezos_base",
        "-open",
        "Tezos_p2p_services",
        "-open",
        "Tezos_version",
    ],
    deps = [
        "@tezos//src/lib_base:#Tezos_base",
        "@tezos//src/lib_p2p_services:#Tezos_p2p_services",
        "@tezos//src/lib_version:#Tezos_version",
    ],
)

ocaml_module(
    name = "prevalidator_worker_state",
    opts = [
        "-linkall",
        "-open",
        "Tezos_base__TzPervasives",
        "-open",
        "Tezos_base",
        "-open",
        "Tezos_p2p_services",
        "-open",
        "Tezos_version",
    ],
    sig = ":prevalidator_worker_state_sig",
    struct = ":prevalidator_worker_state.ml",
    deps = [
        "@tezos//src/lib_base:#Tezos_base",
        "@tezos//src/lib_p2p_services:#Tezos_p2p_services",
        "@tezos//src/lib_version:#Tezos_version",
    ],
)

ocaml_signature(
    name = "monitor_services_sig",
    src = ":monitor_services.mli",
    opts = [
        "-linkall",
        "-open",
        "Tezos_base__TzPervasives",
        "-open",
        "Tezos_base",
        "-open",
        "Tezos_p2p_services",
        "-open",
        "Tezos_version",
    ],
    deps = [
        ":chain_services",
        "@tezos//src/lib_base:#Tezos_base",
        "@tezos//src/lib_p2p_services:#Tezos_p2p_services",
        "@tezos//src/lib_version:#Tezos_version",
    ],
)

ocaml_module(
    name = "monitor_services",
    opts = [
        "-linkall",
        "-open",
        "Tezos_base__TzPervasives",
        "-open",
        "Tezos_base",
        "-open",
        "Tezos_p2p_services",
        "-open",
        "Tezos_version",
    ],
    sig = ":monitor_services_sig",
    struct = ":monitor_services.ml",
    deps = [
        ":chain_services",
        "@tezos//src/lib_base:#Tezos_base",
        "@tezos//src/lib_p2p_services:#Tezos_p2p_services",
        "@tezos//src/lib_version:#Tezos_version",
    ],
)

ocaml_signature(
    name = "protocol_services_sig",
    src = ":protocol_services.mli",
    opts = [
        "-linkall",
        "-open",
        "Tezos_base__TzPervasives",
        "-open",
        "Tezos_base",
        "-open",
        "Tezos_p2p_services",
        "-open",
        "Tezos_version",
    ],
    deps = [
        "@tezos//src/lib_base:#Tezos_base",
        "@tezos//src/lib_p2p_services:#Tezos_p2p_services",
        "@tezos//src/lib_version:#Tezos_version",
    ],
)

ocaml_module(
    name = "protocol_services",
    opts = [
        "-linkall",
        "-open",
        "Tezos_base__TzPervasives",
        "-open",
        "Tezos_base",
        "-open",
        "Tezos_p2p_services",
        "-open",
        "Tezos_version",
    ],
    sig = ":protocol_services_sig",
    struct = ":protocol_services.ml",
    deps = [
        "@tezos//src/lib_base:#Tezos_base",
        "@tezos//src/lib_p2p_services:#Tezos_p2p_services",
        "@tezos//src/lib_version:#Tezos_version",
    ],
)

ocaml_signature(
    name = "stat_services_sig",
    src = ":stat_services.mli",
    opts = [
        "-linkall",
        "-open",
        "Tezos_base__TzPervasives",
        "-open",
        "Tezos_base",
        "-open",
        "Tezos_p2p_services",
        "-open",
        "Tezos_version",
    ],
    deps = [
        "@tezos//src/lib_base:#Tezos_base",
        "@tezos//src/lib_p2p_services:#Tezos_p2p_services",
        "@tezos//src/lib_version:#Tezos_version",
    ],
)

ocaml_module(
    name = "stat_services",
    opts = [
        "-linkall",
        "-open",
        "Tezos_base__TzPervasives",
        "-open",
        "Tezos_base",
        "-open",
        "Tezos_p2p_services",
        "-open",
        "Tezos_version",
    ],
    sig = ":stat_services_sig",
    struct = ":stat_services.ml",
    deps = [
        "@tezos//src/lib_base:#Tezos_base",
        "@tezos//src/lib_p2p_services:#Tezos_p2p_services",
        "@tezos//src/lib_version:#Tezos_version",
    ],
)

ocaml_module(
    name = "state_events",
    opts = [
        "-linkall",
        "-open",
        "Tezos_base__TzPervasives",
        "-open",
        "Tezos_base",
        "-open",
        "Tezos_p2p_services",
        "-open",
        "Tezos_version",
    ],
    struct = ":state_events.ml",
    deps = [
        "@tezos//src/lib_base:#Tezos_base",
        "@tezos//src/lib_p2p_services:#Tezos_p2p_services",
        "@tezos//src/lib_version:#Tezos_version",
    ],
)

ocaml_signature(
    name = "block_validator_worker_state_sig",
    src = ":block_validator_worker_state.mli",
    opts = [
        "-linkall",
        "-open",
        "Tezos_base__TzPervasives",
        "-open",
        "Tezos_base",
        "-open",
        "Tezos_p2p_services",
        "-open",
        "Tezos_version",
    ],
    deps = [
        "@tezos//src/lib_base:#Tezos_base",
        "@tezos//src/lib_p2p_services:#Tezos_p2p_services",
        "@tezos//src/lib_version:#Tezos_version",
    ],
)

ocaml_module(
    name = "block_validator_worker_state",
    opts = [
        "-linkall",
        "-open",
        "Tezos_base__TzPervasives",
        "-open",
        "Tezos_base",
        "-open",
        "Tezos_p2p_services",
        "-open",
        "Tezos_version",
    ],
    sig = ":block_validator_worker_state_sig",
    struct = ":block_validator_worker_state.ml",
    deps = [
        "@tezos//src/lib_base:#Tezos_base",
        "@tezos//src/lib_p2p_services:#Tezos_p2p_services",
        "@tezos//src/lib_version:#Tezos_version",
    ],
)

ocaml_signature(
    name = "injection_services_sig",
    src = ":injection_services.mli",
    opts = [
        "-linkall",
        "-open",
        "Tezos_base__TzPervasives",
        "-open",
        "Tezos_base",
        "-open",
        "Tezos_p2p_services",
        "-open",
        "Tezos_version",
    ],
    deps = [
        ":chain_services",
        "@tezos//src/lib_base:#Tezos_base",
        "@tezos//src/lib_p2p_services:#Tezos_p2p_services",
        "@tezos//src/lib_version:#Tezos_version",
    ],
)

ocaml_module(
    name = "injection_services",
    opts = [
        "-linkall",
        "-open",
        "Tezos_base__TzPervasives",
        "-open",
        "Tezos_base",
        "-open",
        "Tezos_p2p_services",
        "-open",
        "Tezos_version",
    ],
    sig = ":injection_services_sig",
    struct = ":injection_services.ml",
    deps = [
        ":chain_services",
        "@tezos//src/lib_base:#Tezos_base",
        "@tezos//src/lib_p2p_services:#Tezos_p2p_services",
        "@tezos//src/lib_version:#Tezos_version",
    ],
)

ocaml_signature(
    name = "worker_services_sig",
    src = ":worker_services.mli",
    opts = [
        "-linkall",
        "-open",
        "Tezos_base__TzPervasives",
        "-open",
        "Tezos_base",
        "-open",
        "Tezos_p2p_services",
        "-open",
        "Tezos_version",
    ],
    deps = [
        ":block_validator_worker_state",
        ":chain_services",
        ":chain_validator_worker_state",
        ":peer_validator_worker_state",
        ":prevalidator_worker_state",
        "@tezos//src/lib_base:#Tezos_base",
        "@tezos//src/lib_p2p_services:#Tezos_p2p_services",
        "@tezos//src/lib_version:#Tezos_version",
    ],
)

ocaml_module(
    name = "worker_services",
    opts = [
        "-linkall",
        "-open",
        "Tezos_base__TzPervasives",
        "-open",
        "Tezos_base",
        "-open",
        "Tezos_p2p_services",
        "-open",
        "Tezos_version",
    ],
    sig = ":worker_services_sig",
    struct = ":worker_services.ml",
    deps = [
        ":block_validator_worker_state",
        ":chain_services",
        ":chain_validator_worker_state",
        ":peer_validator_worker_state",
        ":prevalidator_worker_state",
        "@tezos//src/lib_base:#Tezos_base",
        "@tezos//src/lib_p2p_services:#Tezos_p2p_services",
        "@tezos//src/lib_version:#Tezos_version",
    ],
)

ocaml_signature(
    name = "config_services_sig",
    src = ":config_services.mli",
    opts = [
        "-linkall",
        "-open",
        "Tezos_base__TzPervasives",
        "-open",
        "Tezos_base",
        "-open",
        "Tezos_p2p_services",
        "-open",
        "Tezos_version",
    ],
    deps = [
        "@tezos//src/lib_base:#Tezos_base",
        "@tezos//src/lib_p2p_services:#Tezos_p2p_services",
        "@tezos//src/lib_version:#Tezos_version",
    ],
)

ocaml_module(
    name = "config_services",
    opts = [
        "-linkall",
        "-open",
        "Tezos_base__TzPervasives",
        "-open",
        "Tezos_base",
        "-open",
        "Tezos_p2p_services",
        "-open",
        "Tezos_version",
    ],
    sig = ":config_services_sig",
    struct = ":config_services.ml",
    deps = [
        "@tezos//src/lib_base:#Tezos_base",
        "@tezos//src/lib_p2p_services:#Tezos_p2p_services",
        "@tezos//src/lib_version:#Tezos_version",
    ],
)

ocaml_signature(
    name = "chain_services_sig",
    src = ":chain_services.mli",
    opts = [
        "-linkall",
        "-open",
        "Tezos_base__TzPervasives",
        "-open",
        "Tezos_base",
        "-open",
        "Tezos_p2p_services",
        "-open",
        "Tezos_version",
    ],
    deps = [
        ":block_services",
        ":chain_validator_worker_state",
        ":history_mode",
        "@tezos//src/lib_base:#Tezos_base",
        "@tezos//src/lib_p2p_services:#Tezos_p2p_services",
        "@tezos//src/lib_version:#Tezos_version",
    ],
)

ocaml_module(
    name = "chain_services",
    opts = [
        "-linkall",
        "-open",
        "Tezos_base__TzPervasives",
        "-open",
        "Tezos_base",
        "-open",
        "Tezos_p2p_services",
        "-open",
        "Tezos_version",
    ],
    sig = ":chain_services_sig",
    struct = ":chain_services.ml",
    deps = [
        ":block_services",
        ":chain_validator_worker_state",
        ":history_mode",
        "@tezos//src/lib_base:#Tezos_base",
        "@tezos//src/lib_p2p_services:#Tezos_p2p_services",
        "@tezos//src/lib_version:#Tezos_version",
    ],
)

ocaml_module(
    name = "store_errors",
    opts = [
        "-linkall",
        "-open",
        "Tezos_base__TzPervasives",
        "-open",
        "Tezos_base",
        "-open",
        "Tezos_p2p_services",
        "-open",
        "Tezos_version",
    ],
    struct = ":store_errors.ml",
    deps = [
        ":history_mode",
        "@tezos//src/lib_base:#Tezos_base",
        "@tezos//src/lib_p2p_services:#Tezos_p2p_services",
        "@tezos//src/lib_version:#Tezos_version",
    ],
)

ocaml_signature(
    name = "block_services_sig",
    src = ":block_services.mli",
    opts = [
        "-linkall",
        "-open",
        "Tezos_base__TzPervasives",
        "-open",
        "Tezos_base",
        "-open",
        "Tezos_p2p_services",
        "-open",
        "Tezos_version",
    ],
    deps = [
        "@tezos//src/lib_base:#Tezos_base",
        "@tezos//src/lib_p2p_services:#Tezos_p2p_services",
        "@tezos//src/lib_version:#Tezos_version",
    ],
)

ocaml_module(
    name = "block_services",
    opts = [
        "-linkall",
        "-open",
        "Tezos_base__TzPervasives",
        "-open",
        "Tezos_base",
        "-open",
        "Tezos_p2p_services",
        "-open",
        "Tezos_version",
    ],
    sig = ":block_services_sig",
    struct = ":block_services.ml",
    deps = [
        "@tezos//src/lib_base:#Tezos_base",
        "@tezos//src/lib_p2p_services:#Tezos_p2p_services",
        "@tezos//src/lib_version:#Tezos_version",
    ],
)

ocaml_signature(
    name = "shell_services_sig",
    src = ":shell_services.mli",
    opts = [
        "-linkall",
        "-open",
        "Tezos_base__TzPervasives",
        "-open",
        "Tezos_base",
        "-open",
        "Tezos_p2p_services",
        "-open",
        "Tezos_version",
    ],
    deps = [
        ":block_services",
        ":chain_services",
        ":config_services",
        ":injection_services",
        ":monitor_services",
        ":protocol_services",
        ":worker_services",
        "@tezos//src/lib_base:#Tezos_base",
        "@tezos//src/lib_p2p_services:#Tezos_p2p_services",
        "@tezos//src/lib_version:#Tezos_version",
    ],
)

ocaml_module(
    name = "shell_services",
    opts = [
        "-linkall",
        "-open",
        "Tezos_base__TzPervasives",
        "-open",
        "Tezos_base",
        "-open",
        "Tezos_p2p_services",
        "-open",
        "Tezos_version",
    ],
    sig = ":shell_services_sig",
    struct = ":shell_services.ml",
    deps = [
        ":block_services",
        ":chain_services",
        ":config_services",
        ":injection_services",
        ":monitor_services",
        ":protocol_services",
        ":worker_services",
        "@tezos//src/lib_base:#Tezos_base",
        "@tezos//src/lib_p2p_services:#Tezos_p2p_services",
        "@tezos//src/lib_version:#Tezos_version",
    ],
)

ocaml_signature(
    name = "block_validator_errors_sig",
    src = ":block_validator_errors.mli",
    opts = [
        "-linkall",
        "-open",
        "Tezos_base__TzPervasives",
        "-open",
        "Tezos_base",
        "-open",
        "Tezos_p2p_services",
        "-open",
        "Tezos_version",
    ],
    deps = [
        "@tezos//src/lib_base:#Tezos_base",
        "@tezos//src/lib_p2p_services:#Tezos_p2p_services",
        "@tezos//src/lib_version:#Tezos_version",
    ],
)

ocaml_module(
    name = "block_validator_errors",
    opts = [
        "-linkall",
        "-open",
        "Tezos_base__TzPervasives",
        "-open",
        "Tezos_base",
        "-open",
        "Tezos_p2p_services",
        "-open",
        "Tezos_version",
    ],
    sig = ":block_validator_errors_sig",
    struct = ":block_validator_errors.ml",
    deps = [
        "@tezos//src/lib_base:#Tezos_base",
        "@tezos//src/lib_p2p_services:#Tezos_p2p_services",
        "@tezos//src/lib_version:#Tezos_version",
    ],
)

# okapi:auto
ocaml_ns_library(
    name = "#Tezos_shell_services",
    submodules = [
        ":block_services",
        ":block_validator_errors",
        ":block_validator_worker_state",
        ":chain_services",
        ":chain_validator_worker_state",
        ":config_services",
        ":history_mode",
        ":injection_services",
        ":monitor_services",
        ":peer_validator_worker_state",
        ":prevalidator_worker_state",
        ":protocol_services",
        ":shell_services",
        ":stat_services",
        ":state_events",
        ":store_errors",
        ":validation_errors",
        ":version_services",
        ":worker_services",
    ],
    visibility = ["//visibility:public"],
)
