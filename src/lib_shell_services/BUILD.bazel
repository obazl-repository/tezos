load("@obazl_rules_ocaml//ocaml:rules.bzl",
    "ocaml_archive",
    "ocaml_module",
    "ocaml_ns_archive",
    "ocaml_signature",
)

###############################################
########### Archive/Library Targets ###########

######## tezos-shell-services ########
TEZOS_SHELL_SERVICES_OPTS = [
    "-linkall",
    "-open", "Tezos_base",
    "-open", "Tezos_base__TzPervasives",
    "-open", "Tezos_p2p_services",
    "-open", "Tezos_version",
]

TEZOS_SHELL_SERVICES_DEPS = [
    "//src/lib_base:tezos-base",
    "//src/lib_p2p_services:tezos-p2p-services",
    "//src/lib_version:tezos-version",
]

ocaml_ns_archive(
    name       = "tezos-shell-services",
    ns         = "Tezos_shell_services",
    visibility = ["//visibility:public"],
    submodules = [
        ":Block_services",
        ":Block_validator_errors",
        ":Block_validator_worker_state",
        ":Chain_services",
        ":Chain_validator_worker_state",
        ":Config_services",
        ":History_mode",
        ":Injection_services",
        ":Monitor_services",
        ":Peer_validator_worker_state",
        ":Prevalidator_worker_state",
        ":Protocol_services",
        ":Shell_services",
        ":Stat_services",
        ":State_events",
        ":Store_errors",
        ":Validation_errors",
        ":Version_services",
        ":Worker_services",
    ],
)

#############################
####  Singleton Targets  ####

ocaml_module(
    name     = "Block_services",
    struct   = "block_services.ml",
    sig      = ":Block_services_cmi",
    opts     = TEZOS_SHELL_SERVICES_OPTS,
    deps     = TEZOS_SHELL_SERVICES_DEPS + [
    ]
)

ocaml_signature(
    name     = "Block_services_cmi",
    src      = "block_services.mli",
    opts     = TEZOS_SHELL_SERVICES_OPTS,
    deps     = TEZOS_SHELL_SERVICES_DEPS + [
    ]
)

ocaml_module(
    name     = "Block_validator_errors",
    struct   = "block_validator_errors.ml",
    sig      = ":Block_validator_errors_cmi",
    opts     = TEZOS_SHELL_SERVICES_OPTS,
    deps     = TEZOS_SHELL_SERVICES_DEPS + [
    ]
)

ocaml_signature(
    name     = "Block_validator_errors_cmi",
    src      = "block_validator_errors.mli",
    opts     = TEZOS_SHELL_SERVICES_OPTS,
    deps     = TEZOS_SHELL_SERVICES_DEPS + [
    ]
)

ocaml_module(
    name     = "Block_validator_worker_state",
    struct   = "block_validator_worker_state.ml",
    sig      = ":Block_validator_worker_state_cmi",
    opts     = TEZOS_SHELL_SERVICES_OPTS,
    deps     = TEZOS_SHELL_SERVICES_DEPS + [
    ]
)

ocaml_signature(
    name     = "Block_validator_worker_state_cmi",
    src      = "block_validator_worker_state.mli",
    opts     = TEZOS_SHELL_SERVICES_OPTS,
    deps     = TEZOS_SHELL_SERVICES_DEPS + [
    ]
)

ocaml_module(
    name     = "Chain_services",
    struct   = "chain_services.ml",
    sig      = ":Chain_services_cmi",
    opts     = TEZOS_SHELL_SERVICES_OPTS,
    deps     = TEZOS_SHELL_SERVICES_DEPS + [
       ":History_mode",
       ":Chain_validator_worker_state",
       ":Block_services",
    ]
)

ocaml_signature(
    name     = "Chain_services_cmi",
    src      = "chain_services.mli",
    opts     = TEZOS_SHELL_SERVICES_OPTS,
    deps     = TEZOS_SHELL_SERVICES_DEPS + [
       ":History_mode",
       ":Chain_validator_worker_state",
       ":Block_services",
    ]
)

ocaml_module(
    name     = "Chain_validator_worker_state",
    struct   = "chain_validator_worker_state.ml",
    sig      = ":Chain_validator_worker_state_cmi",
    opts     = TEZOS_SHELL_SERVICES_OPTS,
    deps     = TEZOS_SHELL_SERVICES_DEPS + [
    ]
)

ocaml_signature(
    name     = "Chain_validator_worker_state_cmi",
    src      = "chain_validator_worker_state.mli",
    opts     = TEZOS_SHELL_SERVICES_OPTS,
    deps     = TEZOS_SHELL_SERVICES_DEPS + [
    ]
)

ocaml_module(
    name     = "Config_services",
    struct   = "config_services.ml",
    sig      = ":Config_services_cmi",
    opts     = TEZOS_SHELL_SERVICES_OPTS,
    deps     = TEZOS_SHELL_SERVICES_DEPS + [
    ]
)

ocaml_signature(
    name     = "Config_services_cmi",
    src      = "config_services.mli",
    opts     = TEZOS_SHELL_SERVICES_OPTS,
    deps     = TEZOS_SHELL_SERVICES_DEPS + [
    ]
)

ocaml_module(
    name     = "History_mode",
    struct   = "history_mode.ml",
    sig      = ":History_mode_cmi",
    opts     = TEZOS_SHELL_SERVICES_OPTS,
    deps     = TEZOS_SHELL_SERVICES_DEPS + [
    ]
)

ocaml_signature(
    name     = "History_mode_cmi",
    src      = "history_mode.mli",
    opts     = TEZOS_SHELL_SERVICES_OPTS,
    deps     = TEZOS_SHELL_SERVICES_DEPS + [
    ]
)

ocaml_module(
    name     = "Injection_services",
    struct   = "injection_services.ml",
    sig      = ":Injection_services_cmi",
    opts     = TEZOS_SHELL_SERVICES_OPTS,
    deps     = TEZOS_SHELL_SERVICES_DEPS + [
       ":Chain_services",
       ":Block_services",
    ]
)

ocaml_signature(
    name     = "Injection_services_cmi",
    src      = "injection_services.mli",
    opts     = TEZOS_SHELL_SERVICES_OPTS,
    deps     = TEZOS_SHELL_SERVICES_DEPS + [
       ":Chain_services",
    ]
)

ocaml_module(
    name     = "Monitor_services",
    struct   = "monitor_services.ml",
    sig      = ":Monitor_services_cmi",
    opts     = TEZOS_SHELL_SERVICES_OPTS,
    deps     = TEZOS_SHELL_SERVICES_DEPS + [
       ":Chain_services",
       ":Block_services",
    ]
)

ocaml_signature(
    name     = "Monitor_services_cmi",
    src      = "monitor_services.mli",
    opts     = TEZOS_SHELL_SERVICES_OPTS,
    deps     = TEZOS_SHELL_SERVICES_DEPS + [
       ":Chain_services",
    ]
)

ocaml_module(
    name     = "Peer_validator_worker_state",
    struct   = "peer_validator_worker_state.ml",
    sig      = ":Peer_validator_worker_state_cmi",
    opts     = TEZOS_SHELL_SERVICES_OPTS,
    deps     = TEZOS_SHELL_SERVICES_DEPS + [
    ]
)

ocaml_signature(
    name     = "Peer_validator_worker_state_cmi",
    src      = "peer_validator_worker_state.mli",
    opts     = TEZOS_SHELL_SERVICES_OPTS,
    deps     = TEZOS_SHELL_SERVICES_DEPS + [
    ]
)

ocaml_module(
    name     = "Prevalidator_worker_state",
    struct   = "prevalidator_worker_state.ml",
    sig      = ":Prevalidator_worker_state_cmi",
    opts     = TEZOS_SHELL_SERVICES_OPTS,
    deps     = TEZOS_SHELL_SERVICES_DEPS + [
    ]
)

ocaml_signature(
    name     = "Prevalidator_worker_state_cmi",
    src      = "prevalidator_worker_state.mli",
    opts     = TEZOS_SHELL_SERVICES_OPTS,
    deps     = TEZOS_SHELL_SERVICES_DEPS + [
    ]
)

ocaml_module(
    name     = "Protocol_services",
    struct   = "protocol_services.ml",
    sig      = ":Protocol_services_cmi",
    opts     = TEZOS_SHELL_SERVICES_OPTS,
    deps     = TEZOS_SHELL_SERVICES_DEPS + [
    ]
)

ocaml_signature(
    name     = "Protocol_services_cmi",
    src      = "protocol_services.mli",
    opts     = TEZOS_SHELL_SERVICES_OPTS,
    deps     = TEZOS_SHELL_SERVICES_DEPS + [
    ]
)

ocaml_module(
    name     = "Shell_services",
    struct   = "shell_services.ml",
    sig      = ":Shell_services_cmi",
    opts     = TEZOS_SHELL_SERVICES_OPTS,
    deps     = TEZOS_SHELL_SERVICES_DEPS + [
       ":Worker_services",
       ":Protocol_services",
       ":Monitor_services",
       ":Injection_services",
       ":Config_services",
       ":Chain_services",
       ":Block_services",
    ]
)

ocaml_signature(
    name     = "Shell_services_cmi",
    src      = "shell_services.mli",
    opts     = TEZOS_SHELL_SERVICES_OPTS,
    deps     = TEZOS_SHELL_SERVICES_DEPS + [
       ":Worker_services",
       ":Protocol_services",
       ":Monitor_services",
       ":Injection_services",
       ":Config_services",
       ":Chain_services",
       ":Block_services",
    ]
)

ocaml_module(
    name     = "Stat_services",
    struct   = "stat_services.ml",
    sig      = ":Stat_services_cmi",
    opts     = TEZOS_SHELL_SERVICES_OPTS,
    deps     = TEZOS_SHELL_SERVICES_DEPS + [
    ]
)

ocaml_signature(
    name     = "Stat_services_cmi",
    src      = "stat_services.mli",
    opts     = TEZOS_SHELL_SERVICES_OPTS,
    deps     = TEZOS_SHELL_SERVICES_DEPS + [
    ]
)

ocaml_module(
    name     = "State_events",
    struct   = "state_events.ml",
    opts     = TEZOS_SHELL_SERVICES_OPTS,
    deps     = TEZOS_SHELL_SERVICES_DEPS + [
    ]
)

ocaml_module(
    name     = "Store_errors",
    struct   = "store_errors.ml",
    opts     = TEZOS_SHELL_SERVICES_OPTS,
    deps     = TEZOS_SHELL_SERVICES_DEPS + [
       ":History_mode",
    ]
)

ocaml_module(
    name     = "Validation_errors",
    struct   = "validation_errors.ml",
    sig      = ":Validation_errors_cmi",
    opts     = TEZOS_SHELL_SERVICES_OPTS,
    deps     = TEZOS_SHELL_SERVICES_DEPS + [
    ]
)

ocaml_signature(
    name     = "Validation_errors_cmi",
    src      = "validation_errors.mli",
    opts     = TEZOS_SHELL_SERVICES_OPTS,
    deps     = TEZOS_SHELL_SERVICES_DEPS + [
    ]
)

ocaml_module(
    name     = "Version_services",
    struct   = "version_services.ml",
    sig      = ":Version_services_cmi",
    opts     = TEZOS_SHELL_SERVICES_OPTS,
    deps     = TEZOS_SHELL_SERVICES_DEPS + [
    ]
)

ocaml_signature(
    name     = "Version_services_cmi",
    src      = "version_services.mli",
    opts     = TEZOS_SHELL_SERVICES_OPTS,
    deps     = TEZOS_SHELL_SERVICES_DEPS + [
    ]
)

ocaml_module(
    name     = "Worker_services",
    struct   = "worker_services.ml",
    sig      = ":Worker_services_cmi",
    opts     = TEZOS_SHELL_SERVICES_OPTS,
    deps     = TEZOS_SHELL_SERVICES_DEPS + [
       ":Prevalidator_worker_state",
       ":Peer_validator_worker_state",
       ":Chain_validator_worker_state",
       ":Chain_services",
       ":Block_validator_worker_state",
       ":Block_services",
    ]
)

ocaml_signature(
    name     = "Worker_services_cmi",
    src      = "worker_services.mli",
    opts     = TEZOS_SHELL_SERVICES_OPTS,
    deps     = TEZOS_SHELL_SERVICES_DEPS + [
       ":Prevalidator_worker_state",
       ":Peer_validator_worker_state",
       ":Chain_validator_worker_state",
       ":Chain_services",
       ":Block_validator_worker_state",
    ]
)

