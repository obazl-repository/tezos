load("@obazl_rules_ocaml//ocaml:rules.bzl",
    "ocaml_archive",
    "ocaml_module",
    "ocaml_ns_archive",
    "ocaml_signature",
)

###############################################
########### Archive/Library Targets ###########

######## tezos-shell ########
TEZOS_SHELL_OPTS = [
    "-open", "Tezos_base",
    "-open", "Tezos_base__TzPervasives",
    "-open", "Tezos_context",
    "-open", "Tezos_p2p",
    "-open", "Tezos_p2p_services",
    "-open", "Tezos_protocol_updater",
    "-open", "Tezos_requester",
    "-open", "Tezos_shell_context",
    "-open", "Tezos_shell_services",
    "-open", "Tezos_stdlib_unix",
    "-open", "Tezos_store",
    "-open", "Tezos_validation",
    "-open", "Tezos_version",
    "-open", "Tezos_workers",
]

TEZOS_SHELL_DEPS = [
    "//src/lib_base:tezos-base",
    "//src/lib_context:tezos-context",
    "//src/lib_p2p:tezos-p2p",
    "//src/lib_p2p_services:tezos-p2p-services",
    "//src/lib_protocol_environment:tezos-shell-context",
    "//src/lib_protocol_updater:tezos-protocol-updater",
    "//src/lib_requester:tezos-requester",
    "//src/lib_shell_services:tezos-shell-services",
    "//src/lib_stdlib_unix:tezos-stdlib-unix",
    "//src/lib_store:tezos-store",
    "//src/lib_validation:tezos-validation",
    "//src/lib_version:tezos-version",
    "//src/lib_workers:tezos-workers",
    "@lwt-canceler//:lwt-canceler",
    "@lwt-exit//:lwt-exit",
    "@lwt-watcher//:lwt-watcher",
]

ocaml_ns_archive(
    name       = "tezos-shell",
    ns         = "Tezos_shell",
    visibility = ["//visibility:public"],
    submodules = [
        ":Block_directory",
        ":Block_validator",
        ":Block_validator_process",
        ":Bootstrap_pipeline",
        ":Bootstrap_pipeline_event",
        ":Chain_directory",
        ":Chain_validator",
        ":Chain_validator_event",
        ":Clock_drift",
        ":Config_directory",
        ":Consensus_heuristic",
        ":Distributed_db",
        ":Distributed_db_event",
        ":Distributed_db_message",
        ":Distributed_db_requester",
        ":Injection_directory",
        ":Monitor_directory",
        ":Node",
        ":Node_event",
        ":P2p_reader",
        ":Patch_context",
        ":Peer_validator",
        ":Prevalidation",
        ":Prevalidator",
        ":Prevalidator_filters",
        ":Protocol_directory",
        ":Protocol_validator",
        ":Protocol_validator_event",
        ":Stat_directory",
        ":Synchronisation_heuristic",
        ":Validator",
        ":Validator_event",
        ":Version_directory",
        ":Worker_directory",
        ":Worker_logger",
    ],
)

#############################
####  Singleton Targets  ####

ocaml_module(
    name     = "Block_directory",
    struct   = "block_directory.ml",
    sig      = ":Block_directory_cmi",
    opts     = TEZOS_SHELL_OPTS,
    deps     = TEZOS_SHELL_DEPS + [
       ":Prevalidator_filters",
       ":Prevalidation",
    ]
)

ocaml_signature(
    name     = "Block_directory_cmi",
    src      = "block_directory.mli",
    opts     = TEZOS_SHELL_OPTS,
    deps     = TEZOS_SHELL_DEPS + [
    ]
)

ocaml_module(
    name     = "Block_validator",
    struct   = "block_validator.ml",
    sig      = ":Block_validator_cmi",
    opts     = TEZOS_SHELL_OPTS,
    deps     = TEZOS_SHELL_DEPS + [
       ":Worker_logger",
       ":Protocol_validator",
       ":Distributed_db",
       ":Block_validator_process",
    ]
)

ocaml_signature(
    name     = "Block_validator_cmi",
    src      = "block_validator.mli",
    opts     = TEZOS_SHELL_OPTS,
    deps     = TEZOS_SHELL_DEPS + [
       ":Distributed_db",
       ":Block_validator_process",
    ]
)

ocaml_module(
    name     = "Block_validator_process",
    struct   = "block_validator_process.ml",
    sig      = ":Block_validator_process_cmi",
    opts     = TEZOS_SHELL_OPTS,
    deps     = TEZOS_SHELL_DEPS + [
    ]
)

ocaml_signature(
    name     = "Block_validator_process_cmi",
    src      = "block_validator_process.mli",
    opts     = TEZOS_SHELL_OPTS,
    deps     = TEZOS_SHELL_DEPS + [
    ]
)

ocaml_module(
    name     = "Bootstrap_pipeline",
    struct   = "bootstrap_pipeline.ml",
    sig      = ":Bootstrap_pipeline_cmi",
    opts     = TEZOS_SHELL_OPTS,
    deps     = TEZOS_SHELL_DEPS + [
       ":Distributed_db",
       ":Clock_drift",
       ":Bootstrap_pipeline_event",
       ":Block_validator_process",
       ":Block_validator",
    ]
)

ocaml_signature(
    name     = "Bootstrap_pipeline_cmi",
    src      = "bootstrap_pipeline.mli",
    opts     = TEZOS_SHELL_OPTS,
    deps     = TEZOS_SHELL_DEPS + [
       ":Distributed_db",
       ":Block_validator",
    ]
)

ocaml_module(
    name     = "Bootstrap_pipeline_event",
    struct   = "bootstrap_pipeline_event.ml",
    opts     = TEZOS_SHELL_OPTS,
    deps     = TEZOS_SHELL_DEPS + [
    ]
)

ocaml_module(
    name     = "Chain_directory",
    struct   = "chain_directory.ml",
    sig      = ":Chain_directory_cmi",
    opts     = TEZOS_SHELL_OPTS,
    deps     = TEZOS_SHELL_DEPS + [
       ":Validator",
       ":Prevalidator",
       ":Distributed_db",
       ":Chain_validator",
       ":Block_directory",
    ]
)

ocaml_signature(
    name     = "Chain_directory_cmi",
    src      = "chain_directory.mli",
    opts     = TEZOS_SHELL_OPTS,
    deps     = TEZOS_SHELL_DEPS + [
       ":Validator",
    ]
)

ocaml_module(
    name     = "Chain_validator",
    struct   = "chain_validator.ml",
    sig      = ":Chain_validator_cmi",
    opts     = TEZOS_SHELL_OPTS,
    deps     = TEZOS_SHELL_DEPS + [
       ":Worker_logger",
       ":Synchronisation_heuristic",
       ":Prevalidator_filters",
       ":Prevalidator",
       ":Peer_validator",
       ":Distributed_db",
       ":Chain_validator_event",
       ":Block_validator_process",
       ":Block_validator",
    ]
)

ocaml_signature(
    name     = "Chain_validator_cmi",
    src      = "chain_validator.mli",
    opts     = TEZOS_SHELL_OPTS,
    deps     = TEZOS_SHELL_DEPS + [
       ":Synchronisation_heuristic",
       ":Prevalidator",
       ":Peer_validator",
       ":Distributed_db",
       ":Block_validator_process",
       ":Block_validator",
    ]
)

ocaml_module(
    name     = "Chain_validator_event",
    struct   = "chain_validator_event.ml",
    opts     = TEZOS_SHELL_OPTS,
    deps     = TEZOS_SHELL_DEPS + [
    ]
)

ocaml_module(
    name     = "Clock_drift",
    struct   = "clock_drift.ml",
    sig      = ":Clock_drift_cmi",
    opts     = TEZOS_SHELL_OPTS,
    deps     = TEZOS_SHELL_DEPS + [
    ]
)

ocaml_signature(
    name     = "Clock_drift_cmi",
    src      = "clock_drift.mli",
    opts     = TEZOS_SHELL_OPTS,
    deps     = TEZOS_SHELL_DEPS + [
    ]
)

ocaml_module(
    name     = "Config_directory",
    struct   = "config_directory.ml",
    sig      = ":Config_directory_cmi",
    opts     = TEZOS_SHELL_OPTS,
    deps     = TEZOS_SHELL_DEPS + [
    ]
)

ocaml_signature(
    name     = "Config_directory_cmi",
    src      = "config_directory.mli",
    opts     = TEZOS_SHELL_OPTS,
    deps     = TEZOS_SHELL_DEPS + [
    ]
)

ocaml_module(
    name     = "Consensus_heuristic",
    struct   = "consensus_heuristic.ml",
    sig      = ":Consensus_heuristic_cmi",
    opts     = TEZOS_SHELL_OPTS,
    deps     = TEZOS_SHELL_DEPS + [
    ]
)

ocaml_signature(
    name     = "Consensus_heuristic_cmi",
    src      = "consensus_heuristic.mli",
    opts     = TEZOS_SHELL_OPTS,
    deps     = TEZOS_SHELL_DEPS + [
    ]
)

ocaml_module(
    name     = "Distributed_db",
    struct   = "distributed_db.ml",
    sig      = ":Distributed_db_cmi",
    opts     = TEZOS_SHELL_OPTS,
    deps     = TEZOS_SHELL_DEPS + [
       ":P2p_reader",
       ":Distributed_db_requester",
       ":Distributed_db_message",
    ]
)

ocaml_signature(
    name     = "Distributed_db_cmi",
    src      = "distributed_db.mli",
    opts     = TEZOS_SHELL_OPTS,
    deps     = TEZOS_SHELL_DEPS + [
       ":P2p_reader",
       ":Distributed_db_message",
    ]
)

ocaml_module(
    name     = "Distributed_db_event",
    struct   = "distributed_db_event.ml",
    opts     = TEZOS_SHELL_OPTS,
    deps     = TEZOS_SHELL_DEPS + [
       ":Distributed_db_message",
    ]
)

ocaml_module(
    name     = "Distributed_db_message",
    struct   = "distributed_db_message.ml",
    sig      = ":Distributed_db_message_cmi",
    opts     = TEZOS_SHELL_OPTS,
    deps     = TEZOS_SHELL_DEPS + [
    ]
)

ocaml_signature(
    name     = "Distributed_db_message_cmi",
    src      = "distributed_db_message.mli",
    opts     = TEZOS_SHELL_OPTS,
    deps     = TEZOS_SHELL_DEPS + [
    ]
)

ocaml_module(
    name     = "Distributed_db_requester",
    struct   = "distributed_db_requester.ml",
    sig      = ":Distributed_db_requester_cmi",
    opts     = TEZOS_SHELL_OPTS,
    deps     = TEZOS_SHELL_DEPS + [
       ":Distributed_db_message",
       ":Distributed_db_event",
    ]
)

ocaml_signature(
    name     = "Distributed_db_requester_cmi",
    src      = "distributed_db_requester.mli",
    opts     = TEZOS_SHELL_OPTS,
    deps     = TEZOS_SHELL_DEPS + [
       ":Distributed_db_message",
    ]
)

ocaml_module(
    name     = "Injection_directory",
    struct   = "injection_directory.ml",
    sig      = ":Injection_directory_cmi",
    opts     = TEZOS_SHELL_OPTS,
    deps     = TEZOS_SHELL_DEPS + [
       ":Validator",
       ":Distributed_db",
       ":Chain_directory",
    ]
)

ocaml_signature(
    name     = "Injection_directory_cmi",
    src      = "injection_directory.mli",
    opts     = TEZOS_SHELL_OPTS,
    deps     = TEZOS_SHELL_DEPS + [
       ":Validator",
    ]
)

ocaml_module(
    name     = "Monitor_directory",
    struct   = "monitor_directory.ml",
    sig      = ":Monitor_directory_cmi",
    opts     = TEZOS_SHELL_OPTS,
    deps     = TEZOS_SHELL_DEPS + [
       ":Validator",
       ":Distributed_db",
       ":Chain_validator",
       ":Chain_directory",
    ]
)

ocaml_signature(
    name     = "Monitor_directory_cmi",
    src      = "monitor_directory.mli",
    opts     = TEZOS_SHELL_OPTS,
    deps     = TEZOS_SHELL_DEPS + [
       ":Validator",
       ":Chain_validator",
    ]
)

ocaml_module(
    name     = "Node",
    struct   = "node.ml",
    sig      = ":Node_cmi",
    opts     = TEZOS_SHELL_OPTS,
    deps     = TEZOS_SHELL_DEPS + [
       ":Worker_directory",
       ":Version_directory",
       ":Validator",
       ":Stat_directory",
       ":Protocol_directory",
       ":Prevalidator",
       ":Peer_validator",
       ":Node_event",
       ":Monitor_directory",
       ":Injection_directory",
       ":Distributed_db_message",
       ":Distributed_db",
       ":Config_directory",
       ":Chain_validator",
       ":Chain_directory",
       ":Block_validator_process",
       ":Block_validator",
    ]
)

ocaml_signature(
    name     = "Node_cmi",
    src      = "node.mli",
    opts     = TEZOS_SHELL_OPTS,
    deps     = TEZOS_SHELL_DEPS + [
       ":Prevalidator",
       ":Peer_validator",
       ":Chain_validator",
       ":Block_validator",
    ]
)

ocaml_module(
    name     = "Node_event",
    struct   = "node_event.ml",
    opts     = TEZOS_SHELL_OPTS,
    deps     = TEZOS_SHELL_DEPS + [
    ]
)

ocaml_module(
    name     = "P2p_reader",
    struct   = "p2p_reader.ml",
    sig      = ":P2p_reader_cmi",
    opts     = TEZOS_SHELL_OPTS,
    deps     = TEZOS_SHELL_DEPS + [
       ":Distributed_db_requester",
       ":Distributed_db_message",
       ":Distributed_db_event",
       ":Clock_drift",
    ]
)

ocaml_signature(
    name     = "P2p_reader_cmi",
    src      = "p2p_reader.mli",
    opts     = TEZOS_SHELL_OPTS,
    deps     = TEZOS_SHELL_DEPS + [
       ":Distributed_db_requester",
       ":Distributed_db_message",
    ]
)

ocaml_module(
    name     = "Patch_context",
    struct   = "patch_context.ml",
    sig      = ":Patch_context_cmi",
    opts     = TEZOS_SHELL_OPTS,
    deps     = TEZOS_SHELL_DEPS + [
    ]
)

ocaml_signature(
    name     = "Patch_context_cmi",
    src      = "patch_context.mli",
    opts     = TEZOS_SHELL_OPTS,
    deps     = TEZOS_SHELL_DEPS + [
    ]
)

ocaml_module(
    name     = "Peer_validator",
    struct   = "peer_validator.ml",
    sig      = ":Peer_validator_cmi",
    opts     = TEZOS_SHELL_OPTS,
    deps     = TEZOS_SHELL_DEPS + [
       ":Worker_logger",
       ":Distributed_db",
       ":Bootstrap_pipeline",
       ":Block_validator_process",
       ":Block_validator",
    ]
)

ocaml_signature(
    name     = "Peer_validator_cmi",
    src      = "peer_validator.mli",
    opts     = TEZOS_SHELL_OPTS,
    deps     = TEZOS_SHELL_DEPS + [
       ":Distributed_db",
       ":Block_validator",
    ]
)

ocaml_module(
    name     = "Prevalidation",
    struct   = "prevalidation.ml",
    sig      = ":Prevalidation_cmi",
    opts     = TEZOS_SHELL_OPTS,
    deps     = TEZOS_SHELL_DEPS + [
    ]
)

ocaml_signature(
    name     = "Prevalidation_cmi",
    src      = "prevalidation.mli",
    opts     = TEZOS_SHELL_OPTS,
    deps     = TEZOS_SHELL_DEPS + [
    ]
)

ocaml_module(
    name     = "Prevalidator",
    struct   = "prevalidator.ml",
    sig      = ":Prevalidator_cmi",
    opts     = TEZOS_SHELL_OPTS,
    deps     = TEZOS_SHELL_DEPS + [
       ":Worker_logger",
       ":Prevalidator_filters",
       ":Prevalidation",
       ":Distributed_db",
    ]
)

ocaml_signature(
    name     = "Prevalidator_cmi",
    src      = "prevalidator.mli",
    opts     = TEZOS_SHELL_OPTS,
    deps     = TEZOS_SHELL_DEPS + [
       ":Prevalidator_filters",
       ":Distributed_db",
    ]
)

ocaml_module(
    name     = "Prevalidator_filters",
    struct   = "prevalidator_filters.ml",
    sig      = ":Prevalidator_filters_cmi",
    opts     = TEZOS_SHELL_OPTS,
    deps     = TEZOS_SHELL_DEPS + [
    ]
)

ocaml_signature(
    name     = "Prevalidator_filters_cmi",
    src      = "prevalidator_filters.mli",
    opts     = TEZOS_SHELL_OPTS,
    deps     = TEZOS_SHELL_DEPS + [
    ]
)

ocaml_module(
    name     = "Protocol_directory",
    struct   = "protocol_directory.ml",
    sig      = ":Protocol_directory_cmi",
    opts     = TEZOS_SHELL_OPTS,
    deps     = TEZOS_SHELL_DEPS + [
       ":Distributed_db",
       ":Block_validator_process",
       ":Block_validator",
    ]
)

ocaml_signature(
    name     = "Protocol_directory_cmi",
    src      = "protocol_directory.mli",
    opts     = TEZOS_SHELL_OPTS,
    deps     = TEZOS_SHELL_DEPS + [
       ":Block_validator",
    ]
)

ocaml_module(
    name     = "Protocol_validator",
    struct   = "protocol_validator.ml",
    sig      = ":Protocol_validator_cmi",
    opts     = TEZOS_SHELL_OPTS,
    deps     = TEZOS_SHELL_DEPS + [
       ":Protocol_validator_event",
       ":Distributed_db",
    ]
)

ocaml_signature(
    name     = "Protocol_validator_cmi",
    src      = "protocol_validator.mli",
    opts     = TEZOS_SHELL_OPTS,
    deps     = TEZOS_SHELL_DEPS + [
       ":Distributed_db",
    ]
)

ocaml_module(
    name     = "Protocol_validator_event",
    struct   = "protocol_validator_event.ml",
    opts     = TEZOS_SHELL_OPTS,
    deps     = TEZOS_SHELL_DEPS + [
    ]
)

ocaml_module(
    name     = "Stat_directory",
    struct   = "stat_directory.ml",
    opts     = TEZOS_SHELL_OPTS,
    deps     = TEZOS_SHELL_DEPS + [
    ]
)

ocaml_module(
    name     = "Synchronisation_heuristic",
    struct   = "synchronisation_heuristic.ml",
    sig      = ":Synchronisation_heuristic_cmi",
    opts     = TEZOS_SHELL_OPTS,
    deps     = TEZOS_SHELL_DEPS + [
    ]
)

ocaml_signature(
    name     = "Synchronisation_heuristic_cmi",
    src      = "synchronisation_heuristic.mli",
    opts     = TEZOS_SHELL_OPTS,
    deps     = TEZOS_SHELL_DEPS + [
    ]
)

ocaml_module(
    name     = "Validator",
    struct   = "validator.ml",
    sig      = ":Validator_cmi",
    opts     = TEZOS_SHELL_OPTS,
    deps     = TEZOS_SHELL_DEPS + [
       ":Validator_event",
       ":Prevalidator",
       ":Peer_validator",
       ":Distributed_db",
       ":Clock_drift",
       ":Chain_validator",
       ":Block_validator_process",
       ":Block_validator",
    ]
)

ocaml_signature(
    name     = "Validator_cmi",
    src      = "validator.mli",
    opts     = TEZOS_SHELL_OPTS,
    deps     = TEZOS_SHELL_DEPS + [
       ":Prevalidator",
       ":Peer_validator",
       ":Distributed_db",
       ":Chain_validator",
       ":Block_validator_process",
       ":Block_validator",
    ]
)

ocaml_module(
    name     = "Validator_event",
    struct   = "validator_event.ml",
    opts     = TEZOS_SHELL_OPTS,
    deps     = TEZOS_SHELL_DEPS + [
    ]
)

ocaml_module(
    name     = "Version_directory",
    struct   = "version_directory.ml",
    opts     = TEZOS_SHELL_OPTS,
    deps     = TEZOS_SHELL_DEPS + [
    ]
)

ocaml_module(
    name     = "Worker_directory",
    struct   = "worker_directory.ml",
    sig      = ":Worker_directory_cmi",
    opts     = TEZOS_SHELL_OPTS,
    deps     = TEZOS_SHELL_DEPS + [
       ":Prevalidator",
       ":Peer_validator",
       ":Distributed_db",
       ":Chain_validator",
       ":Chain_directory",
       ":Block_validator_process",
       ":Block_validator",
    ]
)

ocaml_signature(
    name     = "Worker_directory_cmi",
    src      = "worker_directory.mli",
    opts     = TEZOS_SHELL_OPTS,
    deps     = TEZOS_SHELL_DEPS + [
    ]
)

ocaml_module(
    name     = "Worker_logger",
    struct   = "worker_logger.ml",
    sig      = ":Worker_logger_cmi",
    opts     = TEZOS_SHELL_OPTS,
    deps     = TEZOS_SHELL_DEPS + [
    ]
)

ocaml_signature(
    name     = "Worker_logger_cmi",
    src      = "worker_logger.mli",
    opts     = TEZOS_SHELL_OPTS,
    deps     = TEZOS_SHELL_DEPS + [
    ]
)

