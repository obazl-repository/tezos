load("@obazl_rules_ocaml//dsl:library.bzl", "lib", "mod", "sig")

lib(
    name = "tezos-shell",
    modules = dict(
        block_directory = sig(":prevalidation", ":prevalidator"),
        block_validator = sig(":distributed_db", ":block_validator_process", ":protocol_validator", ":worker_logger"),
        block_validator_process = sig(),
        bootstrap_pipeline = sig(":bootstrap_pipeline_event", ":block_validator"),
        bootstrap_pipeline_event = mod(),
        chain_directory = sig(":validator", ":block_directory"),
        chain_validator = sig(
            ":block_validator",
            ":chain_validator_event",
            ":peer_validator",
            ":prevalidator",
            ":synchronisation_heuristic",
        ),
        chain_validator_event = mod(),
        clock_drift = sig(),
        config_directory = sig(),
        consensus_heuristic = sig(),
        distributed_db = sig(":distributed_db_message", ":p2p_reader"),
        distributed_db_event = mod(":distributed_db_message"),
        distributed_db_message = sig(),
        distributed_db_requester = sig(":distributed_db_message", ":distributed_db_event"),
        injection_directory = sig(":validator", ":chain_directory"),
        monitor_directory = sig(":validator", ":chain_directory"),
        node = sig(
            ":chain_validator",
            ":config_directory",
            ":injection_directory",
            ":monitor_directory",
            ":node_event",
            ":peer_validator",
            ":prevalidator",
            ":protocol_directory",
            ":stat_directory",
            ":validator",
            ":version_directory",
            ":worker_directory",
        ),
        node_event = mod(),
        p2p_reader = sig(":distributed_db_message", ":distributed_db_requester", ":clock_drift"),
        patch_context = sig(),
        peer_validator = sig(":block_validator", ":bootstrap_pipeline"),
        prevalidation = sig(),
        prevalidator = sig(":prevalidator_filters", ":distributed_db", ":worker_logger", ":prevalidation"),
        prevalidator_filters = sig(),
        protocol_directory = sig(":block_validator"),
        protocol_validator = sig(":distributed_db", ":protocol_validator_event"),
        protocol_validator_event = mod(),
        stat_directory = mod(),
         synchronisation_heuristic = sig(),
        validator = sig(":distributed_db", ":peer_validator", ":prevalidator", ":chain_validator", ":validator_event"),
        validator_event = mod(),
        version_directory = mod(),
        worker_directory = sig(":prevalidator", ":chain_directory"),
        worker_logger = sig(),
    ),
    deps = [
        "//src/lib_base:#Tezos_base",
        "//src/lib_version:#Tezos_version",
        "//src/lib_context:#Tezos_context",
        "//src/lib_store:#Tezos_store",
        "//src/lib_protocol_environment:#Tezos_shell_context",
        "//src/lib_p2p:#Tezos_p2p",
        "//src/lib_stdlib_unix:#Tezos_stdlib_unix",
        "//src/lib_shell_services:#Tezos_shell_services",
        "//src/lib_p2p_services:#Tezos_p2p_services",
        "//src/lib_protocol_updater:#Tezos_protocol_updater",
        "//src/lib_requester:#Tezos_requester",
        "//src/lib_workers:#Tezos_workers",
        "//src/lib_validation:#Tezos_validation",
    ],
    deps_opam = [
        "lwt-watcher",
        "lwt-canceler",
        "lwt-exit",
    ],
    opts = [
        "-open",
        "Tezos_base__TzPervasives",
        "-open",
        "Tezos_base",
        "-open",
        "Tezos_context",
        "-open",
        "Tezos_store",
        "-open",
        "Tezos_shell_context",
        "-open",
        "Tezos_p2p",
        "-open",
        "Tezos_stdlib_unix",
        "-open",
        "Tezos_shell_services",
        "-open",
        "Tezos_p2p_services",
        "-open",
        "Tezos_protocol_updater",
        "-open",
        "Tezos_requester",
        "-open",
        "Tezos_workers",
        "-open",
        "Tezos_validation",
        "-open",
        "Tezos_version",
    ]
)

