load("@obazl_rules_ocaml//ocaml:rules.bzl",
    "ocaml_archive",
    "ocaml_module",
    "ocaml_ns_archive",
    "ocaml_signature",
)

###############################################
########### Archive/Library Targets ###########

######## tezos-validation ########
TEZOS_VALIDATION_OPTS = [
    "-open", "Tezos_base__TzPervasives",
    "-open", "Tezos_context",
    "-open", "Tezos_protocol_updater",
    "-open", "Tezos_shell_context",
    "-open", "Tezos_shell_services",
    "-open", "Tezos_stdlib_unix",
    "-open", "Tezos_stdlib_unix",
]

TEZOS_VALIDATION_DEPS = [
    "//src/lib_base:tezos-base",
    "//src/lib_context:tezos-context",
    "//src/lib_protocol_environment:tezos-shell-context",
    "//src/lib_protocol_updater:tezos-protocol-updater",
    "//src/lib_shell_services:tezos-shell-services",
    "//src/lib_stdlib_unix:tezos-stdlib-unix",
]

ocaml_ns_archive(
    name       = "tezos-validation",
    ns         = "Tezos_validation",
    visibility = ["//visibility:public"],
    submodules = [
        ":Block_validation",
        ":External_validation",
    ],
)

#############################
####  Singleton Targets  ####

ocaml_module(
    name     = "Block_validation",
    struct   = "block_validation.ml",
    sig      = ":Block_validation_cmi",
    opts     = TEZOS_VALIDATION_OPTS,
    deps     = TEZOS_VALIDATION_DEPS + [
    ]
)

ocaml_signature(
    name     = "Block_validation_cmi",
    src      = "block_validation.mli",
    opts     = TEZOS_VALIDATION_OPTS,
    deps     = TEZOS_VALIDATION_DEPS + [
    ]
)

ocaml_module(
    name     = "External_validation",
    struct   = "external_validation.ml",
    sig      = ":External_validation_cmi",
    opts     = TEZOS_VALIDATION_OPTS,
    deps     = TEZOS_VALIDATION_DEPS + [
    ]
)

ocaml_signature(
    name     = "External_validation_cmi",
    src      = "external_validation.mli",
    opts     = TEZOS_VALIDATION_OPTS,
    deps     = TEZOS_VALIDATION_DEPS + [
    ]
)

