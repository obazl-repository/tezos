load("@obazl_rules_ocaml//ocaml:rules.bzl",
    "ocaml_archive",
    "ocaml_module",
    "ocaml_ns_archive",
    "ocaml_signature",
)

###############################################
########### Archive/Library Targets ###########

######## tezos-store ########
TEZOS_STORE_OPTS = [
    "-open", "Tezos_base",
    "-open", "Tezos_base__TzPervasives",
    "-open", "Tezos_context",
    "-open", "Tezos_legacy_store",
    "-open", "Tezos_shell_services",
    "-open", "Tezos_stdlib",
    "-open", "Tezos_stdlib_unix",
    "-open", "Tezos_validation",
]

TEZOS_STORE_DEPS = [
    "//src/lib_base:tezos-base",
    "//src/lib_context:tezos-context",
    "//src/lib_shell_services:tezos-shell-services",
    "//src/lib_stdlib_unix:tezos-stdlib-unix",
    "//src/lib_store/legacy_store:tezos-legacy-store",
    "//src/lib_validation:tezos-validation",
    "@camlzip//:camlzip",
    "@index//:index",
    "@irmin-pack//:irmin-pack",
    "@lwt-watcher//:lwt-watcher",
    "@ringo-lwt//:ringo-lwt",
    "@tar-unix//:tar-unix",
    "@tar//:tar",
]

ocaml_ns_archive(
    name       = "tezos-store",
    ns         = "Tezos_store",
    visibility = ["//visibility:public"],
    submodules = [
        ":Block_key",
        ":Block_level",
        ":Block_repr",
        ":Block_store",
        ":Cemented_block_store",
        ":Consistency",
        ":Floating_block_index",
        ":Floating_block_store",
        ":Legacy",
        ":Naming",
        ":Protocol_store",
        ":Reconstruction",
        ":Reconstruction_events",
        ":Snapshots",
        ":Snapshots_events",
        ":Store",
        ":Store_events",
        ":Store_types",
        ":Stored_data",
    ],
)

#############################
####  Singleton Targets  ####

ocaml_module(
    name     = "Block_key",
    struct   = "block_key.ml",
    sig      = ":Block_key_cmi",
    opts     = TEZOS_STORE_OPTS,
    deps     = TEZOS_STORE_DEPS + [
    ]
)

ocaml_signature(
    name     = "Block_key_cmi",
    src      = "block_key.mli",
    opts     = TEZOS_STORE_OPTS,
    deps     = TEZOS_STORE_DEPS + [
    ]
)

ocaml_module(
    name     = "Block_level",
    struct   = "block_level.ml",
    sig      = ":Block_level_cmi",
    opts     = TEZOS_STORE_OPTS,
    deps     = TEZOS_STORE_DEPS + [
    ]
)

ocaml_signature(
    name     = "Block_level_cmi",
    src      = "block_level.mli",
    opts     = TEZOS_STORE_OPTS,
    deps     = TEZOS_STORE_DEPS + [
    ]
)

ocaml_module(
    name     = "Block_repr",
    struct   = "block_repr.ml",
    sig      = ":Block_repr_cmi",
    opts     = TEZOS_STORE_OPTS,
    deps     = TEZOS_STORE_DEPS + [
    ]
)

ocaml_signature(
    name     = "Block_repr_cmi",
    src      = "block_repr.mli",
    opts     = TEZOS_STORE_OPTS,
    deps     = TEZOS_STORE_DEPS + [
       ":Store_types",
    ]
)

ocaml_module(
    name     = "Block_store",
    struct   = "block_store.ml",
    sig      = ":Block_store_cmi",
    opts     = TEZOS_STORE_OPTS,
    deps     = TEZOS_STORE_DEPS + [
       ":Stored_data",
       ":Store_types",
       ":Store_events",
       ":Naming",
       ":Floating_block_store",
       ":Floating_block_index",
       ":Cemented_block_store",
       ":Block_repr",
    ]
)

ocaml_signature(
    name     = "Block_store_cmi",
    src      = "block_store.mli",
    opts     = TEZOS_STORE_OPTS,
    deps     = TEZOS_STORE_DEPS + [
       ":Store_types",
       ":Naming",
       ":Floating_block_store",
       ":Cemented_block_store",
       ":Block_repr",
       ":Block_level",
       ":Block_key",
    ]
)

ocaml_module(
    name     = "Cemented_block_store",
    struct   = "cemented_block_store.ml",
    sig      = ":Cemented_block_store_cmi",
    opts     = TEZOS_STORE_OPTS,
    deps     = TEZOS_STORE_DEPS + [
       ":Naming",
       ":Block_repr",
       ":Block_level",
       ":Block_key",
    ]
)

ocaml_signature(
    name     = "Cemented_block_store_cmi",
    src      = "cemented_block_store.mli",
    opts     = TEZOS_STORE_OPTS,
    deps     = TEZOS_STORE_DEPS + [
       ":Naming",
       ":Block_repr",
       ":Block_level",
       ":Block_key",
    ]
)

ocaml_module(
    name     = "Consistency",
    struct   = "consistency.ml",
    sig      = ":Consistency_cmi",
    opts     = TEZOS_STORE_OPTS,
    deps     = TEZOS_STORE_DEPS + [
       ":Stored_data",
       ":Store_types",
       ":Store_events",
       ":Naming",
       ":Floating_block_store",
       ":Cemented_block_store",
       ":Block_store",
       ":Block_repr",
    ]
)

ocaml_signature(
    name     = "Consistency_cmi",
    src      = "consistency.mli",
    opts     = TEZOS_STORE_OPTS,
    deps     = TEZOS_STORE_DEPS + [
       ":Naming",
    ]
)

ocaml_module(
    name     = "Floating_block_index",
    struct   = "floating_block_index.ml",
    sig      = ":Floating_block_index_cmi",
    opts     = TEZOS_STORE_OPTS,
    deps     = TEZOS_STORE_DEPS + [
       ":Block_key",
    ]
)

ocaml_signature(
    name     = "Floating_block_index_cmi",
    src      = "floating_block_index.mli",
    opts     = TEZOS_STORE_OPTS,
    deps     = TEZOS_STORE_DEPS + [
    ]
)

ocaml_module(
    name     = "Floating_block_store",
    struct   = "floating_block_store.ml",
    sig      = ":Floating_block_store_cmi",
    opts     = TEZOS_STORE_OPTS,
    deps     = TEZOS_STORE_DEPS + [
       ":Naming",
       ":Floating_block_index",
       ":Block_repr",
    ]
)

ocaml_signature(
    name     = "Floating_block_store_cmi",
    src      = "floating_block_store.mli",
    opts     = TEZOS_STORE_OPTS,
    deps     = TEZOS_STORE_DEPS + [
       ":Naming",
       ":Block_repr",
    ]
)

ocaml_module(
    name     = "Legacy",
    struct   = "legacy.ml",
    sig      = ":Legacy_cmi",
    opts     = TEZOS_STORE_OPTS,
    deps     = TEZOS_STORE_DEPS + [
       ":Store_types",
       ":Store",
       ":Cemented_block_store",
       ":Block_store",
       ":Block_repr",
    ]
)

ocaml_signature(
    name     = "Legacy_cmi",
    src      = "legacy.mli",
    opts     = TEZOS_STORE_OPTS,
    deps     = TEZOS_STORE_DEPS + [
       ":Store",
    ]
)

ocaml_module(
    name     = "Naming",
    struct   = "naming.ml",
    sig      = ":Naming_cmi",
    opts     = TEZOS_STORE_OPTS,
    deps     = TEZOS_STORE_DEPS + [
       ":Store_types",
       ":Block_repr",
    ]
)

ocaml_signature(
    name     = "Naming_cmi",
    src      = "naming.mli",
    opts     = TEZOS_STORE_OPTS,
    deps     = TEZOS_STORE_DEPS + [
       ":Store_types",
       ":Block_repr",
    ]
)

ocaml_module(
    name     = "Protocol_store",
    struct   = "protocol_store.ml",
    sig      = ":Protocol_store_cmi",
    opts     = TEZOS_STORE_OPTS,
    deps     = TEZOS_STORE_DEPS + [
       ":Naming",
    ]
)

ocaml_signature(
    name     = "Protocol_store_cmi",
    src      = "protocol_store.mli",
    opts     = TEZOS_STORE_OPTS,
    deps     = TEZOS_STORE_DEPS + [
       ":Naming",
    ]
)

ocaml_module(
    name     = "Reconstruction",
    struct   = "reconstruction.ml",
    sig      = ":Reconstruction_cmi",
    opts     = TEZOS_STORE_OPTS,
    deps     = TEZOS_STORE_DEPS + [
       ":Store",
       ":Reconstruction_events",
       ":Naming",
       ":Floating_block_store",
       ":Cemented_block_store",
       ":Block_store",
       ":Block_repr",
    ]
)

ocaml_signature(
    name     = "Reconstruction_cmi",
    src      = "reconstruction.mli",
    opts     = TEZOS_STORE_OPTS,
    deps     = TEZOS_STORE_DEPS + [
    ]
)

ocaml_module(
    name     = "Reconstruction_events",
    struct   = "reconstruction_events.ml",
    opts     = TEZOS_STORE_OPTS,
    deps     = TEZOS_STORE_DEPS + [
       ":Store_types",
    ]
)

ocaml_module(
    name     = "Snapshots",
    struct   = "snapshots.ml",
    sig      = ":Snapshots_cmi",
    opts     = TEZOS_STORE_OPTS,
    deps     = TEZOS_STORE_DEPS + [
       ":Store_types",
       ":Store",
       ":Snapshots_events",
       ":Naming",
       ":Legacy",
       ":Floating_block_store",
       ":Cemented_block_store",
       ":Block_store",
       ":Block_repr",
    ]
)

ocaml_signature(
    name     = "Snapshots_cmi",
    src      = "snapshots.mli",
    opts     = TEZOS_STORE_OPTS,
    deps     = TEZOS_STORE_DEPS + [
       ":Store_types",
    ]
)

ocaml_module(
    name     = "Snapshots_events",
    struct   = "snapshots_events.ml",
    opts     = TEZOS_STORE_OPTS,
    deps     = TEZOS_STORE_DEPS + [
       ":Store_types",
    ]
)

ocaml_module(
    name     = "Store",
    struct   = "store.ml",
    sig      = ":Store_cmi",
    opts     = TEZOS_STORE_OPTS,
    deps     = TEZOS_STORE_DEPS + [
       ":Stored_data",
       ":Store_types",
       ":Store_events",
       ":Protocol_store",
       ":Naming",
       ":Floating_block_store",
       ":Consistency",
       ":Cemented_block_store",
       ":Block_store",
       ":Block_repr",
    ]
)

ocaml_signature(
    name     = "Store_cmi",
    src      = "store.mli",
    opts     = TEZOS_STORE_OPTS,
    deps     = TEZOS_STORE_DEPS + [
       ":Store_types",
       ":Naming",
       ":Block_store",
       ":Block_repr",
    ]
)

ocaml_module(
    name     = "Store_events",
    struct   = "store_events.ml",
    opts     = TEZOS_STORE_OPTS,
    deps     = TEZOS_STORE_DEPS + [
       ":Store_types",
    ]
)

ocaml_module(
    name     = "Store_types",
    struct   = "store_types.ml",
    sig      = ":Store_types_cmi",
    opts     = TEZOS_STORE_OPTS,
    deps     = TEZOS_STORE_DEPS + [
    ]
)

ocaml_signature(
    name     = "Store_types_cmi",
    src      = "store_types.mli",
    opts     = TEZOS_STORE_OPTS,
    deps     = TEZOS_STORE_DEPS + [
    ]
)

ocaml_module(
    name     = "Stored_data",
    struct   = "stored_data.ml",
    sig      = ":Stored_data_cmi",
    opts     = TEZOS_STORE_OPTS,
    deps     = TEZOS_STORE_DEPS + [
       ":Naming",
    ]
)

ocaml_signature(
    name     = "Stored_data_cmi",
    src      = "stored_data.mli",
    opts     = TEZOS_STORE_OPTS,
    deps     = TEZOS_STORE_DEPS + [
       ":Naming",
    ]
)

