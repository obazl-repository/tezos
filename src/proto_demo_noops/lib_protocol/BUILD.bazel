load("@obazl_rules_ocaml//ocaml:rules.bzl",
    "ocaml_archive",
    "ocaml_module",
    "ocaml_ns_archive",
    "ocaml_signature",
)

###############################################
########### Archive/Library Targets ###########

######## tezos-protocol-demo-noops.environment ########
TEZOS_PROTOCOL_DEMO_NOOPS_ENVIRONMENT_DEPS = [
    "//src/lib_protocol_environment:tezos-protocol-environment",
]

ocaml_ns_archive(
    name       = "tezos-protocol-demo-noops.environment",
    ns         = "Tezos_protocol_environment_demo_noops",
    visibility = ["//visibility:public"],
    submodules = [
        ":Environment",
    ],
)

######## tezos-protocol-demo-noops.raw ########
TEZOS_PROTOCOL_DEMO_NOOPS_RAW_OPTS = [
    "-nopervasives",
    "-nostdlib",
    "-w",
    "+a-4-6-7-9-29-32-40..42-44-45-48-60-67",
    "-warn-error",
    "+a",
    "-open", "Error_monad",
    "-open", "Pervasives",
    "-open", "Tezos_protocol_environment_demo_noops__Environment",
]

TEZOS_PROTOCOL_DEMO_NOOPS_RAW_DEPS = [
    "//src/proto_demo_noops/lib_protocol:tezos-protocol-demo-noops.environment",
]

ocaml_ns_archive(
    name       = "tezos-protocol-demo-noops.raw",
    ns         = "Tezos_raw_protocol_demo_noops",
    visibility = ["//visibility:public"],
    submodules = [
        ":Main",
    ],
)

######## tezos-protocol-demo-noops ########
TEZOS_PROTOCOL_DEMO_NOOPS_OPTS = [
    "-w",
    "+a-4-6-7-9-29-40..42-44-45-48-60-67",
    "-warn-error",
    "+a",
    "-nopervasives",
]

TEZOS_PROTOCOL_DEMO_NOOPS_DEPS = [
    "//src/lib_protocol_environment/sigs:tezos-protocol-environment-sigs",
    "//src/lib_protocol_environment:tezos-protocol-environment",
    "//src/proto_demo_noops/lib_protocol:tezos-protocol-demo-noops.raw",
]

ocaml_ns_archive(
    name       = "tezos-protocol-demo-noops",
    ns         = "Tezos_protocol_demo_noops",
    visibility = ["//visibility:public"],
    submodules = [
        ":Protocol",
    ],
)

######## tezos-protocol-functor-demo-noops ########
TEZOS_PROTOCOL_FUNCTOR_DEMO_NOOPS_OPTS = [
    "-w",
    "+a-4-6-7-9-29-40..42-44-45-48-60-67",
    "-warn-error",
    "+a",
    "-nopervasives",
]

TEZOS_PROTOCOL_FUNCTOR_DEMO_NOOPS_DEPS = [
    "//src/lib_protocol_environment/sigs:tezos-protocol-environment-sigs",
    "//src/lib_protocol_environment:tezos-protocol-environment",
    "//src/proto_demo_noops/lib_protocol:tezos-protocol-demo-noops.raw",
]

ocaml_ns_archive(
    name       = "tezos-protocol-functor-demo-noops",
    ns         = "Tezos_protocol_demo_noops_functor",
    visibility = ["//visibility:public"],
    submodules = [
        ":Functor",
    ],
)

######## tezos-embedded-protocol-demo-noops ########
TEZOS_EMBEDDED_PROTOCOL_DEMO_NOOPS_OPTS = [
    "-w",
    "+a-4-6-7-9-29-32-40..42-44-45-48-60-67",
    "-warn-error",
    "+a",
]

TEZOS_EMBEDDED_PROTOCOL_DEMO_NOOPS_DEPS = [
    "//src/lib_protocol_environment:tezos-protocol-environment",
    "//src/lib_protocol_updater:tezos-protocol-updater",
    "//src/proto_demo_noops/lib_protocol:tezos-protocol-demo-noops",
]

ocaml_ns_archive(
    name       = "tezos-embedded-protocol-demo-noops",
    ns         = "Tezos_embedded_protocol_demo_noops",
    visibility = ["//visibility:public"],
    submodules = [
        ":Registerer",
    ],
)

#############################
####  Singleton Targets  ####

ocaml_module(
    name     = "Environment",
    struct   = "environment.ml",
    deps     = TEZOS_PROTOCOL_DEMO_NOOPS_ENVIRONMENT_DEPS + [
    ]
)

ocaml_module(
    name     = "Functor",
    struct   = "functor.ml",
    opts     = TEZOS_PROTOCOL_FUNCTOR_DEMO_NOOPS_OPTS,
    deps     = TEZOS_PROTOCOL_FUNCTOR_DEMO_NOOPS_DEPS + [
    ]
)

ocaml_module(
    name     = "Main",
    struct   = "main.ml",
    sig      = ":Main_cmi",
    opts     = TEZOS_PROTOCOL_DEMO_NOOPS_RAW_OPTS,
    deps     = TEZOS_PROTOCOL_DEMO_NOOPS_RAW_DEPS + [
    ]
)

ocaml_signature(
    name     = "Main_cmi",
    src      = "main.mli",
    opts     = TEZOS_PROTOCOL_DEMO_NOOPS_RAW_OPTS,
    deps     = TEZOS_PROTOCOL_DEMO_NOOPS_RAW_DEPS + [
    ]
)

ocaml_module(
    name     = "Protocol",
    struct   = "protocol.ml",
    opts     = TEZOS_PROTOCOL_DEMO_NOOPS_OPTS,
    deps     = TEZOS_PROTOCOL_DEMO_NOOPS_DEPS + [
    ]
)

ocaml_module(
    name     = "Registerer",
    struct   = "registerer.ml",
    opts     = TEZOS_EMBEDDED_PROTOCOL_DEMO_NOOPS_OPTS,
    deps     = TEZOS_EMBEDDED_PROTOCOL_DEMO_NOOPS_DEPS + [
    ]
)

########################
####  Rule Targets  ####

###########
write_file(
    name     = "write_environment.ml",
    out      = "environment.ml",
    content  = """
module Name = struct let name = "demo-noops" end
include Tezos_protocol_environment.MakeV1(Name)()
module CamlinternalFormatBasics = struct include CamlinternalFormatBasics end
""")

######## with-stdout-to ########
genrule(
    name = "__registerer.ml",
    outs  = [
        "registerer.ml"
    ],
    tools  = ["//src/lib_protocol_compiler:tezos-embedded-protocol-packer.exe"],
    cmd  = " ".join([
        "$(execpath //src/lib_protocol_compiler:tezos-embedded-protocol-packer.exe) ",
        "$(location //src/proto_demo_noops/lib_protocol:TEZOS_PROTOCOL)",
        "demo_noops",
        "> $@"
        ]),
    srcs  = [
        "//src/proto_demo_noops/lib_protocol:main.mli",
        "//src/proto_demo_noops/lib_protocol:main.ml",
        "//src/proto_demo_noops/lib_protocol:TEZOS_PROTOCOL",
    ],
)
######## with-stdout-to ########
genrule(
    name = "__functor.ml",
    outs  = [
        "functor.ml"
    ],
    tools  = ["//src/lib_protocol_compiler:tezos-protocol-compiler.tezos-protocol-packer.exe"],
    cmd  = " ".join([
        "$(execpath //src/lib_protocol_compiler:tezos-protocol-compiler.tezos-protocol-packer.exe) ",
        "$(location //src/proto_demo_noops/lib_protocol:TEZOS_PROTOCOL)",
        "> $@"
        ]),
    srcs  = [
        "//src/proto_demo_noops/lib_protocol:main.mli",
        "//src/proto_demo_noops/lib_protocol:main.ml",
        "//src/proto_demo_noops/lib_protocol:TEZOS_PROTOCOL",
    ],
)
###########
write_file(
    name     = "write_protocol.ml",
    out      = "protocol.ml",
    content  = """
module Environment = Tezos_protocol_environment_demo_noops.Environment
let hash = Tezos_crypto.Protocol_hash.of_b58check_exn "ProtoDemoNoopsDemoNoopsDemoNoopsDemoNoopsDemo6XBoYp"
let name = Environment.Name.name
include Tezos_raw_protocol_demo_noops
include Tezos_raw_protocol_demo_noops.Main
""")

################  rule  ################
## (
##   (alias runtest_sandbox)
##   (deps .tezos_protocol_demo_noops.objs/native/tezos_protocol_demo_noops.cmx)
##   (action (progn))
## )
################  rule  ################
## (
##   (alias runtest)
##   (package tezos-protocol-demo-noops)
##   (deps (alias runtest_sandbox))
##   (action (progn))
## )
######## run cmd ########
genrule(
    name = "__dune.inc.gen",
    outs  = [
        "dune.inc.gen"
    ],
    tools  = ["////src/lib_protocol_compiler:replace.exe"],
    cmd  = (),
    srcs  = [
    ],
)
## (
##   (:out "dune.inc.gen")
##   (:cmd ((:tool %{libexec:tezos-protocol-compiler:replace}) (:deps ((:_static "src/proto_demo_noops/lib_protocol" "TEZOS_PROTOCOL") (:_static "src/proto_demo_noops/lib_protocol" "main.ml") (:_generated "src/proto_demo_noops/lib_protocol" "protocol.ml") (:_generated "src/proto_demo_noops/lib_protocol" "functor.ml") (:_generated "src/proto_demo_noops/lib_protocol" "registerer.ml") (:_generated "src/proto_demo_noops/lib_protocol" "environment.ml") (:_static "src/proto_demo_noops/lib_protocol" "main.mli"))) (:args ((:_generated "src/proto_demo_noops/lib_protocol" "%{libexec:tezos-protocol-compiler:dune_protocol.template}") "dune.inc.gen" (:_generated "src/proto_demo_noops/lib_protocol" "%{libexec:tezos-protocol-compiler:final_protocol_versions}"))) (:foo #t) (:raw ((run %{libexec:tezos-protocol-compiler:replace} %{libexec:tezos-protocol-compiler:dune_protocol.template} "dune.inc.gen" %{libexec:tezos-protocol-compiler:final_protocol_versions})))))
##   (:vars ())
##   (:raw (rule (targets "dune.inc.gen") (deps TEZOS_PROTOCOL (glob_files *.ml) (glob_files *.mli)) (action (run %{libexec:tezos-protocol-compiler:replace} %{libexec:tezos-protocol-compiler:dune_protocol.template} "dune.inc.gen" %{libexec:tezos-protocol-compiler:final_protocol_versions}))))
## )
################  rule  ################
## (
##   (alias runtest_dune_template)
##   (action (diff dune.inc dune.inc.gen))
## )
