load("@obazl_rules_ocaml//ocaml:rules.bzl", "ocaml_module", "ocaml_ns_library", "ocaml_signature")

ocaml_signature(
    name = "p2p__sig",
    src = ":p2p.mli",
    opts = [
        "-open",
        "Tezos_base__TzPervasives",
        "-open",
        "Tezos_stdlib_unix",
        "-open",
        "Tezos_stdlib",
        "-open",
        "Tezos_p2p_services",
    ],
    deps = [
        ":p2p_conn",
        ":p2p_connect_handler",
        ":p2p_discovery",
        ":p2p_events",
        ":p2p_io_scheduler",
        ":p2p_maintenance",
        ":p2p_params",
        ":p2p_peer_state",
        ":p2p_point_state",
        ":p2p_pool",
        ":p2p_protocol",
        ":p2p_socket",
        ":p2p_trigger",
        ":p2p_welcome",
        "@lwt-canceler//:lwt-canceler",
        "@lwt-watcher//:lwt-watcher",
        "@ringo//:ringo",
        "@tezos//src/lib_base:Tezos_base",
        "@tezos//src/lib_p2p_services:Tezos_p2p_services",
        "@tezos//src/lib_stdlib:Tezos_stdlib",
        "@tezos//src/lib_stdlib_unix:Tezos_stdlib_unix",
    ],
)

ocaml_module(
    name = "p2p",
    opts = [
        "-open",
        "Tezos_base__TzPervasives",
        "-open",
        "Tezos_stdlib_unix",
        "-open",
        "Tezos_stdlib",
        "-open",
        "Tezos_p2p_services",
    ],
    sig = ":p2p__sig",
    struct = ":p2p.ml",
    deps = [
        ":p2p_conn",
        ":p2p_connect_handler",
        ":p2p_discovery",
        ":p2p_events",
        ":p2p_io_scheduler",
        ":p2p_maintenance",
        ":p2p_params",
        ":p2p_peer_state",
        ":p2p_point_state",
        ":p2p_pool",
        ":p2p_protocol",
        ":p2p_socket",
        ":p2p_trigger",
        ":p2p_welcome",
        "@lwt-canceler//:lwt-canceler",
        "@lwt-watcher//:lwt-watcher",
        "@ringo//:ringo",
        "@tezos//src/lib_base:Tezos_base",
        "@tezos//src/lib_p2p_services:Tezos_p2p_services",
        "@tezos//src/lib_stdlib:Tezos_stdlib",
        "@tezos//src/lib_stdlib_unix:Tezos_stdlib_unix",
    ],
)

ocaml_signature(
    name = "p2p_acl__sig",
    src = ":p2p_acl.mli",
    opts = [
        "-open",
        "Tezos_base__TzPervasives",
        "-open",
        "Tezos_stdlib_unix",
        "-open",
        "Tezos_stdlib",
        "-open",
        "Tezos_p2p_services",
    ],
    deps = [
        "@lwt-canceler//:lwt-canceler",
        "@lwt-watcher//:lwt-watcher",
        "@ringo//:ringo",
        "@tezos//src/lib_base:Tezos_base",
        "@tezos//src/lib_p2p_services:Tezos_p2p_services",
        "@tezos//src/lib_stdlib:Tezos_stdlib",
        "@tezos//src/lib_stdlib_unix:Tezos_stdlib_unix",
    ],
)

ocaml_module(
    name = "p2p_acl",
    opts = [
        "-open",
        "Tezos_base__TzPervasives",
        "-open",
        "Tezos_stdlib_unix",
        "-open",
        "Tezos_stdlib",
        "-open",
        "Tezos_p2p_services",
    ],
    sig = ":p2p_acl__sig",
    struct = ":p2p_acl.ml",
    deps = [
        "@lwt-canceler//:lwt-canceler",
        "@lwt-watcher//:lwt-watcher",
        "@ringo//:ringo",
        "@tezos//src/lib_base:Tezos_base",
        "@tezos//src/lib_p2p_services:Tezos_p2p_services",
        "@tezos//src/lib_stdlib:Tezos_stdlib",
        "@tezos//src/lib_stdlib_unix:Tezos_stdlib_unix",
    ],
)

ocaml_module(
    name = "p2p_answerer",
    opts = [
        "-open",
        "Tezos_base__TzPervasives",
        "-open",
        "Tezos_stdlib_unix",
        "-open",
        "Tezos_stdlib",
        "-open",
        "Tezos_p2p_services",
    ],
    struct = ":p2p_answerer.ml",
    deps = [
        "@lwt-canceler//:lwt-canceler",
        "@lwt-watcher//:lwt-watcher",
        "@ringo//:ringo",
        "@tezos//src/lib_base:Tezos_base",
        "@tezos//src/lib_p2p_services:Tezos_p2p_services",
        "@tezos//src/lib_stdlib:Tezos_stdlib",
        "@tezos//src/lib_stdlib_unix:Tezos_stdlib_unix",
    ],
)

ocaml_signature(
    name = "p2p_conn__sig",
    src = ":p2p_conn.mli",
    opts = [
        "-open",
        "Tezos_base__TzPervasives",
        "-open",
        "Tezos_stdlib_unix",
        "-open",
        "Tezos_stdlib",
        "-open",
        "Tezos_p2p_services",
    ],
    deps = [
        ":p2p_answerer",
        ":p2p_events",
        ":p2p_message",
        ":p2p_peer_state",
        ":p2p_point_state",
        ":p2p_socket",
        "@lwt-canceler//:lwt-canceler",
        "@lwt-watcher//:lwt-watcher",
        "@ringo//:ringo",
        "@tezos//src/lib_base:Tezos_base",
        "@tezos//src/lib_p2p_services:Tezos_p2p_services",
        "@tezos//src/lib_stdlib:Tezos_stdlib",
        "@tezos//src/lib_stdlib_unix:Tezos_stdlib_unix",
    ],
)

ocaml_module(
    name = "p2p_conn",
    opts = [
        "-open",
        "Tezos_base__TzPervasives",
        "-open",
        "Tezos_stdlib_unix",
        "-open",
        "Tezos_stdlib",
        "-open",
        "Tezos_p2p_services",
    ],
    sig = ":p2p_conn__sig",
    struct = ":p2p_conn.ml",
    deps = [
        ":p2p_answerer",
        ":p2p_events",
        ":p2p_message",
        ":p2p_peer_state",
        ":p2p_point_state",
        ":p2p_socket",
        "@lwt-canceler//:lwt-canceler",
        "@lwt-watcher//:lwt-watcher",
        "@ringo//:ringo",
        "@tezos//src/lib_base:Tezos_base",
        "@tezos//src/lib_p2p_services:Tezos_p2p_services",
        "@tezos//src/lib_stdlib:Tezos_stdlib",
        "@tezos//src/lib_stdlib_unix:Tezos_stdlib_unix",
    ],
)

ocaml_signature(
    name = "p2p_connect_handler__sig",
    src = ":p2p_connect_handler.mli",
    opts = [
        "-open",
        "Tezos_base__TzPervasives",
        "-open",
        "Tezos_stdlib_unix",
        "-open",
        "Tezos_stdlib",
        "-open",
        "Tezos_p2p_services",
    ],
    deps = [
        ":p2p_answerer",
        ":p2p_conn",
        ":p2p_events",
        ":p2p_fd",
        ":p2p_io_scheduler",
        ":p2p_message",
        ":p2p_params",
        ":p2p_peer_state",
        ":p2p_point_state",
        ":p2p_pool",
        ":p2p_socket",
        ":p2p_trigger",
        "@lwt-canceler//:lwt-canceler",
        "@lwt-watcher//:lwt-watcher",
        "@ringo//:ringo",
        "@tezos//src/lib_base:Tezos_base",
        "@tezos//src/lib_p2p_services:Tezos_p2p_services",
        "@tezos//src/lib_stdlib:Tezos_stdlib",
        "@tezos//src/lib_stdlib_unix:Tezos_stdlib_unix",
    ],
)

ocaml_module(
    name = "p2p_connect_handler",
    opts = [
        "-open",
        "Tezos_base__TzPervasives",
        "-open",
        "Tezos_stdlib_unix",
        "-open",
        "Tezos_stdlib",
        "-open",
        "Tezos_p2p_services",
    ],
    sig = ":p2p_connect_handler__sig",
    struct = ":p2p_connect_handler.ml",
    deps = [
        ":p2p_answerer",
        ":p2p_conn",
        ":p2p_events",
        ":p2p_fd",
        ":p2p_io_scheduler",
        ":p2p_message",
        ":p2p_params",
        ":p2p_peer_state",
        ":p2p_point_state",
        ":p2p_pool",
        ":p2p_socket",
        ":p2p_trigger",
        "@lwt-canceler//:lwt-canceler",
        "@lwt-watcher//:lwt-watcher",
        "@ringo//:ringo",
        "@tezos//src/lib_base:Tezos_base",
        "@tezos//src/lib_p2p_services:Tezos_p2p_services",
        "@tezos//src/lib_stdlib:Tezos_stdlib",
        "@tezos//src/lib_stdlib_unix:Tezos_stdlib_unix",
    ],
)

ocaml_signature(
    name = "p2p_directory__sig",
    src = ":p2p_directory.mli",
    opts = [
        "-open",
        "Tezos_base__TzPervasives",
        "-open",
        "Tezos_stdlib_unix",
        "-open",
        "Tezos_stdlib",
        "-open",
        "Tezos_p2p_services",
    ],
    deps = [
        ":p2p",
        ":p2p_conn",
        ":p2p_connect_handler",
        ":p2p_peer_state",
        ":p2p_point_state",
        ":p2p_pool",
        "@lwt-canceler//:lwt-canceler",
        "@lwt-watcher//:lwt-watcher",
        "@ringo//:ringo",
        "@tezos//src/lib_base:Tezos_base",
        "@tezos//src/lib_p2p_services:Tezos_p2p_services",
        "@tezos//src/lib_stdlib:Tezos_stdlib",
        "@tezos//src/lib_stdlib_unix:Tezos_stdlib_unix",
    ],
)

ocaml_module(
    name = "p2p_directory",
    opts = [
        "-open",
        "Tezos_base__TzPervasives",
        "-open",
        "Tezos_stdlib_unix",
        "-open",
        "Tezos_stdlib",
        "-open",
        "Tezos_p2p_services",
    ],
    sig = ":p2p_directory__sig",
    struct = ":p2p_directory.ml",
    deps = [
        ":p2p",
        ":p2p_conn",
        ":p2p_connect_handler",
        ":p2p_peer_state",
        ":p2p_point_state",
        ":p2p_pool",
        "@lwt-canceler//:lwt-canceler",
        "@lwt-watcher//:lwt-watcher",
        "@ringo//:ringo",
        "@tezos//src/lib_base:Tezos_base",
        "@tezos//src/lib_p2p_services:Tezos_p2p_services",
        "@tezos//src/lib_stdlib:Tezos_stdlib",
        "@tezos//src/lib_stdlib_unix:Tezos_stdlib_unix",
    ],
)

ocaml_signature(
    name = "p2p_discovery__sig",
    src = ":p2p_discovery.mli",
    opts = [
        "-open",
        "Tezos_base__TzPervasives",
        "-open",
        "Tezos_stdlib_unix",
        "-open",
        "Tezos_stdlib",
        "-open",
        "Tezos_p2p_services",
    ],
    deps = [
        ":p2p_events",
        ":p2p_pool",
        "@lwt-canceler//:lwt-canceler",
        "@lwt-watcher//:lwt-watcher",
        "@ringo//:ringo",
        "@tezos//src/lib_base:Tezos_base",
        "@tezos//src/lib_p2p_services:Tezos_p2p_services",
        "@tezos//src/lib_stdlib:Tezos_stdlib",
        "@tezos//src/lib_stdlib_unix:Tezos_stdlib_unix",
    ],
)

ocaml_module(
    name = "p2p_discovery",
    opts = [
        "-open",
        "Tezos_base__TzPervasives",
        "-open",
        "Tezos_stdlib_unix",
        "-open",
        "Tezos_stdlib",
        "-open",
        "Tezos_p2p_services",
    ],
    sig = ":p2p_discovery__sig",
    struct = ":p2p_discovery.ml",
    deps = [
        ":p2p_events",
        ":p2p_pool",
        "@lwt-canceler//:lwt-canceler",
        "@lwt-watcher//:lwt-watcher",
        "@ringo//:ringo",
        "@tezos//src/lib_base:Tezos_base",
        "@tezos//src/lib_p2p_services:Tezos_p2p_services",
        "@tezos//src/lib_stdlib:Tezos_stdlib",
        "@tezos//src/lib_stdlib_unix:Tezos_stdlib_unix",
    ],
)

ocaml_module(
    name = "p2p_events",
    opts = [
        "-open",
        "Tezos_base__TzPervasives",
        "-open",
        "Tezos_stdlib_unix",
        "-open",
        "Tezos_stdlib",
        "-open",
        "Tezos_p2p_services",
    ],
    struct = ":p2p_events.ml",
    deps = [
        "@lwt-canceler//:lwt-canceler",
        "@lwt-watcher//:lwt-watcher",
        "@ringo//:ringo",
        "@tezos//src/lib_base:Tezos_base",
        "@tezos//src/lib_p2p_services:Tezos_p2p_services",
        "@tezos//src/lib_stdlib:Tezos_stdlib",
        "@tezos//src/lib_stdlib_unix:Tezos_stdlib_unix",
    ],
)

ocaml_signature(
    name = "p2p_fd__sig",
    src = ":p2p_fd.mli",
    opts = [
        "-open",
        "Tezos_base__TzPervasives",
        "-open",
        "Tezos_stdlib_unix",
        "-open",
        "Tezos_stdlib",
        "-open",
        "Tezos_p2p_services",
    ],
    deps = [
        ":p2p_events",
        "@lwt-canceler//:lwt-canceler",
        "@lwt-watcher//:lwt-watcher",
        "@ringo//:ringo",
        "@tezos//src/lib_base:Tezos_base",
        "@tezos//src/lib_p2p_services:Tezos_p2p_services",
        "@tezos//src/lib_stdlib:Tezos_stdlib",
        "@tezos//src/lib_stdlib_unix:Tezos_stdlib_unix",
    ],
)

ocaml_module(
    name = "p2p_fd",
    opts = [
        "-open",
        "Tezos_base__TzPervasives",
        "-open",
        "Tezos_stdlib_unix",
        "-open",
        "Tezos_stdlib",
        "-open",
        "Tezos_p2p_services",
    ],
    sig = ":p2p_fd__sig",
    struct = ":p2p_fd.ml",
    deps = [
        ":p2p_events",
        "@lwt-canceler//:lwt-canceler",
        "@lwt-watcher//:lwt-watcher",
        "@ringo//:ringo",
        "@tezos//src/lib_base:Tezos_base",
        "@tezos//src/lib_p2p_services:Tezos_p2p_services",
        "@tezos//src/lib_stdlib:Tezos_stdlib",
        "@tezos//src/lib_stdlib_unix:Tezos_stdlib_unix",
    ],
)

ocaml_signature(
    name = "p2p_io_scheduler__sig",
    src = ":p2p_io_scheduler.mli",
    opts = [
        "-open",
        "Tezos_base__TzPervasives",
        "-open",
        "Tezos_stdlib_unix",
        "-open",
        "Tezos_stdlib",
        "-open",
        "Tezos_p2p_services",
    ],
    deps = [
        ":p2p_events",
        ":p2p_fd",
        "@lwt-canceler//:lwt-canceler",
        "@lwt-watcher//:lwt-watcher",
        "@ringo//:ringo",
        "@tezos//src/lib_base:Tezos_base",
        "@tezos//src/lib_p2p_services:Tezos_p2p_services",
        "@tezos//src/lib_stdlib:Tezos_stdlib",
        "@tezos//src/lib_stdlib_unix:Tezos_stdlib_unix",
    ],
)

ocaml_module(
    name = "p2p_io_scheduler",
    opts = [
        "-open",
        "Tezos_base__TzPervasives",
        "-open",
        "Tezos_stdlib_unix",
        "-open",
        "Tezos_stdlib",
        "-open",
        "Tezos_p2p_services",
    ],
    sig = ":p2p_io_scheduler__sig",
    struct = ":p2p_io_scheduler.ml",
    deps = [
        ":p2p_events",
        ":p2p_fd",
        "@lwt-canceler//:lwt-canceler",
        "@lwt-watcher//:lwt-watcher",
        "@ringo//:ringo",
        "@tezos//src/lib_base:Tezos_base",
        "@tezos//src/lib_p2p_services:Tezos_p2p_services",
        "@tezos//src/lib_stdlib:Tezos_stdlib",
        "@tezos//src/lib_stdlib_unix:Tezos_stdlib_unix",
    ],
)

ocaml_signature(
    name = "p2p_maintenance__sig",
    src = ":p2p_maintenance.mli",
    opts = [
        "-open",
        "Tezos_base__TzPervasives",
        "-open",
        "Tezos_stdlib_unix",
        "-open",
        "Tezos_stdlib",
        "-open",
        "Tezos_p2p_services",
    ],
    deps = [
        ":p2p_conn",
        ":p2p_connect_handler",
        ":p2p_discovery",
        ":p2p_events",
        ":p2p_peer_state",
        ":p2p_point_state",
        ":p2p_pool",
        ":p2p_trigger",
        "@lwt-canceler//:lwt-canceler",
        "@lwt-watcher//:lwt-watcher",
        "@ringo//:ringo",
        "@tezos//src/lib_base:Tezos_base",
        "@tezos//src/lib_p2p_services:Tezos_p2p_services",
        "@tezos//src/lib_stdlib:Tezos_stdlib",
        "@tezos//src/lib_stdlib_unix:Tezos_stdlib_unix",
    ],
)

ocaml_module(
    name = "p2p_maintenance",
    opts = [
        "-open",
        "Tezos_base__TzPervasives",
        "-open",
        "Tezos_stdlib_unix",
        "-open",
        "Tezos_stdlib",
        "-open",
        "Tezos_p2p_services",
    ],
    sig = ":p2p_maintenance__sig",
    struct = ":p2p_maintenance.ml",
    deps = [
        ":p2p_conn",
        ":p2p_connect_handler",
        ":p2p_discovery",
        ":p2p_events",
        ":p2p_peer_state",
        ":p2p_point_state",
        ":p2p_pool",
        ":p2p_trigger",
        "@lwt-canceler//:lwt-canceler",
        "@lwt-watcher//:lwt-watcher",
        "@ringo//:ringo",
        "@tezos//src/lib_base:Tezos_base",
        "@tezos//src/lib_p2p_services:Tezos_p2p_services",
        "@tezos//src/lib_stdlib:Tezos_stdlib",
        "@tezos//src/lib_stdlib_unix:Tezos_stdlib_unix",
    ],
)

ocaml_signature(
    name = "p2p_message__sig",
    src = ":p2p_message.mli",
    opts = [
        "-open",
        "Tezos_base__TzPervasives",
        "-open",
        "Tezos_stdlib_unix",
        "-open",
        "Tezos_stdlib",
        "-open",
        "Tezos_p2p_services",
    ],
    deps = [
        ":p2p_params",
        "@lwt-canceler//:lwt-canceler",
        "@lwt-watcher//:lwt-watcher",
        "@ringo//:ringo",
        "@tezos//src/lib_base:Tezos_base",
        "@tezos//src/lib_p2p_services:Tezos_p2p_services",
        "@tezos//src/lib_stdlib:Tezos_stdlib",
        "@tezos//src/lib_stdlib_unix:Tezos_stdlib_unix",
    ],
)

ocaml_module(
    name = "p2p_message",
    opts = [
        "-open",
        "Tezos_base__TzPervasives",
        "-open",
        "Tezos_stdlib_unix",
        "-open",
        "Tezos_stdlib",
        "-open",
        "Tezos_p2p_services",
    ],
    sig = ":p2p_message__sig",
    struct = ":p2p_message.ml",
    deps = [
        ":p2p_params",
        "@lwt-canceler//:lwt-canceler",
        "@lwt-watcher//:lwt-watcher",
        "@ringo//:ringo",
        "@tezos//src/lib_base:Tezos_base",
        "@tezos//src/lib_p2p_services:Tezos_p2p_services",
        "@tezos//src/lib_stdlib:Tezos_stdlib",
        "@tezos//src/lib_stdlib_unix:Tezos_stdlib_unix",
    ],
)

ocaml_module(
    name = "p2p_params",
    opts = [
        "-open",
        "Tezos_base__TzPervasives",
        "-open",
        "Tezos_stdlib_unix",
        "-open",
        "Tezos_stdlib",
        "-open",
        "Tezos_p2p_services",
    ],
    struct = ":p2p_params.ml",
    deps = [
        "@lwt-canceler//:lwt-canceler",
        "@lwt-watcher//:lwt-watcher",
        "@ringo//:ringo",
        "@tezos//src/lib_base:Tezos_base",
        "@tezos//src/lib_p2p_services:Tezos_p2p_services",
        "@tezos//src/lib_stdlib:Tezos_stdlib",
        "@tezos//src/lib_stdlib_unix:Tezos_stdlib_unix",
    ],
)

ocaml_signature(
    name = "p2p_peer_state__sig",
    src = ":p2p_peer_state.mli",
    opts = [
        "-open",
        "Tezos_base__TzPervasives",
        "-open",
        "Tezos_stdlib_unix",
        "-open",
        "Tezos_stdlib",
        "-open",
        "Tezos_p2p_services",
    ],
    deps = [
        "@lwt-canceler//:lwt-canceler",
        "@lwt-watcher//:lwt-watcher",
        "@ringo//:ringo",
        "@tezos//src/lib_base:Tezos_base",
        "@tezos//src/lib_p2p_services:Tezos_p2p_services",
        "@tezos//src/lib_stdlib:Tezos_stdlib",
        "@tezos//src/lib_stdlib_unix:Tezos_stdlib_unix",
    ],
)

ocaml_module(
    name = "p2p_peer_state",
    opts = [
        "-open",
        "Tezos_base__TzPervasives",
        "-open",
        "Tezos_stdlib_unix",
        "-open",
        "Tezos_stdlib",
        "-open",
        "Tezos_p2p_services",
    ],
    sig = ":p2p_peer_state__sig",
    struct = ":p2p_peer_state.ml",
    deps = [
        "@lwt-canceler//:lwt-canceler",
        "@lwt-watcher//:lwt-watcher",
        "@ringo//:ringo",
        "@tezos//src/lib_base:Tezos_base",
        "@tezos//src/lib_p2p_services:Tezos_p2p_services",
        "@tezos//src/lib_stdlib:Tezos_stdlib",
        "@tezos//src/lib_stdlib_unix:Tezos_stdlib_unix",
    ],
)

ocaml_signature(
    name = "p2p_point_state__sig",
    src = ":p2p_point_state.mli",
    opts = [
        "-open",
        "Tezos_base__TzPervasives",
        "-open",
        "Tezos_stdlib_unix",
        "-open",
        "Tezos_stdlib",
        "-open",
        "Tezos_p2p_services",
    ],
    deps = [
        "@lwt-canceler//:lwt-canceler",
        "@lwt-watcher//:lwt-watcher",
        "@ringo//:ringo",
        "@tezos//src/lib_base:Tezos_base",
        "@tezos//src/lib_p2p_services:Tezos_p2p_services",
        "@tezos//src/lib_stdlib:Tezos_stdlib",
        "@tezos//src/lib_stdlib_unix:Tezos_stdlib_unix",
    ],
)

ocaml_module(
    name = "p2p_point_state",
    opts = [
        "-open",
        "Tezos_base__TzPervasives",
        "-open",
        "Tezos_stdlib_unix",
        "-open",
        "Tezos_stdlib",
        "-open",
        "Tezos_p2p_services",
    ],
    sig = ":p2p_point_state__sig",
    struct = ":p2p_point_state.ml",
    deps = [
        "@lwt-canceler//:lwt-canceler",
        "@lwt-watcher//:lwt-watcher",
        "@ringo//:ringo",
        "@tezos//src/lib_base:Tezos_base",
        "@tezos//src/lib_p2p_services:Tezos_p2p_services",
        "@tezos//src/lib_stdlib:Tezos_stdlib",
        "@tezos//src/lib_stdlib_unix:Tezos_stdlib_unix",
    ],
)

ocaml_signature(
    name = "p2p_pool__sig",
    src = ":p2p_pool.mli",
    opts = [
        "-open",
        "Tezos_base__TzPervasives",
        "-open",
        "Tezos_stdlib_unix",
        "-open",
        "Tezos_stdlib",
        "-open",
        "Tezos_p2p_services",
    ],
    deps = [
        ":p2p_acl",
        ":p2p_conn",
        ":p2p_events",
        ":p2p_params",
        ":p2p_peer_state",
        ":p2p_point_state",
        ":p2p_trigger",
        "@lwt-canceler//:lwt-canceler",
        "@lwt-watcher//:lwt-watcher",
        "@ringo//:ringo",
        "@tezos//src/lib_base:Tezos_base",
        "@tezos//src/lib_p2p_services:Tezos_p2p_services",
        "@tezos//src/lib_stdlib:Tezos_stdlib",
        "@tezos//src/lib_stdlib_unix:Tezos_stdlib_unix",
    ],
)

ocaml_module(
    name = "p2p_pool",
    opts = [
        "-open",
        "Tezos_base__TzPervasives",
        "-open",
        "Tezos_stdlib_unix",
        "-open",
        "Tezos_stdlib",
        "-open",
        "Tezos_p2p_services",
    ],
    sig = ":p2p_pool__sig",
    struct = ":p2p_pool.ml",
    deps = [
        ":p2p_acl",
        ":p2p_conn",
        ":p2p_events",
        ":p2p_params",
        ":p2p_peer_state",
        ":p2p_point_state",
        ":p2p_trigger",
        "@lwt-canceler//:lwt-canceler",
        "@lwt-watcher//:lwt-watcher",
        "@ringo//:ringo",
        "@tezos//src/lib_base:Tezos_base",
        "@tezos//src/lib_p2p_services:Tezos_p2p_services",
        "@tezos//src/lib_stdlib:Tezos_stdlib",
        "@tezos//src/lib_stdlib_unix:Tezos_stdlib_unix",
    ],
)

ocaml_signature(
    name = "p2p_protocol__sig",
    src = ":p2p_protocol.mli",
    opts = [
        "-open",
        "Tezos_base__TzPervasives",
        "-open",
        "Tezos_stdlib_unix",
        "-open",
        "Tezos_stdlib",
        "-open",
        "Tezos_p2p_services",
    ],
    deps = [
        ":p2p_answerer",
        ":p2p_conn",
        ":p2p_events",
        ":p2p_point_state",
        ":p2p_pool",
        "@lwt-canceler//:lwt-canceler",
        "@lwt-watcher//:lwt-watcher",
        "@ringo//:ringo",
        "@tezos//src/lib_base:Tezos_base",
        "@tezos//src/lib_p2p_services:Tezos_p2p_services",
        "@tezos//src/lib_stdlib:Tezos_stdlib",
        "@tezos//src/lib_stdlib_unix:Tezos_stdlib_unix",
    ],
)

ocaml_module(
    name = "p2p_protocol",
    opts = [
        "-open",
        "Tezos_base__TzPervasives",
        "-open",
        "Tezos_stdlib_unix",
        "-open",
        "Tezos_stdlib",
        "-open",
        "Tezos_p2p_services",
    ],
    sig = ":p2p_protocol__sig",
    struct = ":p2p_protocol.ml",
    deps = [
        ":p2p_answerer",
        ":p2p_conn",
        ":p2p_events",
        ":p2p_point_state",
        ":p2p_pool",
        "@lwt-canceler//:lwt-canceler",
        "@lwt-watcher//:lwt-watcher",
        "@ringo//:ringo",
        "@tezos//src/lib_base:Tezos_base",
        "@tezos//src/lib_p2p_services:Tezos_p2p_services",
        "@tezos//src/lib_stdlib:Tezos_stdlib",
        "@tezos//src/lib_stdlib_unix:Tezos_stdlib_unix",
    ],
)

ocaml_signature(
    name = "p2p_socket__sig",
    src = ":p2p_socket.mli",
    opts = [
        "-open",
        "Tezos_base__TzPervasives",
        "-open",
        "Tezos_stdlib_unix",
        "-open",
        "Tezos_stdlib",
        "-open",
        "Tezos_p2p_services",
    ],
    deps = [
        ":p2p_events",
        ":p2p_io_scheduler",
        ":p2p_params",
        "@lwt-canceler//:lwt-canceler",
        "@lwt-watcher//:lwt-watcher",
        "@ringo//:ringo",
        "@tezos//src/lib_base:Tezos_base",
        "@tezos//src/lib_p2p_services:Tezos_p2p_services",
        "@tezos//src/lib_stdlib:Tezos_stdlib",
        "@tezos//src/lib_stdlib_unix:Tezos_stdlib_unix",
    ],
)

ocaml_module(
    name = "p2p_socket",
    opts = [
        "-open",
        "Tezos_base__TzPervasives",
        "-open",
        "Tezos_stdlib_unix",
        "-open",
        "Tezos_stdlib",
        "-open",
        "Tezos_p2p_services",
    ],
    sig = ":p2p_socket__sig",
    struct = ":p2p_socket.ml",
    deps = [
        ":p2p_events",
        ":p2p_io_scheduler",
        ":p2p_params",
        "@lwt-canceler//:lwt-canceler",
        "@lwt-watcher//:lwt-watcher",
        "@ringo//:ringo",
        "@tezos//src/lib_base:Tezos_base",
        "@tezos//src/lib_p2p_services:Tezos_p2p_services",
        "@tezos//src/lib_stdlib:Tezos_stdlib",
        "@tezos//src/lib_stdlib_unix:Tezos_stdlib_unix",
    ],
)

ocaml_signature(
    name = "p2p_trigger__sig",
    src = ":p2p_trigger.mli",
    opts = [
        "-open",
        "Tezos_base__TzPervasives",
        "-open",
        "Tezos_stdlib_unix",
        "-open",
        "Tezos_stdlib",
        "-open",
        "Tezos_p2p_services",
    ],
    deps = [
        "@lwt-canceler//:lwt-canceler",
        "@lwt-watcher//:lwt-watcher",
        "@ringo//:ringo",
        "@tezos//src/lib_base:Tezos_base",
        "@tezos//src/lib_p2p_services:Tezos_p2p_services",
        "@tezos//src/lib_stdlib:Tezos_stdlib",
        "@tezos//src/lib_stdlib_unix:Tezos_stdlib_unix",
    ],
)

ocaml_module(
    name = "p2p_trigger",
    opts = [
        "-open",
        "Tezos_base__TzPervasives",
        "-open",
        "Tezos_stdlib_unix",
        "-open",
        "Tezos_stdlib",
        "-open",
        "Tezos_p2p_services",
    ],
    sig = ":p2p_trigger__sig",
    struct = ":p2p_trigger.ml",
    deps = [
        "@lwt-canceler//:lwt-canceler",
        "@lwt-watcher//:lwt-watcher",
        "@ringo//:ringo",
        "@tezos//src/lib_base:Tezos_base",
        "@tezos//src/lib_p2p_services:Tezos_p2p_services",
        "@tezos//src/lib_stdlib:Tezos_stdlib",
        "@tezos//src/lib_stdlib_unix:Tezos_stdlib_unix",
    ],
)

ocaml_signature(
    name = "p2p_welcome__sig",
    src = ":p2p_welcome.mli",
    opts = [
        "-open",
        "Tezos_base__TzPervasives",
        "-open",
        "Tezos_stdlib_unix",
        "-open",
        "Tezos_stdlib",
        "-open",
        "Tezos_p2p_services",
    ],
    deps = [
        ":p2p_connect_handler",
        ":p2p_events",
        ":p2p_fd",
        "@lwt-canceler//:lwt-canceler",
        "@lwt-watcher//:lwt-watcher",
        "@ringo//:ringo",
        "@tezos//src/lib_base:Tezos_base",
        "@tezos//src/lib_p2p_services:Tezos_p2p_services",
        "@tezos//src/lib_stdlib:Tezos_stdlib",
        "@tezos//src/lib_stdlib_unix:Tezos_stdlib_unix",
    ],
)

ocaml_module(
    name = "p2p_welcome",
    opts = [
        "-open",
        "Tezos_base__TzPervasives",
        "-open",
        "Tezos_stdlib_unix",
        "-open",
        "Tezos_stdlib",
        "-open",
        "Tezos_p2p_services",
    ],
    sig = ":p2p_welcome__sig",
    struct = ":p2p_welcome.ml",
    deps = [
        ":p2p_connect_handler",
        ":p2p_events",
        ":p2p_fd",
        "@lwt-canceler//:lwt-canceler",
        "@lwt-watcher//:lwt-watcher",
        "@ringo//:ringo",
        "@tezos//src/lib_base:Tezos_base",
        "@tezos//src/lib_p2p_services:Tezos_p2p_services",
        "@tezos//src/lib_stdlib:Tezos_stdlib",
        "@tezos//src/lib_stdlib_unix:Tezos_stdlib_unix",
    ],
)

# okapi:auto
# okapi:public_name tezos-p2p
ocaml_ns_library(
    name = "Tezos_p2p",
    submodules = [
        ":p2p",
        ":p2p_acl",
        ":p2p_answerer",
        ":p2p_conn",
        ":p2p_connect_handler",
        ":p2p_directory",
        ":p2p_discovery",
        ":p2p_events",
        ":p2p_fd",
        ":p2p_io_scheduler",
        ":p2p_maintenance",
        ":p2p_message",
        ":p2p_params",
        ":p2p_peer_state",
        ":p2p_point_state",
        ":p2p_pool",
        ":p2p_protocol",
        ":p2p_socket",
        ":p2p_trigger",
        ":p2p_welcome",
    ],
    visibility = ["//visibility:public"],
)
