load("@obazl_rules_ocaml//ocaml:rules.bzl",
    "ocaml_archive",
    "ocaml_module",
    "ocaml_ns_archive",
    "ocaml_signature",
)

###############################################
########### Archive/Library Targets ###########

######## tezos-p2p ########
TEZOS_P2P_OPTS = [
    "-open", "Tezos_base__TzPervasives",
    "-open", "Tezos_p2p_services",
    "-open", "Tezos_stdlib_unix",
    "-open", "Tezos_stdlib",
]

TEZOS_P2P_DEPS = [
    "//src/lib_base:tezos-base",
    "//src/lib_p2p_services:tezos-p2p-services",
    "//src/lib_stdlib_unix:tezos-stdlib-unix",
    "//src/lib_stdlib:tezos-stdlib",
    "@lwt-canceler//:lwt-canceler",
    "@lwt-watcher//:lwt-watcher",
    "@ringo//:ringo",
]

ocaml_ns_archive(
    name       = "tezos-p2p",
    ns         = "Tezos_p2p",
    visibility = ["//visibility:public"],
    submodules = [
        ":P2p",
        ":P2p_acl",
        ":P2p_answerer",
        ":P2p_conn",
        ":P2p_connect_handler",
        ":P2p_directory",
        ":P2p_discovery",
        ":P2p_events",
        ":P2p_fd",
        ":P2p_io_scheduler",
        ":P2p_maintenance",
        ":P2p_message",
        ":P2p_params",
        ":P2p_peer_state",
        ":P2p_point_state",
        ":P2p_pool",
        ":P2p_protocol",
        ":P2p_socket",
        ":P2p_trigger",
        ":P2p_welcome",
    ],
)

#############################
####  Singleton Targets  ####

ocaml_module(
    name     = "P2p",
    struct   = "p2p.ml",
    sig      = ":P2p_cmi",
    opts     = TEZOS_P2P_OPTS,
    deps     = TEZOS_P2P_DEPS + [
       ":P2p_welcome",
       ":P2p_trigger",
       ":P2p_socket",
       ":P2p_protocol",
       ":P2p_pool",
       ":P2p_point_state",
       ":P2p_peer_state",
       ":P2p_params",
       ":P2p_maintenance",
       ":P2p_io_scheduler",
       ":P2p_events",
       ":P2p_discovery",
       ":P2p_connect_handler",
       ":P2p_conn",
    ]
)

ocaml_signature(
    name     = "P2p_cmi",
    src      = "p2p.mli",
    opts     = TEZOS_P2P_OPTS,
    deps     = TEZOS_P2P_DEPS + [
       ":P2p_pool",
       ":P2p_point_state",
       ":P2p_peer_state",
       ":P2p_params",
       ":P2p_connect_handler",
       ":P2p_conn",
    ]
)

ocaml_module(
    name     = "P2p_acl",
    struct   = "p2p_acl.ml",
    sig      = ":P2p_acl_cmi",
    opts     = TEZOS_P2P_OPTS,
    deps     = TEZOS_P2P_DEPS + [
    ]
)

ocaml_signature(
    name     = "P2p_acl_cmi",
    src      = "p2p_acl.mli",
    opts     = TEZOS_P2P_OPTS,
    deps     = TEZOS_P2P_DEPS + [
    ]
)

ocaml_module(
    name     = "P2p_answerer",
    struct   = "p2p_answerer.ml",
    opts     = TEZOS_P2P_OPTS,
    deps     = TEZOS_P2P_DEPS + [
    ]
)

ocaml_module(
    name     = "P2p_conn",
    struct   = "p2p_conn.ml",
    sig      = ":P2p_conn_cmi",
    opts     = TEZOS_P2P_OPTS,
    deps     = TEZOS_P2P_DEPS + [
       ":P2p_socket",
       ":P2p_point_state",
       ":P2p_peer_state",
       ":P2p_message",
       ":P2p_events",
       ":P2p_answerer",
    ]
)

ocaml_signature(
    name     = "P2p_conn_cmi",
    src      = "p2p_conn.mli",
    opts     = TEZOS_P2P_OPTS,
    deps     = TEZOS_P2P_DEPS + [
       ":P2p_socket",
       ":P2p_point_state",
       ":P2p_peer_state",
       ":P2p_message",
       ":P2p_answerer",
    ]
)

ocaml_module(
    name     = "P2p_connect_handler",
    struct   = "p2p_connect_handler.ml",
    sig      = ":P2p_connect_handler_cmi",
    opts     = TEZOS_P2P_OPTS,
    deps     = TEZOS_P2P_DEPS + [
       ":P2p_trigger",
       ":P2p_socket",
       ":P2p_pool",
       ":P2p_point_state",
       ":P2p_peer_state",
       ":P2p_params",
       ":P2p_message",
       ":P2p_io_scheduler",
       ":P2p_fd",
       ":P2p_events",
       ":P2p_conn",
       ":P2p_answerer",
    ]
)

ocaml_signature(
    name     = "P2p_connect_handler_cmi",
    src      = "p2p_connect_handler.mli",
    opts     = TEZOS_P2P_OPTS,
    deps     = TEZOS_P2P_DEPS + [
       ":P2p_trigger",
       ":P2p_pool",
       ":P2p_point_state",
       ":P2p_peer_state",
       ":P2p_params",
       ":P2p_io_scheduler",
       ":P2p_fd",
       ":P2p_conn",
       ":P2p_answerer",
    ]
)

ocaml_module(
    name     = "P2p_directory",
    struct   = "p2p_directory.ml",
    sig      = ":P2p_directory_cmi",
    opts     = TEZOS_P2P_OPTS,
    deps     = TEZOS_P2P_DEPS + [
       ":P2p_pool",
       ":P2p_point_state",
       ":P2p_peer_state",
       ":P2p_connect_handler",
       ":P2p_conn",
       ":P2p",
    ]
)

ocaml_signature(
    name     = "P2p_directory_cmi",
    src      = "p2p_directory.mli",
    opts     = TEZOS_P2P_OPTS,
    deps     = TEZOS_P2P_DEPS + [
       ":P2p",
    ]
)

ocaml_module(
    name     = "P2p_discovery",
    struct   = "p2p_discovery.ml",
    sig      = ":P2p_discovery_cmi",
    opts     = TEZOS_P2P_OPTS,
    deps     = TEZOS_P2P_DEPS + [
       ":P2p_pool",
       ":P2p_events",
    ]
)

ocaml_signature(
    name     = "P2p_discovery_cmi",
    src      = "p2p_discovery.mli",
    opts     = TEZOS_P2P_OPTS,
    deps     = TEZOS_P2P_DEPS + [
       ":P2p_pool",
       ":P2p_point_state",
       ":P2p_peer_state",
       ":P2p_conn",
    ]
)

ocaml_module(
    name     = "P2p_events",
    struct   = "p2p_events.ml",
    opts     = TEZOS_P2P_OPTS,
    deps     = TEZOS_P2P_DEPS + [
    ]
)

ocaml_module(
    name     = "P2p_fd",
    struct   = "p2p_fd.ml",
    sig      = ":P2p_fd_cmi",
    opts     = TEZOS_P2P_OPTS,
    deps     = TEZOS_P2P_DEPS + [
       ":P2p_events",
    ]
)

ocaml_signature(
    name     = "P2p_fd_cmi",
    src      = "p2p_fd.mli",
    opts     = TEZOS_P2P_OPTS,
    deps     = TEZOS_P2P_DEPS + [
    ]
)

ocaml_module(
    name     = "P2p_io_scheduler",
    struct   = "p2p_io_scheduler.ml",
    sig      = ":P2p_io_scheduler_cmi",
    opts     = TEZOS_P2P_OPTS,
    deps     = TEZOS_P2P_DEPS + [
       ":P2p_fd",
       ":P2p_events",
    ]
)

ocaml_signature(
    name     = "P2p_io_scheduler_cmi",
    src      = "p2p_io_scheduler.mli",
    opts     = TEZOS_P2P_OPTS,
    deps     = TEZOS_P2P_DEPS + [
       ":P2p_fd",
    ]
)

ocaml_module(
    name     = "P2p_maintenance",
    struct   = "p2p_maintenance.ml",
    sig      = ":P2p_maintenance_cmi",
    opts     = TEZOS_P2P_OPTS,
    deps     = TEZOS_P2P_DEPS + [
       ":P2p_trigger",
       ":P2p_pool",
       ":P2p_point_state",
       ":P2p_peer_state",
       ":P2p_events",
       ":P2p_discovery",
       ":P2p_connect_handler",
       ":P2p_conn",
    ]
)

ocaml_signature(
    name     = "P2p_maintenance_cmi",
    src      = "p2p_maintenance.mli",
    opts     = TEZOS_P2P_OPTS,
    deps     = TEZOS_P2P_DEPS + [
       ":P2p_trigger",
       ":P2p_pool",
       ":P2p_point_state",
       ":P2p_peer_state",
       ":P2p_discovery",
       ":P2p_connect_handler",
       ":P2p_conn",
    ]
)

ocaml_module(
    name     = "P2p_message",
    struct   = "p2p_message.ml",
    sig      = ":P2p_message_cmi",
    opts     = TEZOS_P2P_OPTS,
    deps     = TEZOS_P2P_DEPS + [
       ":P2p_params",
    ]
)

ocaml_signature(
    name     = "P2p_message_cmi",
    src      = "p2p_message.mli",
    opts     = TEZOS_P2P_OPTS,
    deps     = TEZOS_P2P_DEPS + [
       ":P2p_params",
    ]
)

ocaml_module(
    name     = "P2p_params",
    struct   = "p2p_params.ml",
    opts     = TEZOS_P2P_OPTS,
    deps     = TEZOS_P2P_DEPS + [
    ]
)

ocaml_module(
    name     = "P2p_peer_state",
    struct   = "p2p_peer_state.ml",
    sig      = ":P2p_peer_state_cmi",
    opts     = TEZOS_P2P_OPTS,
    deps     = TEZOS_P2P_DEPS + [
    ]
)

ocaml_signature(
    name     = "P2p_peer_state_cmi",
    src      = "p2p_peer_state.mli",
    opts     = TEZOS_P2P_OPTS,
    deps     = TEZOS_P2P_DEPS + [
    ]
)

ocaml_module(
    name     = "P2p_point_state",
    struct   = "p2p_point_state.ml",
    sig      = ":P2p_point_state_cmi",
    opts     = TEZOS_P2P_OPTS,
    deps     = TEZOS_P2P_DEPS + [
    ]
)

ocaml_signature(
    name     = "P2p_point_state_cmi",
    src      = "p2p_point_state.mli",
    opts     = TEZOS_P2P_OPTS,
    deps     = TEZOS_P2P_DEPS + [
    ]
)

ocaml_module(
    name     = "P2p_pool",
    struct   = "p2p_pool.ml",
    sig      = ":P2p_pool_cmi",
    opts     = TEZOS_P2P_OPTS,
    deps     = TEZOS_P2P_DEPS + [
       ":P2p_trigger",
       ":P2p_point_state",
       ":P2p_peer_state",
       ":P2p_params",
       ":P2p_events",
       ":P2p_conn",
       ":P2p_acl",
    ]
)

ocaml_signature(
    name     = "P2p_pool_cmi",
    src      = "p2p_pool.mli",
    opts     = TEZOS_P2P_OPTS,
    deps     = TEZOS_P2P_DEPS + [
       ":P2p_trigger",
       ":P2p_point_state",
       ":P2p_peer_state",
       ":P2p_params",
       ":P2p_conn",
    ]
)

ocaml_module(
    name     = "P2p_protocol",
    struct   = "p2p_protocol.ml",
    sig      = ":P2p_protocol_cmi",
    opts     = TEZOS_P2P_OPTS,
    deps     = TEZOS_P2P_DEPS + [
       ":P2p_pool",
       ":P2p_point_state",
       ":P2p_peer_state",
       ":P2p_events",
       ":P2p_conn",
       ":P2p_answerer",
    ]
)

ocaml_signature(
    name     = "P2p_protocol_cmi",
    src      = "p2p_protocol.mli",
    opts     = TEZOS_P2P_OPTS,
    deps     = TEZOS_P2P_DEPS + [
       ":P2p_pool",
       ":P2p_point_state",
       ":P2p_peer_state",
       ":P2p_conn",
       ":P2p_answerer",
    ]
)

ocaml_module(
    name     = "P2p_socket",
    struct   = "p2p_socket.ml",
    sig      = ":P2p_socket_cmi",
    opts     = TEZOS_P2P_OPTS,
    deps     = TEZOS_P2P_DEPS + [
       ":P2p_params",
       ":P2p_io_scheduler",
       ":P2p_fd",
       ":P2p_events",
    ]
)

ocaml_signature(
    name     = "P2p_socket_cmi",
    src      = "p2p_socket.mli",
    opts     = TEZOS_P2P_OPTS,
    deps     = TEZOS_P2P_DEPS + [
       ":P2p_params",
       ":P2p_io_scheduler",
    ]
)

ocaml_module(
    name     = "P2p_trigger",
    struct   = "p2p_trigger.ml",
    sig      = ":P2p_trigger_cmi",
    opts     = TEZOS_P2P_OPTS,
    deps     = TEZOS_P2P_DEPS + [
    ]
)

ocaml_signature(
    name     = "P2p_trigger_cmi",
    src      = "p2p_trigger.mli",
    opts     = TEZOS_P2P_OPTS,
    deps     = TEZOS_P2P_DEPS + [
    ]
)

ocaml_module(
    name     = "P2p_welcome",
    struct   = "p2p_welcome.ml",
    sig      = ":P2p_welcome_cmi",
    opts     = TEZOS_P2P_OPTS,
    deps     = TEZOS_P2P_DEPS + [
       ":P2p_fd",
       ":P2p_events",
       ":P2p_connect_handler",
    ]
)

ocaml_signature(
    name     = "P2p_welcome_cmi",
    src      = "p2p_welcome.mli",
    opts     = TEZOS_P2P_OPTS,
    deps     = TEZOS_P2P_DEPS + [
       ":P2p_connect_handler",
    ]
)

