load("@obazl_rules_ocaml//ocaml:rules.bzl",
     "ocaml_executable",
     "ocaml_module",
     "ocaml_ns_library")

ocaml_module(
    name = "validator",
    opts = [
        "-open",
        "Tezos_base__TzPervasives",
        "-open",
        "Tezos_context",
        "-open",
        "Tezos_stdlib_unix",
        "-open",
        "Tezos_shell",
        "-open",
        "Tezos_shell_services",
        "-open",
        "Tezos_validation",
        "-open",
        "Tezos_protocol_updater",
        "-open",
        "Tezos_shell_context",
    ],
    struct = ":validator.ml",
    deps = [
        "@tezos//src/lib_base:Tezos_base",
        "@tezos//src/lib_base/unix:Tezos_base_unix",
        "@tezos//src/lib_context:Tezos_context",
        "@tezos//src/lib_protocol_environment:Tezos_shell_context",
        "@tezos//src/lib_protocol_environment:lib-tezos_protocol_environment",
        "@tezos//src/lib_protocol_updater:Tezos_protocol_updater",
        "@tezos//src/lib_shell:Tezos_shell",
        "@tezos//src/lib_stdlib_unix:Tezos_stdlib_unix",
        "@tezos//src/lib_validation:Tezos_validation",
    ],
)

# okapi:public_name tezos-validator
ocaml_ns_library(
    name = "Tezos_validator",
    submodules = [":validator"],
    visibility = ["//visibility:public"],
)

ocaml_module(
    name = "main_validator",
    opts = [
        "-open",
        "Tezos_base__TzPervasives",
        "-open",
        "Tezos_context",
        "-open",
        "Tezos_stdlib_unix",
        "-open",
        "Tezos_shell",
        "-open",
        "Tezos_shell_services",
        "-open",
        "Tezos_validation",
        "-open",
        "Tezos_protocol_updater",
        "-open",
        "Tezos_validator",
        "-linkall",
    ],
    struct = ":main_validator.ml",
    deps = [
        ":validator",
        "@tezos_validator//:tezos_validator",
    ],
)

# okapi:public_name tezos-validator
ocaml_executable(
    name = "exe-tezos-validator",
    main = "main_validator",
    visibility = ["//visibility:public"],
    deps = [":main_validator"],
)
