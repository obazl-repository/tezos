load("@obazl_rules_ocaml//ocaml:rules.bzl",
    "ocaml_archive",
    "ocaml_module",
    "ocaml_ns_archive",
    "ocaml_signature",
)

###############################################
########### Archive/Library Targets ###########

######## tezos-client-commands ########
TEZOS_CLIENT_COMMANDS_OPTS = [
    "-open", "Data_encoding",
    "-open", "Tezos_base__TzPervasives",
    "-open", "Tezos_clic_unix",
    "-open", "Tezos_client_base",
    "-open", "Tezos_p2p_services",
    "-open", "Tezos_rpc",
    "-open", "Tezos_shell_services",
]

TEZOS_CLIENT_COMMANDS_DEPS = [
    "//src/lib_base:tezos-base",
    "//src/lib_clic/unix:tezos-clic.unix",
    "//src/lib_client_base:tezos-client-base",
    "//src/lib_p2p_services:tezos-p2p-services",
    "//src/lib_rpc:tezos-rpc",
    "//src/lib_shell_services:tezos-shell-services",
    "//src/lib_signer_backends:tezos-signer-backends",
    "//src/lib_stdlib_unix:tezos-stdlib-unix",
    "@data-encoding//:data-encoding",
]

ocaml_ns_archive(
    name       = "tezos-client-commands",
    ns         = "Tezos_client_commands",
    visibility = ["//visibility:public"],
    submodules = [
        ":Client_admin_commands",
        ":Client_commands",
        ":Client_event_logging_commands",
        ":Client_helpers_commands",
        ":Client_keys_commands",
        ":Client_p2p_commands",
        ":Client_report_commands",
    ],
)

#############################
####  Singleton Targets  ####

ocaml_module(
    name     = "Client_admin_commands",
    struct   = "client_admin_commands.ml",
    sig      = ":Client_admin_commands_cmi",
    opts     = TEZOS_CLIENT_COMMANDS_OPTS,
    deps     = TEZOS_CLIENT_COMMANDS_DEPS + [
    ]
)

ocaml_signature(
    name     = "Client_admin_commands_cmi",
    src      = "client_admin_commands.mli",
    opts     = TEZOS_CLIENT_COMMANDS_OPTS,
    deps     = TEZOS_CLIENT_COMMANDS_DEPS + [
    ]
)

ocaml_module(
    name     = "Client_commands",
    struct   = "client_commands.ml",
    sig      = ":Client_commands_cmi",
    opts     = TEZOS_CLIENT_COMMANDS_OPTS,
    deps     = TEZOS_CLIENT_COMMANDS_DEPS + [
    ]
)

ocaml_signature(
    name     = "Client_commands_cmi",
    src      = "client_commands.mli",
    opts     = TEZOS_CLIENT_COMMANDS_OPTS,
    deps     = TEZOS_CLIENT_COMMANDS_DEPS + [
    ]
)

ocaml_module(
    name     = "Client_event_logging_commands",
    struct   = "client_event_logging_commands.ml",
    sig      = ":Client_event_logging_commands_cmi",
    opts     = TEZOS_CLIENT_COMMANDS_OPTS,
    deps     = TEZOS_CLIENT_COMMANDS_DEPS + [
    ]
)

ocaml_signature(
    name     = "Client_event_logging_commands_cmi",
    src      = "client_event_logging_commands.mli",
    opts     = TEZOS_CLIENT_COMMANDS_OPTS,
    deps     = TEZOS_CLIENT_COMMANDS_DEPS + [
       ":Client_commands",
    ]
)

ocaml_module(
    name     = "Client_helpers_commands",
    struct   = "client_helpers_commands.ml",
    sig      = ":Client_helpers_commands_cmi",
    opts     = TEZOS_CLIENT_COMMANDS_OPTS,
    deps     = TEZOS_CLIENT_COMMANDS_DEPS + [
    ]
)

ocaml_signature(
    name     = "Client_helpers_commands_cmi",
    src      = "client_helpers_commands.mli",
    opts     = TEZOS_CLIENT_COMMANDS_OPTS,
    deps     = TEZOS_CLIENT_COMMANDS_DEPS + [
       ":Client_commands",
    ]
)

ocaml_module(
    name     = "Client_keys_commands",
    struct   = "client_keys_commands.ml",
    sig      = ":Client_keys_commands_cmi",
    opts     = TEZOS_CLIENT_COMMANDS_OPTS,
    deps     = TEZOS_CLIENT_COMMANDS_DEPS + [
    ]
)

ocaml_signature(
    name     = "Client_keys_commands_cmi",
    src      = "client_keys_commands.mli",
    opts     = TEZOS_CLIENT_COMMANDS_OPTS,
    deps     = TEZOS_CLIENT_COMMANDS_DEPS + [
    ]
)

ocaml_module(
    name     = "Client_p2p_commands",
    struct   = "client_p2p_commands.ml",
    sig      = ":Client_p2p_commands_cmi",
    opts     = TEZOS_CLIENT_COMMANDS_OPTS,
    deps     = TEZOS_CLIENT_COMMANDS_DEPS + [
    ]
)

ocaml_signature(
    name     = "Client_p2p_commands_cmi",
    src      = "client_p2p_commands.mli",
    opts     = TEZOS_CLIENT_COMMANDS_OPTS,
    deps     = TEZOS_CLIENT_COMMANDS_DEPS + [
       ":Client_commands",
    ]
)

ocaml_module(
    name     = "Client_report_commands",
    struct   = "client_report_commands.ml",
    sig      = ":Client_report_commands_cmi",
    opts     = TEZOS_CLIENT_COMMANDS_OPTS,
    deps     = TEZOS_CLIENT_COMMANDS_DEPS + [
    ]
)

ocaml_signature(
    name     = "Client_report_commands_cmi",
    src      = "client_report_commands.mli",
    opts     = TEZOS_CLIENT_COMMANDS_OPTS,
    deps     = TEZOS_CLIENT_COMMANDS_DEPS + [
    ]
)

