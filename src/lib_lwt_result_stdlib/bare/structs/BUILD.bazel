load("@obazl_rules_ocaml//ocaml:rules.bzl",
     "ocaml_module",
     "ocaml_ns_archive",
     "ocaml_ns_library",
     "ocaml_signature")

OPTS = [
]

ocaml_signature(
    name = "hashtbl__sig",
    src = ":hashtbl.mli",
    opts = OPTS,
    deps = [
        ":monad",
        ":seq",
        "@lwt//:lwt",
        "@tezos//src/lib_lwt_result_stdlib/bare/sigs:Bare_sigs",
    ],
)

ocaml_module(
    name = "hashtbl",
    sig = ":hashtbl__sig",
    struct = ":hashtbl.ml",
    opts = OPTS,
    deps = [
        ":monad",
        ":seq",
        "@lwt//:lwt",
        "@tezos//src/lib_lwt_result_stdlib/bare/sigs:Bare_sigs",
    ],
)

ocaml_signature(
    name = "list__sig",
    src = ":list.mli",
    opts = OPTS,
    deps = [
        ":monad",
        "@lwt//:lwt",
        "@tezos//src/lib_lwt_result_stdlib/bare/sigs:Bare_sigs",
    ],
)

ocaml_module(
    name = "list",
    sig = ":list__sig",
    struct = ":list.ml",
    opts = OPTS,
    deps = [
        ":monad",
        "@lwt//:lwt",
        "@tezos//src/lib_lwt_result_stdlib/bare/sigs:Bare_sigs",
    ],
)

ocaml_signature(
    name = "map__sig",
    src = ":map.mli",
    opts = OPTS,
    deps = [
        ":seq",
        "@lwt//:lwt",
        "@tezos//src/lib_lwt_result_stdlib/bare/sigs:Bare_sigs",
    ],
)

ocaml_module(
    name = "map",
    sig = ":map__sig",
    struct = ":map.ml",
    opts = OPTS,
    deps = [
        ":seq",
        "@lwt//:lwt",
        "@tezos//src/lib_lwt_result_stdlib/bare/sigs:Bare_sigs",
    ],
)

ocaml_signature(
    name = "monad__sig",
    src = ":monad.mli",
    opts = OPTS,
    deps = [
        "@lwt//:lwt",
        "@tezos//src/lib_lwt_result_stdlib/bare/sigs:Bare_sigs",
    ],
)

ocaml_module(
    name = "monad",
    sig = ":monad__sig",
    struct = ":monad.ml",
    opts = OPTS,
    deps = [
        "@lwt//:lwt",
        "@tezos//src/lib_lwt_result_stdlib/bare/sigs:Bare_sigs",
    ],
)

ocaml_signature(
    name = "option__sig",
    src = ":option.mli",
    opts = OPTS,
    deps = [
        ":monad",
        ":result",
        "@lwt//:lwt",
        "@tezos//src/lib_lwt_result_stdlib/bare/sigs:Bare_sigs",
    ],
)

ocaml_module(
    name = "option",
    sig = ":option__sig",
    struct = ":option.ml",
    opts = OPTS,
    deps = [
        ":monad",
        ":result",
        "@lwt//:lwt",
        "@tezos//src/lib_lwt_result_stdlib/bare/sigs:Bare_sigs",
    ],
)

ocaml_signature(
    name = "result__sig",
    src = ":result.mli",
    opts = OPTS,
    deps = [
        "@lwt//:lwt",
        "@tezos//src/lib_lwt_result_stdlib/bare/sigs:Bare_sigs",
    ],
)

ocaml_module(
    name = "result",
    sig = ":result__sig",
    struct = ":result.ml",
    opts = OPTS,
    deps = [
        "@lwt//:lwt",
        "@tezos//src/lib_lwt_result_stdlib/bare/sigs:Bare_sigs",
    ],
)

ocaml_signature(
    name = "seq__sig",
    src = ":seq.mli",
    opts = OPTS,
    deps = [
        ":monad",
        "@lwt//:lwt",
        "@tezos//src/lib_lwt_result_stdlib/bare/sigs:Bare_sigs",
    ],
)

ocaml_module(
    name = "seq",
    sig = ":seq__sig",
    struct = ":seq.ml",
    opts = OPTS,
    deps = [
        ":monad",
        "@lwt//:lwt",
        "@tezos//src/lib_lwt_result_stdlib/bare/sigs:Bare_sigs",
    ],
)

ocaml_signature(
    name = "seq_e__sig",
    src = ":seq_e.mli",
    opts = OPTS,
    deps = [
        ":monad",
        ":result",
        "@lwt//:lwt",
        "@tezos//src/lib_lwt_result_stdlib/bare/sigs:Bare_sigs",
    ],
)

ocaml_module(
    name = "seq_e",
    sig = ":seq_e__sig",
    struct = ":seq_e.ml",
    opts = OPTS,
    deps = [
        ":monad",
        ":result",
        "@lwt//:lwt",
        "@tezos//src/lib_lwt_result_stdlib/bare/sigs:Bare_sigs",
    ],
)

ocaml_signature(
    name = "seq_es__sig",
    src = ":seq_es.mli",
    opts = OPTS,
    deps = [
        ":monad",
        ":seq_e",
        ":seq_s",
        "@lwt//:lwt",
        "@tezos//src/lib_lwt_result_stdlib/bare/sigs:Bare_sigs",
    ],
)

ocaml_module(
    name = "seq_es",
    sig = ":seq_es__sig",
    struct = ":seq_es.ml",
    opts = OPTS,
    deps = [
        ":monad",
        ":seq_e",
        ":seq_s",
        "@lwt//:lwt",
        "@tezos//src/lib_lwt_result_stdlib/bare/sigs:Bare_sigs",
    ],
)

ocaml_signature(
    name = "seq_s__sig",
    src = ":seq_s.mli",
    opts = OPTS,
    deps = [
        ":monad",
        ":result",
        "@lwt//:lwt",
        "@tezos//src/lib_lwt_result_stdlib/bare/sigs:Bare_sigs",
    ],
)

ocaml_module(
    name = "seq_s",
    sig = ":seq_s__sig",
    struct = ":seq_s.ml",
    opts = OPTS,
    deps = [
        ":monad",
        ":result",
        "@lwt//:lwt",
        "@tezos//src/lib_lwt_result_stdlib/bare/sigs:Bare_sigs",
    ],
)

ocaml_signature(
    name = "set__sig",
    src = ":set.mli",
    opts = OPTS,
    deps = [
        ":seq",
        "@lwt//:lwt",
        "@tezos//src/lib_lwt_result_stdlib/bare/sigs:Bare_sigs",
    ],
)

ocaml_module(
    name = "set",
    sig = ":set__sig",
    struct = ":set.ml",
    opts = OPTS,
    deps = [
        ":seq",
        "@lwt//:lwt",
        "@tezos//src/lib_lwt_result_stdlib/bare/sigs:Bare_sigs",
    ],
)

ocaml_signature(
    name = "withExceptions__sig",
    src = ":withExceptions.mli",
    opts = OPTS,
    deps = [
        "@lwt//:lwt",
        "@tezos//src/lib_lwt_result_stdlib/bare/sigs:Bare_sigs",
    ],
)

ocaml_module(
    name = "withExceptions",
    sig = ":withExceptions__sig",
    struct = ":withExceptions.ml",
    opts = OPTS,
    deps = [
        "@lwt//:lwt",
        "@tezos//src/lib_lwt_result_stdlib/bare/sigs:Bare_sigs",
    ],
)

# okapi:auto
# okapi:public_name tezos-lwt-result-stdlib.bare.structs
ocaml_ns_archive(
#ocaml_ns_library(
    name = "Bare_structs",
    submodules = [
        ":hashtbl",
        ":list",
        ":map",
        ":monad",
        ":option",
        ":result",
        ":seq",
        ":seq_e",
        ":seq_es",
        ":seq_s",
        ":set",
        ":withExceptions",
    ],
    visibility = ["//visibility:public"],
)
