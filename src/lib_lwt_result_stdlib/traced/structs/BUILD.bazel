load("@obazl_rules_ocaml//ocaml:rules.bzl",
    "ocaml_archive",
    "ocaml_module",
    "ocaml_ns_archive",
    "ocaml_signature",
)

###############################################
########### Archive/Library Targets ###########

######## tezos-lwt-result-stdlib.traced.structs ########
TEZOS_LWT_RESULT_STDLIB_TRACED_STRUCTS_DEPS = [
    "//src/lib_lwt_result_stdlib/bare/structs:tezos-lwt-result-stdlib.bare.structs",
    "//src/lib_lwt_result_stdlib/traced/sigs:tezos-lwt-result-stdlib.traced.sigs",
    "@lwt//:lwt",
]

ocaml_ns_archive(
    name       = "tezos-lwt-result-stdlib.traced.structs",
    ns         = "Traced_structs",
    visibility = ["//visibility:public"],
    submodules = [
        ":Hashtbl",
        ":List",
        ":Map",
        ":Monad",
        ":Seq",
        ":Seq_e",
        ":Seq_es",
        ":Seq_s",
        ":Set",
        ":Structs",
    ],
)

#############################
####  Singleton Targets  ####

ocaml_module(
    name     = "Hashtbl",
    struct   = "hashtbl.ml",
    sig      = ":Hashtbl_cmi",
    deps     = TEZOS_LWT_RESULT_STDLIB_TRACED_STRUCTS_DEPS + [
    ]
)

ocaml_signature(
    name     = "Hashtbl_cmi",
    src      = "hashtbl.mli",
    deps     = TEZOS_LWT_RESULT_STDLIB_TRACED_STRUCTS_DEPS + [
    ]
)

ocaml_module(
    name     = "List",
    struct   = "list.ml",
    sig      = ":List_cmi",
    deps     = TEZOS_LWT_RESULT_STDLIB_TRACED_STRUCTS_DEPS + [
    ]
)

ocaml_signature(
    name     = "List_cmi",
    src      = "list.mli",
    deps     = TEZOS_LWT_RESULT_STDLIB_TRACED_STRUCTS_DEPS + [
    ]
)

ocaml_module(
    name     = "Map",
    struct   = "map.ml",
    sig      = ":Map_cmi",
    deps     = TEZOS_LWT_RESULT_STDLIB_TRACED_STRUCTS_DEPS + [
    ]
)

ocaml_signature(
    name     = "Map_cmi",
    src      = "map.mli",
    deps     = TEZOS_LWT_RESULT_STDLIB_TRACED_STRUCTS_DEPS + [
    ]
)

ocaml_module(
    name     = "Monad",
    struct   = "monad.ml",
    sig      = ":Monad_cmi",
    deps     = TEZOS_LWT_RESULT_STDLIB_TRACED_STRUCTS_DEPS + [
    ]
)

ocaml_signature(
    name     = "Monad_cmi",
    src      = "monad.mli",
    deps     = TEZOS_LWT_RESULT_STDLIB_TRACED_STRUCTS_DEPS + [
    ]
)

ocaml_module(
    name     = "Seq",
    struct   = "seq.ml",
    sig      = ":Seq_cmi",
    deps     = TEZOS_LWT_RESULT_STDLIB_TRACED_STRUCTS_DEPS + [
    ]
)

ocaml_signature(
    name     = "Seq_cmi",
    src      = "seq.mli",
    deps     = TEZOS_LWT_RESULT_STDLIB_TRACED_STRUCTS_DEPS + [
    ]
)

ocaml_module(
    name     = "Seq_e",
    struct   = "seq_e.ml",
    sig      = ":Seq_e_cmi",
    deps     = TEZOS_LWT_RESULT_STDLIB_TRACED_STRUCTS_DEPS + [
    ]
)

ocaml_signature(
    name     = "Seq_e_cmi",
    src      = "seq_e.mli",
    deps     = TEZOS_LWT_RESULT_STDLIB_TRACED_STRUCTS_DEPS + [
    ]
)

ocaml_module(
    name     = "Seq_es",
    struct   = "seq_es.ml",
    sig      = ":Seq_es_cmi",
    deps     = TEZOS_LWT_RESULT_STDLIB_TRACED_STRUCTS_DEPS + [
    ]
)

ocaml_signature(
    name     = "Seq_es_cmi",
    src      = "seq_es.mli",
    deps     = TEZOS_LWT_RESULT_STDLIB_TRACED_STRUCTS_DEPS + [
    ]
)

ocaml_module(
    name     = "Seq_s",
    struct   = "seq_s.ml",
    sig      = ":Seq_s_cmi",
    deps     = TEZOS_LWT_RESULT_STDLIB_TRACED_STRUCTS_DEPS + [
    ]
)

ocaml_signature(
    name     = "Seq_s_cmi",
    src      = "seq_s.mli",
    deps     = TEZOS_LWT_RESULT_STDLIB_TRACED_STRUCTS_DEPS + [
    ]
)

ocaml_module(
    name     = "Set",
    struct   = "set.ml",
    sig      = ":Set_cmi",
    deps     = TEZOS_LWT_RESULT_STDLIB_TRACED_STRUCTS_DEPS + [
    ]
)

ocaml_signature(
    name     = "Set_cmi",
    src      = "set.mli",
    deps     = TEZOS_LWT_RESULT_STDLIB_TRACED_STRUCTS_DEPS + [
    ]
)

ocaml_module(
    name     = "Structs",
    struct   = "structs.ml",
    deps     = TEZOS_LWT_RESULT_STDLIB_TRACED_STRUCTS_DEPS + [
       ":Set",
       ":Seq_s",
       ":Seq_es",
       ":Seq_e",
       ":Seq",
       ":Monad",
       ":Map",
       ":List",
       ":Hashtbl",
    ]
)

