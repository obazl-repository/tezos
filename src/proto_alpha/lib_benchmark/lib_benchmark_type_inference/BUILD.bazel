load("@obazl_rules_ocaml//ocaml:rules.bzl", "ocaml_module", "ocaml_ns_library", "ocaml_signature")

ocaml_module(
    name = "int_map",
    deps_opam = [
        "tezos-protocol-alpha",
        "hashcons",
    ],
    opts = [
        "-open",
        "Tezos_stdlib",
        "-open",
        "Tezos_error_monad",
        "-open",
        "Tezos_micheline",
        "-open",
        "Tezos_micheline_rewriting",
    ],
    struct = ":int_map.ml",
    deps = [
        "@tezos//src/lib_benchmark/lib_micheline_rewriting:#Tezos_micheline_rewriting",
        "@tezos//src/lib_crypto:#Tezos_crypto",
        "@tezos//src/lib_error_monad:#Tezos_error_monad",
        "@tezos//src/lib_micheline:#Tezos_micheline",
        "@tezos//src/lib_stdlib:#Tezos_stdlib",
    ],
)

ocaml_module(
    name = "mikhailsky_prim",
    deps_opam = [
        "tezos-protocol-alpha",
        "hashcons",
    ],
    opts = [
        "-open",
        "Tezos_stdlib",
        "-open",
        "Tezos_error_monad",
        "-open",
        "Tezos_micheline",
        "-open",
        "Tezos_micheline_rewriting",
    ],
    struct = ":mikhailsky_prim.ml",
    deps = [
        "@tezos//src/lib_benchmark/lib_micheline_rewriting:#Tezos_micheline_rewriting",
        "@tezos//src/lib_crypto:#Tezos_crypto",
        "@tezos//src/lib_error_monad:#Tezos_error_monad",
        "@tezos//src/lib_micheline:#Tezos_micheline",
        "@tezos//src/lib_stdlib:#Tezos_stdlib",
    ],
)

ocaml_module(
    name = "monads",
    deps_opam = [
        "tezos-protocol-alpha",
        "hashcons",
    ],
    opts = [
        "-open",
        "Tezos_stdlib",
        "-open",
        "Tezos_error_monad",
        "-open",
        "Tezos_micheline",
        "-open",
        "Tezos_micheline_rewriting",
    ],
    struct = ":monads.ml",
    deps = [
        ":stores",
        "@tezos//src/lib_benchmark/lib_micheline_rewriting:#Tezos_micheline_rewriting",
        "@tezos//src/lib_crypto:#Tezos_crypto",
        "@tezos//src/lib_error_monad:#Tezos_error_monad",
        "@tezos//src/lib_micheline:#Tezos_micheline",
        "@tezos//src/lib_stdlib:#Tezos_stdlib",
    ],
)

ocaml_module(
    name = "stores",
    deps_opam = [
        "tezos-protocol-alpha",
        "hashcons",
    ],
    opts = [
        "-open",
        "Tezos_stdlib",
        "-open",
        "Tezos_error_monad",
        "-open",
        "Tezos_micheline",
        "-open",
        "Tezos_micheline_rewriting",
    ],
    struct = ":stores.ml",
    deps = [
        "@tezos//src/lib_benchmark/lib_micheline_rewriting:#Tezos_micheline_rewriting",
        "@tezos//src/lib_crypto:#Tezos_crypto",
        "@tezos//src/lib_error_monad:#Tezos_error_monad",
        "@tezos//src/lib_micheline:#Tezos_micheline",
        "@tezos//src/lib_stdlib:#Tezos_stdlib",
    ],
)

ocaml_module(
    name = "uf",
    deps_opam = [
        "tezos-protocol-alpha",
        "hashcons",
    ],
    opts = [
        "-open",
        "Tezos_stdlib",
        "-open",
        "Tezos_error_monad",
        "-open",
        "Tezos_micheline",
        "-open",
        "Tezos_micheline_rewriting",
    ],
    struct = ":uf.ml",
    deps = [
        ":int_map",
        ":monads",
        ":stores",
        "@tezos//src/lib_benchmark/lib_micheline_rewriting:#Tezos_micheline_rewriting",
        "@tezos//src/lib_crypto:#Tezos_crypto",
        "@tezos//src/lib_error_monad:#Tezos_error_monad",
        "@tezos//src/lib_micheline:#Tezos_micheline",
        "@tezos//src/lib_stdlib:#Tezos_stdlib",
    ],
)

ocaml_signature(
    name = "inference_sig",
    src = ":inference.mli",
    deps_opam = [
        "tezos-protocol-alpha",
        "hashcons",
    ],
    opts = [
        "-open",
        "Tezos_stdlib",
        "-open",
        "Tezos_error_monad",
        "-open",
        "Tezos_micheline",
        "-open",
        "Tezos_micheline_rewriting",
    ],
    deps = [
        ":int_map",
        ":mikhailsky",
        ":mikhailsky_prim",
        ":monads",
        ":stores",
        ":type",
        ":uf",
        "@tezos//src/lib_benchmark/lib_micheline_rewriting:#Tezos_micheline_rewriting",
        "@tezos//src/lib_crypto:#Tezos_crypto",
        "@tezos//src/lib_error_monad:#Tezos_error_monad",
        "@tezos//src/lib_micheline:#Tezos_micheline",
        "@tezos//src/lib_stdlib:#Tezos_stdlib",
    ],
)

ocaml_module(
    name = "inference",
    deps_opam = [
        "tezos-protocol-alpha",
        "hashcons",
    ],
    opts = [
        "-open",
        "Tezos_stdlib",
        "-open",
        "Tezos_error_monad",
        "-open",
        "Tezos_micheline",
        "-open",
        "Tezos_micheline_rewriting",
    ],
    sig = ":inference_sig",
    struct = ":inference.ml",
    deps = [
        ":int_map",
        ":mikhailsky",
        ":mikhailsky_prim",
        ":monads",
        ":stores",
        ":type",
        ":uf",
        "@tezos//src/lib_benchmark/lib_micheline_rewriting:#Tezos_micheline_rewriting",
        "@tezos//src/lib_crypto:#Tezos_crypto",
        "@tezos//src/lib_error_monad:#Tezos_error_monad",
        "@tezos//src/lib_micheline:#Tezos_micheline",
        "@tezos//src/lib_stdlib:#Tezos_stdlib",
    ],
)

ocaml_signature(
    name = "mikhailsky_sig",
    src = ":mikhailsky.mli",
    deps_opam = [
        "tezos-protocol-alpha",
        "hashcons",
    ],
    opts = [
        "-open",
        "Tezos_stdlib",
        "-open",
        "Tezos_error_monad",
        "-open",
        "Tezos_micheline",
        "-open",
        "Tezos_micheline_rewriting",
    ],
    deps = [
        ":mikhailsky_prim",
        ":type",
        "@tezos//src/lib_benchmark/lib_micheline_rewriting:#Tezos_micheline_rewriting",
        "@tezos//src/lib_crypto:#Tezos_crypto",
        "@tezos//src/lib_error_monad:#Tezos_error_monad",
        "@tezos//src/lib_micheline:#Tezos_micheline",
        "@tezos//src/lib_stdlib:#Tezos_stdlib",
    ],
)

ocaml_module(
    name = "mikhailsky",
    deps_opam = [
        "tezos-protocol-alpha",
        "hashcons",
    ],
    opts = [
        "-open",
        "Tezos_stdlib",
        "-open",
        "Tezos_error_monad",
        "-open",
        "Tezos_micheline",
        "-open",
        "Tezos_micheline_rewriting",
    ],
    sig = ":mikhailsky_sig",
    struct = ":mikhailsky.ml",
    deps = [
        ":mikhailsky_prim",
        ":type",
        "@tezos//src/lib_benchmark/lib_micheline_rewriting:#Tezos_micheline_rewriting",
        "@tezos//src/lib_crypto:#Tezos_crypto",
        "@tezos//src/lib_error_monad:#Tezos_error_monad",
        "@tezos//src/lib_micheline:#Tezos_micheline",
        "@tezos//src/lib_stdlib:#Tezos_stdlib",
    ],
)

ocaml_signature(
    name = "type_sig",
    src = ":type.mli",
    deps_opam = [
        "tezos-protocol-alpha",
        "hashcons",
    ],
    opts = [
        "-open",
        "Tezos_stdlib",
        "-open",
        "Tezos_error_monad",
        "-open",
        "Tezos_micheline",
        "-open",
        "Tezos_micheline_rewriting",
    ],
    deps = [
        "@tezos//src/lib_benchmark/lib_micheline_rewriting:#Tezos_micheline_rewriting",
        "@tezos//src/lib_crypto:#Tezos_crypto",
        "@tezos//src/lib_error_monad:#Tezos_error_monad",
        "@tezos//src/lib_micheline:#Tezos_micheline",
        "@tezos//src/lib_stdlib:#Tezos_stdlib",
    ],
)

ocaml_module(
    name = "type",
    deps_opam = [
        "tezos-protocol-alpha",
        "hashcons",
    ],
    opts = [
        "-open",
        "Tezos_stdlib",
        "-open",
        "Tezos_error_monad",
        "-open",
        "Tezos_micheline",
        "-open",
        "Tezos_micheline_rewriting",
    ],
    sig = ":type_sig",
    struct = ":type.ml",
    deps = [
        "@tezos//src/lib_benchmark/lib_micheline_rewriting:#Tezos_micheline_rewriting",
        "@tezos//src/lib_crypto:#Tezos_crypto",
        "@tezos//src/lib_error_monad:#Tezos_error_monad",
        "@tezos//src/lib_micheline:#Tezos_micheline",
        "@tezos//src/lib_stdlib:#Tezos_stdlib",
    ],
)

# okapi:auto
ocaml_ns_library(
    name = "#Tezos_benchmark_type_inference_alpha",
    submodules = [
        ":inference",
        ":int_map",
        ":mikhailsky",
        ":mikhailsky_prim",
        ":monads",
        ":stores",
        ":type",
        ":uf",
    ],
    visibility = ["//visibility:public"],
)
