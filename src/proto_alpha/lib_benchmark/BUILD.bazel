load("@obazl_rules_ocaml//ocaml:rules.bzl",
    "ocaml_archive",
    "ocaml_module",
    "ocaml_ns_archive",
)

###############################################
########### Archive/Library Targets ###########

######## tezos-benchmark-alpha ########
TEZOS_BENCHMARK_ALPHA_OPTS = [
    "-open", "Tezos_alpha_test_helpers",
    "-open", "Tezos_base",
    "-open", "Tezos_benchmark",
    "-open", "Tezos_benchmark_type_inference_alpha",
    "-open", "Tezos_crypto",
    "-open", "Tezos_error_monad",
    "-open", "Tezos_micheline",
    "-open", "Tezos_micheline_rewriting",
    "-open", "Tezos_protocol_alpha",
    "-open", "Tezos_stdlib",
]

TEZOS_BENCHMARK_ALPHA_DEPS = [
    "//src/lib_base:tezos-base",
    "//src/lib_benchmark/lib_micheline_rewriting:tezos-micheline-rewriting",
    "//src/lib_benchmark:tezos-benchmark",
    "//src/proto_alpha/lib_benchmark/lib_benchmark_type_inference:tezos-benchmark-type-inference-alpha",
    "//src/proto_alpha/lib_parameters:tezos-protocol-alpha-parameters",
    "//src/proto_alpha/lib_protocol/test/helpers:tezos-alpha-test-helpers",
    "//src/proto_alpha/lib_protocol:tezos-protocol-alpha",
    "//vendors/benchmark-utils:benchmark-utils",
    "//vendors/statz/lib:staTz",
    "@hashcons//:hashcons",
]

ocaml_ns_archive(
    name       = "tezos-benchmark-alpha",
    ns         = "Tezos_benchmark_alpha",
    visibility = ["//visibility:public"],
    submodules = [
        ":Autocomp",
        ":Execution_context",
        ":Generators",
        ":Kernel",
        ":Michelson",
        ":Michelson_samplers",
        ":Michelson_samplers_base",
        ":Michelson_samplers_parameters",
        ":Rules",
        ":Sampler",
        ":Sampling_helpers",
        ":State_space",
    ],
)

#############################
####  Singleton Targets  ####

ocaml_module(
    name     = "Autocomp",
    struct   = "autocomp.ml",
    opts     = TEZOS_BENCHMARK_ALPHA_OPTS,
    deps     = TEZOS_BENCHMARK_ALPHA_DEPS + [
       ":Sampling_helpers",
       ":Michelson_samplers_parameters",
       ":Michelson_samplers_base",
       ":Kernel",
    ]
)

ocaml_module(
    name     = "Execution_context",
    struct   = "execution_context.ml",
    opts     = TEZOS_BENCHMARK_ALPHA_OPTS,
    deps     = TEZOS_BENCHMARK_ALPHA_DEPS + [
    ]
)

ocaml_module(
    name     = "Generators",
    struct   = "generators.ml",
    opts     = TEZOS_BENCHMARK_ALPHA_OPTS,
    deps     = TEZOS_BENCHMARK_ALPHA_DEPS + [
       ":State_space",
       ":Sampler",
       ":Rules",
       ":Michelson_samplers_base",
       ":Michelson",
       ":Autocomp",
    ]
)

ocaml_module(
    name     = "Kernel",
    struct   = "kernel.ml",
    opts     = TEZOS_BENCHMARK_ALPHA_OPTS,
    deps     = TEZOS_BENCHMARK_ALPHA_DEPS + [
    ]
)

ocaml_module(
    name     = "Michelson",
    struct   = "michelson.ml",
    opts     = TEZOS_BENCHMARK_ALPHA_OPTS,
    deps     = TEZOS_BENCHMARK_ALPHA_DEPS + [
       ":Kernel",
       ":Autocomp",
    ]
)

ocaml_module(
    name     = "Michelson_samplers",
    struct   = "michelson_samplers.ml",
    opts     = TEZOS_BENCHMARK_ALPHA_OPTS,
    deps     = TEZOS_BENCHMARK_ALPHA_DEPS + [
       ":Sampling_helpers",
       ":Michelson_samplers_parameters",
       ":Michelson_samplers_base",
       ":Execution_context",
    ]
)

ocaml_module(
    name     = "Michelson_samplers_base",
    struct   = "michelson_samplers_base.ml",
    opts     = TEZOS_BENCHMARK_ALPHA_OPTS,
    deps     = TEZOS_BENCHMARK_ALPHA_DEPS + [
       ":Sampling_helpers",
       ":Michelson_samplers_parameters",
    ]
)

ocaml_module(
    name     = "Michelson_samplers_parameters",
    struct   = "michelson_samplers_parameters.ml",
    opts     = TEZOS_BENCHMARK_ALPHA_OPTS,
    deps     = TEZOS_BENCHMARK_ALPHA_DEPS + [
    ]
)

ocaml_module(
    name     = "Rules",
    struct   = "rules.ml",
    opts     = TEZOS_BENCHMARK_ALPHA_OPTS,
    deps     = TEZOS_BENCHMARK_ALPHA_DEPS + [
       ":State_space",
       ":Michelson_samplers_base",
       ":Kernel",
    ]
)

ocaml_module(
    name     = "Sampler",
    struct   = "sampler.ml",
    opts     = TEZOS_BENCHMARK_ALPHA_OPTS,
    deps     = TEZOS_BENCHMARK_ALPHA_DEPS + [
       ":State_space",
       ":Rules",
       ":Kernel",
    ]
)

ocaml_module(
    name     = "Sampling_helpers",
    struct   = "sampling_helpers.ml",
    opts     = TEZOS_BENCHMARK_ALPHA_OPTS,
    deps     = TEZOS_BENCHMARK_ALPHA_DEPS + [
    ]
)

ocaml_module(
    name     = "State_space",
    struct   = "state_space.ml",
    opts     = TEZOS_BENCHMARK_ALPHA_OPTS,
    deps     = TEZOS_BENCHMARK_ALPHA_DEPS + [
    ]
)

