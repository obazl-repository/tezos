load("@obazl_rules_ocaml//ocaml:rules.bzl", "ocaml_module", "ocaml_ns_archive", "ocaml_signature")

ocaml_signature(
    name = "connection_metadata__sig",
    src = ":connection_metadata.mli",
    opts = [
        "-linkall",
        "-open",
        "Tezos_base__TzPervasives",
    ],
    deps = ["@tezos//src/lib_base:#Tezos_base"],
)

ocaml_module(
    name = "connection_metadata",
    opts = [
        "-linkall",
        "-open",
        "Tezos_base__TzPervasives",
    ],
    sig = ":connection_metadata__sig",
    struct = ":connection_metadata.ml",
    deps = ["@tezos//src/lib_base:#Tezos_base"],
)

ocaml_signature(
    name = "p2p_errors__sig",
    src = ":p2p_errors.mli",
    opts = [
        "-linkall",
        "-open",
        "Tezos_base__TzPervasives",
    ],
    deps = ["@tezos//src/lib_base:#Tezos_base"],
)

ocaml_module(
    name = "p2p_errors",
    opts = [
        "-linkall",
        "-open",
        "Tezos_base__TzPervasives",
    ],
    sig = ":p2p_errors__sig",
    struct = ":p2p_errors.ml",
    deps = ["@tezos//src/lib_base:#Tezos_base"],
)

ocaml_signature(
    name = "p2p_services__sig",
    src = ":p2p_services.mli",
    opts = [
        "-linkall",
        "-open",
        "Tezos_base__TzPervasives",
    ],
    deps = [
        ":connection_metadata",
        ":peer_metadata",
        "@tezos//src/lib_base:#Tezos_base",
    ],
)

ocaml_module(
    name = "p2p_services",
    opts = [
        "-linkall",
        "-open",
        "Tezos_base__TzPervasives",
    ],
    sig = ":p2p_services__sig",
    struct = ":p2p_services.ml",
    deps = [
        ":connection_metadata",
        ":peer_metadata",
        "@tezos//src/lib_base:#Tezos_base",
    ],
)

ocaml_signature(
    name = "peer_metadata__sig",
    src = ":peer_metadata.mli",
    opts = [
        "-linkall",
        "-open",
        "Tezos_base__TzPervasives",
    ],
    deps = ["@tezos//src/lib_base:#Tezos_base"],
)

ocaml_module(
    name = "peer_metadata",
    opts = [
        "-linkall",
        "-open",
        "Tezos_base__TzPervasives",
    ],
    sig = ":peer_metadata__sig",
    struct = ":peer_metadata.ml",
    deps = ["@tezos//src/lib_base:#Tezos_base"],
)

# okapi:auto
# okapi:public_name tezos-p2p-services
ocaml_ns_archive(
    name = "#Tezos_p2p_services",
    submodules = [
        ":connection_metadata",
        ":p2p_errors",
        ":p2p_services",
        ":peer_metadata",
    ],
    visibility = ["//visibility:public"],
)
