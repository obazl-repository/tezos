load("@obazl_rules_ocaml//ocaml:rules.bzl",
    "ocaml_archive",
    "ocaml_module",
    "ocaml_ns_archive",
    "ocaml_signature",
)

###############################################
########### Archive/Library Targets ###########

######## tezos-p2p-services ########
TEZOS_P2P_SERVICES_OPTS = [
    "-linkall",
    "-open", "Tezos_base__TzPervasives",
]

TEZOS_P2P_SERVICES_DEPS = [
    "//src/lib_base:tezos-base",
]

ocaml_ns_archive(
    name       = "tezos-p2p-services",
    ns         = "Tezos_p2p_services",
    visibility = ["//visibility:public"],
    submodules = [
        ":Connection_metadata",
        ":P2p_errors",
        ":P2p_services",
        ":Peer_metadata",
    ],
)

#############################
####  Singleton Targets  ####

ocaml_module(
    name     = "Connection_metadata",
    struct   = "connection_metadata.ml",
    sig      = ":Connection_metadata_cmi",
    opts     = TEZOS_P2P_SERVICES_OPTS,
    deps     = TEZOS_P2P_SERVICES_DEPS + [
    ]
)

ocaml_signature(
    name     = "Connection_metadata_cmi",
    src      = "connection_metadata.mli",
    opts     = TEZOS_P2P_SERVICES_OPTS,
    deps     = TEZOS_P2P_SERVICES_DEPS + [
    ]
)

ocaml_module(
    name     = "P2p_errors",
    struct   = "p2p_errors.ml",
    sig      = ":P2p_errors_cmi",
    opts     = TEZOS_P2P_SERVICES_OPTS,
    deps     = TEZOS_P2P_SERVICES_DEPS + [
    ]
)

ocaml_signature(
    name     = "P2p_errors_cmi",
    src      = "p2p_errors.mli",
    opts     = TEZOS_P2P_SERVICES_OPTS,
    deps     = TEZOS_P2P_SERVICES_DEPS + [
    ]
)

ocaml_module(
    name     = "P2p_services",
    struct   = "p2p_services.ml",
    sig      = ":P2p_services_cmi",
    opts     = TEZOS_P2P_SERVICES_OPTS,
    deps     = TEZOS_P2P_SERVICES_DEPS + [
       ":Peer_metadata",
       ":Connection_metadata",
    ]
)

ocaml_signature(
    name     = "P2p_services_cmi",
    src      = "p2p_services.mli",
    opts     = TEZOS_P2P_SERVICES_OPTS,
    deps     = TEZOS_P2P_SERVICES_DEPS + [
       ":Peer_metadata",
       ":Connection_metadata",
    ]
)

ocaml_module(
    name     = "Peer_metadata",
    struct   = "peer_metadata.ml",
    sig      = ":Peer_metadata_cmi",
    opts     = TEZOS_P2P_SERVICES_OPTS,
    deps     = TEZOS_P2P_SERVICES_DEPS + [
    ]
)

ocaml_signature(
    name     = "Peer_metadata_cmi",
    src      = "peer_metadata.mli",
    opts     = TEZOS_P2P_SERVICES_OPTS,
    deps     = TEZOS_P2P_SERVICES_DEPS + [
    ]
)

